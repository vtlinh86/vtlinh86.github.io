[1,["faI1Qj4vVJG4ly7A6YIl9b","859r9lLOZIRpJaHRQzcxIy@f9941","339KKaAhdLHJXzSzbviyCM@f9941","baIUdvKGZPgZxNbjWTFuRI","25thrNQgZBe4uvmPg7ygDi@f9941","f1KiPEuSRDIqJgPZgkKPHo@f9941","3fPoHQUfBIl4SwiqTyqxqn@f9941","0abJCQdAZJiYa46HbUm6D+@f9941","70vLgtpi1Adadtukv5ZlWw@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","f3k+om6L9MQYL/ur/Z0sH2@f9941","22qPM8rF9MergWBXVL2mde@f9941","f5zu/CESpOVpeTTTwAcpH2@f9941","80ELVCFGRH85X0ao7eU6zm@f9941","9f2QDdIhtPiY8s+6NCQ8g1@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","00uFNzyUZHhKb3TVVkny1g@f9941","5a8gG1WVFOLKgfrEqtkTLL@b47c0","82DRi3jzJNk4k/hOxVijr9@f9941","24pwTaKGdEbY0aXpIMdeCd@f9941","314vNoI/1OA4ZOWtdVjjfg@f9941","89mAjoETNCpoijGVougd2a@f9941","00uFNzyUZHhKb3TVVkny1g@6c48a","0abJCQdAZJiYa46HbUm6D+@6c48a","83MgiJPq5Em4tVAM4zRBFd@6c48a","d61DNz3ddLa6L0Ynf0ikpS","1eFmEwrTxBf6c26WdRLLU8@6c48a","20beoL/K9A/I83UjxbQQDf@6c48a","22qPM8rF9MergWBXVL2mde@6c48a","25thrNQgZBe4uvmPg7ygDi@6c48a","314vNoI/1OA4ZOWtdVjjfg@6c48a","339KKaAhdLHJXzSzbviyCM@6c48a","38SAUHiRNMQqCZgHgbgYmy@6c48a","3e+bEMK25L7pMple/tn/8o@6c48a","3fPoHQUfBIl4SwiqTyqxqn@6c48a","60MrwvFrRKF7UqvlQRgutr@6c48a","60290aBS5Oj4joIUeLM+3A@6c48a","66dkCigs9Ic6xJPQfSvkig@6c48a","70vLgtpi1Adadtukv5ZlWw@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","80ELVCFGRH85X0ao7eU6zm@6c48a","82DRi3jzJNk4k/hOxVijr9@6c48a","859r9lLOZIRpJaHRQzcxIy@6c48a","89mAjoETNCpoijGVougd2a@6c48a","9f2QDdIhtPiY8s+6NCQ8g1@6c48a","abcsLkEytKSpcW11E1959z@6c48a","c3DV5jdIFLv7R7ytVHtecK@6c48a","1fC+T44LpBTZiuNZlxSoH1","4e11YahjpB7JY7A2SdqSr6","b0TtmesfFCGLJ4Ebjh3S1c","ccw6dVfT1DBKo7ykeS152f","cfxTxOeVZIK668P7Hc027v","5eTUjEDjRFr6JoiUhRl+i8","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","a2NHKvtEZDlKDK6ac4PnF7","c3DV5jdIFLv7R7ytVHtecK@f9941","125EmMWUhNlLdAiENFo/8/","38SAUHiRNMQqCZgHgbgYmy@f9941","60290aBS5Oj4joIUeLM+3A@f9941","3e+bEMK25L7pMple/tn/8o@f9941","66dkCigs9Ic6xJPQfSvkig@f9941","c6nQSy8LhODorBbCobEK1t@f9941","c8K/mCZvZFaKZN+HhKmXTk@f9941","20beoL/K9A/I83UjxbQQDf@f9941","1eFmEwrTxBf6c26WdRLLU8@f9941","12Y9dMgWdJKJGmTiZyQR9H@fc873","60MrwvFrRKF7UqvlQRgutr@f9941","abcsLkEytKSpcW11E1959z@f9941","48HruAjhpHfpQ8Ajug/+7D","c6nQSy8LhODorBbCobEK1t@6c48a","c8K/mCZvZFaKZN+HhKmXTk@6c48a","f3k+om6L9MQYL/ur/Z0sH2@6c48a","f5zu/CESpOVpeTTTwAcpH2@6c48a"],["node","_customMaterial","_spriteFrame","_material","_normalSprite","_textureSource","_hoverSprite","_pressedSprite","_disabledSprite","_target","_parent","target","source","root","asset","targetInfo","_handle","mainTexture","_effectAsset","volumeUI","playerBackRateBar","videoShapeUI","rewind","fastForward","progressBar","playPause","videoPlayer","gazeReticleOuterRing","_cameraComponent","_barSprite","scene","renderer","_envmapHDR","_envmapLDR","_mesh","_clip"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_objFlags","_active","__editorExtras__","_components","_parent","_lpos","_children","_lscale","_lrot","_euler","_prefab"],-3,9,1,5,2,5,5,5,4],["cc.Sprite",["_sizeMode","_type","_fillType","node","_customMaterial","_spriteFrame","_color","_fillCenter"],0,1,6,6,5,5],["cc.Label",["_actualFontSize","_fontSize","_string","_enableWrapText","_overflow","_lineHeight","node","_customMaterial","_color"],-3,1,6,5],["cc.Node",["_name","_layer","_parent","_components","_lpos","_lscale","_children"],1,1,12,5,5,2],["cc.Button",["_transition","node","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","clickEvents"],2,1,5,1,6,6,6,6,9],["cc.Node",["_name","_id","_layer","_parent","_components","_children","_lpos","_lscale"],0,1,2,2,5,5],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["cc.Camera",["_visibility","_near","_clearFlags","_cameraType","_trackingType","_name","_projection","_priority","_orthoHeight","_far","node","_color"],-7,1,5],["cc.Layout",["_resizeMode","_layoutType","_spacingY","_affectedByScale","_isAlign","_startAxis","_spacingX","_constraint","_constraintNum","_paddingTop","_paddingBottom","node","_cellSize"],-8,1,5],["aaeefWAZ5BFQrbuxj/FZCHP",["_enabled","node"],2,1],["cc.BoxCollider",["node","_size","_material","_center"],3,1,5,6,5],["42802Gifv1E5aGtEbsdZBRs",["_trackingSource","node"],2,1],["8909cpyL+hIQrKUBvDwkdo8",["_targetEye","node"],2,1],["1e92bOQQApPabAbOLV6ZwkG",["_inputDevice","node"],2,1],["cc.Slider",["_progress","_direction","node","_handle"],1,1,1],["cc.Widget",["_alignFlags","_horizontalCenter","node"],1,1],["cc.ProgressBar",["_totalLength","_progress","_mode","node","_barSprite"],0,1,1],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.VideoClip",["_name","_native","_duration"],0],["cc.SceneAsset",["_name"],2],["c5a8f6OYxdEeI02dgLZW+wJ",["node","videoPlayer","playPause","progressBar","fastForward","rewind","videoShapeUI","playerBackRateBar","volumeUI"],3,1,1,1,1,1,1,1,1,1],["cc.RenderRoot2D",["node"],3,1],["cc.PrefabInfo",["fileId","nestedPrefabInstanceRoots","root","instance","targetOverrides","asset"],1,1,4,9,6],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["cc.TargetInfo",["localID"],2],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","lightProbeInfo"],3,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_enabled","_type","_distance","_shadowColor","_size"],0,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.LightProbeInfo",[],3],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.AudioSource",["node"],3,1],["4b5ca+hvnRKvqbmOcVO9MjU",["node"],3,1],["cc.SphereCollider",["node","_material"],3,1,6],["fb088tgUYlNQZWyJub1GwiW",["node"],3,1],["94f4b3Y9BtBuYwZ00W4c5re",["node","audioEvents","hapticEvents","interactorEvents"],3,1,4,4,4],["cc.AudioEvents",[],3],["cc.HapticEvents",[],3],["cc.SubInteractorEvents",[],3],["78601ayuslIQr9sP4c1t054",["_interactionLayerMask","_startingSelectedInteractable","node"],1,1],["cc.Line",["node","_materials","_positions","_width","_color"],3,1,3,12,4,4],["cc.CurveRange",["constant"],2],["cc.GradientRange",["color"],3,5],["545881MpgRHcJvx/HWYsWAk",["_startingSelectedInteractable","_forceGrab","_rayOriginTransform","_reticle","_lineType","_referenceNode","_velocity","_acceleration","_additionalGroundHeight","_additionalFlightTime","_endPointDistance","_endPointHeight","_controlPointDistance","_controlPointHeight","_sampleFrequency","_rayCastMask","node","gazeReticleOuterRing"],-13,1,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["eebb5ana4tJPoG11GC3Dhq4",["node"],3,1],["cc.RichText",["_string","_horizontalAlign","_verticalAlign","_fontSize","_maxWidth","_handleTouchEvent","node"],-3,1],["2bae89OKg1Ht5AEap6sVgok",["node","_offsetObject"],3,1,1],["cc.ModelBakeSettings",[],3],["ba57cejGr1Lm4SWg4cM+CoW",["node"],3,1],["db2ebM76HlGab8stwuZ1UK7",["node"],3,1],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","_shadowEnabled","_shadowPcf","_shadowBias","_shadowSaturation","_shadowDistance","_csmLevel","_shadowFar","_shadowOrthoSize","node","_staticSettings"],-7,1,4],["cc.StaticLightSettings",[],3],["cc.MeshRenderer",["node","_materials","bakeSettings"],3,1,3,4],["e9814K8BT9CQ7FARXfYxTeq",["node","videoPlayer"],3,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[7,0,1,1],[32,0,2],[10,1,1],[11,0,1,2,1],[60,1],[30,0,1,2,2],[22,0,1],[2,1,0,3,4,5,3],[5,0,1,2,3,4,5,6,7,2],[31,0,1,2,3],[3,2,0,1,4,3,6,7,6],[2,0,3,4,5,2],[1,0,1,7,6,3],[29,0,1,2,2],[1,0,1,7,6,8,10,3],[1,0,1,7,6,10,3],[1,0,1,9,6,8,3],[1,0,1,7,9,6,8,3],[33,0,1,2,3,4,2],[26,0,1,2,3],[5,0,1,2,3,2],[1,3,5,7,13,3],[25,0,1,2,3,4,5,4],[1,0,4,1,7,9,6,8,10,4],[4,0,1,2,3,4,5,3],[4,0,1,2,3,4,3],[1,0,1,9,6,3],[1,0,1,9,6,8,10,3],[1,0,9,6,2],[1,0,1,7,9,6,8,10,3],[4,0,1,2,6,3,4,5,3],[27,0,1,2,2],[28,0,1,2,3],[3,2,0,1,5,6,7,5],[1,0,4,1,7,6,8,10,4],[1,0,4,7,6,3],[7,0,1,2,1],[9,0,1,9,10,2,3,4,11,8],[2,1,0,3,6,3],[2,0,3,2],[5,1,2,3,4,1],[8,5,1,0,3,10,11,5],[12,0,1,2],[13,0,1,2],[47,0,1,2,3,1],[48,1],[49,1],[50,1],[3,2,0,1,3,6,7,5],[58,0,1,2,3,4,5,6,7],[18,0,1,2,3,4],[19,0,1,2,4],[20,0,2],[1,3,5,13,3],[1,0,1,2,7,9,6,8,10,4],[1,0,2,7,9,6,8,11,10,12,3],[1,0,1,2,7,9,6,8,4],[1,0,9,8,2],[1,0,1,7,6,8,3],[1,0,1,6,8,10,3],[1,0,2,7,9,6,8,11,12,3],[1,0,3,1,7,6,4],[1,0,2,7,6,3],[1,0,2,7,6,8,11,12,3],[4,0,1,2,3,5,3],[6,0,1,3,5,4,6,3],[6,0,3,5,4,7,2],[6,0,2,3,4,6,3],[21,0,1,2,3,4,5,6,7,8,1],[7,0,1],[23,0,1,2,3,4,5,3],[24,0,1,2,3,4,5,6],[34,0,1,2,3,2],[35,0,1,2,3,4,5,1],[36,0,1,2,2],[37,0,1,2,3,4,4],[38,0,1,2,2],[39,0,1],[40,1],[41,1],[9,0,1,5,6,2,7,8,3,4,11,12,10],[2,1,0,3,6,4,5,3],[2,1,2,0,3,6,4,5,4],[2,1,2,0,3,6,7,4],[5,0,1,8,2,3,4,5,6,7,2],[42,0,1,2,3],[10,0,1,2],[11,0,3,1,2,1],[8,1,2,0,3,4,10,6],[8,6,7,8,9,2,0,10,11,7],[43,0,1],[44,0,1],[12,1,1],[13,1,1],[14,1,1],[14,0,1,2],[45,0,1,1],[46,0,1],[51,0,1,2,3],[52,0,1,2,3,4,1],[53,0,2],[54,0,1],[15,0,2,3,2],[15,1,0,2,3,3],[55,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17],[56,0,1,1],[16,0,2,2],[16,0,1,2,3],[3,0,1,6,8,3],[3,2,0,1,4,3,6,8,7,6],[3,2,0,1,5,4,3,6,7,7],[3,2,0,1,5,4,3,6,8,7,7],[57,0,1],[17,2,0,1,3,4,4],[17,0,1,3,4,3],[59,0,1,1],[61,0,1],[62,0,1],[63,0,1,2,3,4,5,6,7,8,9,10,11,11],[64,1],[65,0,1,2,1],[66,0,1,1],[67,0,1,2,4]],[[[{"name":"xr_icon_videoplayer_shape_background","rect":{"x":0,"y":0,"width":236,"height":248},"offset":{"x":0,"y":0},"originalSize":{"width":236,"height":248},"rotated":false,"capInsets":[61,46,60,71],"vertices":{"rawPosition":[-118,-124,0,118,-124,0,-118,124,0,118,124,0],"indexes":[0,1,2,2,1,3],"uv":[0,248,236,248,0,0,236,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-118,"y":-124,"z":0},"maxPos":{"x":118,"y":124,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[22]],[[{"name":"xr_icon_videoplayer_subtitle_close_normal","rect":{"x":0,"y":0,"width":80,"height":55},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":55},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40,-27.5,0,40,-27.5,0,-40,27.5,0,40,27.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,55,80,55,0,0,80,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40,"y":-27.5,"z":0},"maxPos":{"x":40,"y":27.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[23]],[[[50,"xr-videoplayer",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[17,18],[24,25]],[[{"name":"xr_reticle_outer","rect":{"x":3,"y":4,"width":251,"height":251},"offset":{"x":0.5,"y":-1.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-125.5,-125.5,0,125.5,-125.5,0,-125.5,125.5,0,125.5,125.5,0],"indexes":[0,1,2,2,1,3],"uv":[3,252,254,252,3,1,254,1],"nuv":[0.01171875,0.00390625,0.9921875,0.00390625,0.01171875,0.984375,0.9921875,0.984375],"minPos":{"x":-125.5,"y":-125.5,"z":0},"maxPos":{"x":125.5,"y":125.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[26]],[[{"name":"xr_icon_videoplayer_exit_pressed","rect":{"x":0,"y":0,"width":272,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-136,-32,0,136,-32,0,-136,32,0,136,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,272,64,0,0,272,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-136,"y":-32,"z":0},"maxPos":{"x":136,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[27]],[[{"name":"xr_icon_videoplayer_playforward_normal","rect":{"x":12,"y":16,"width":41,"height":28},"offset":{"x":2.5,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-20.5,-14,0,20.5,-14,0,-20.5,14,0,20.5,14,0],"indexes":[0,1,2,2,1,3],"uv":[12,44,53,44,12,16,53,16],"nuv":[0.2,0.26666666666666666,0.8833333333333333,0.26666666666666666,0.2,0.7333333333333333,0.8833333333333333,0.7333333333333333],"minPos":{"x":-20.5,"y":-14,"z":0},"maxPos":{"x":20.5,"y":14,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[28]],[[{"name":"xr_icon_videoplayer_play_normal","rect":{"x":11,"y":7,"width":41,"height":46},"offset":{"x":1.5,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-20.5,-23,0,20.5,-23,0,-20.5,23,0,20.5,23,0],"indexes":[0,1,2,2,1,3],"uv":[11,53,52,53,11,7,52,7],"nuv":[0.18333333333333332,0.11666666666666667,0.8666666666666667,0.11666666666666667,0.18333333333333332,0.8833333333333333,0.8666666666666667,0.8833333333333333],"minPos":{"x":-20.5,"y":-23,"z":0},"maxPos":{"x":20.5,"y":23,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[29]],[[{"name":"xr_icon_videoplayer_playback_hover","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[30]],[[{"name":"xr_icon_videoplayer_button_hover","rect":{"x":0,"y":0,"width":120,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-30,0,60,-30,0,-60,30,0,60,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,120,60,0,0,120,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60,"y":-30,"z":0},"maxPos":{"x":60,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[31]],[[{"name":"xr_icon_videoplayer_panel_background","rect":{"x":2,"y":2,"width":1342,"height":221},"offset":{"x":0,"y":0.5},"originalSize":{"width":1346,"height":226},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-671,-110.5,0,671,-110.5,0,-671,110.5,0,671,110.5,0],"indexes":[0,1,2,2,1,3],"uv":[2,224,1344,224,2,3,1344,3],"nuv":[0.0014858841010401188,0.01327433628318584,0.9985141158989599,0.01327433628318584,0.0014858841010401188,0.9911504424778761,0.9985141158989599,0.9911504424778761],"minPos":{"x":-671,"y":-110.5,"z":0},"maxPos":{"x":671,"y":110.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[32]],[[{"name":"xr_icon_videoplayer_subtitle_hover","rect":{"x":0,"y":0,"width":80,"height":44},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":44},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40,-22,0,40,-22,0,-40,22,0,40,22,0],"indexes":[0,1,2,2,1,3],"uv":[0,44,80,44,0,0,80,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40,"y":-22,"z":0},"maxPos":{"x":40,"y":22,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[33]],[[{"name":"xr_icon_videoplayer_pause","rect":{"x":13,"y":11,"width":34,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-17,-19,0,17,-19,0,-17,19,0,17,19,0],"indexes":[0,1,2,2,1,3],"uv":[13,49,47,49,13,11,47,11],"nuv":[0.21666666666666667,0.18333333333333332,0.7833333333333333,0.18333333333333332,0.21666666666666667,0.8166666666666667,0.7833333333333333,0.8166666666666667],"minPos":{"x":-17,"y":-19,"z":0},"maxPos":{"x":17,"y":19,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[34]],[[[51,"3d-video",".mp4",110.550204],-1],0,0,[],[],[]],[[{"name":"xr_icon_videoplayer_volume_mute","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[35]],[[{"name":"xr_icon_videoplayer_subtitle_close_hover","rect":{"x":0,"y":0,"width":80,"height":55},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":55},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40,-27.5,0,40,-27.5,0,-40,27.5,0,40,27.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,55,80,55,0,0,80,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40,"y":-27.5,"z":0},"maxPos":{"x":40,"y":27.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[36]],[[{"name":"xr_icon_videoplayer_volume_background","rect":{"x":0,"y":0,"width":148,"height":344},"offset":{"x":0,"y":0},"originalSize":{"width":148,"height":344},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-74,-172,0,74,-172,0,-74,172,0,74,172,0],"indexes":[0,1,2,2,1,3],"uv":[0,344,148,344,0,0,148,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-74,"y":-172,"z":0},"maxPos":{"x":74,"y":172,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[37]],[[{"name":"xr_icon_videoplayer_subtitle_normal","rect":{"x":0,"y":0,"width":80,"height":44},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":44},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-40,-22,0,40,-22,0,-40,22,0,40,22,0],"indexes":[0,1,2,2,1,3],"uv":[0,44,80,44,0,0,80,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-40,"y":-22,"z":0},"maxPos":{"x":40,"y":22,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[38]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-1,-1,0,1,-1,0,-1,1,0,1,1,0],"indexes":[0,1,2,2,1,3],"uv":[0,2,2,2,0,0,2,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-1,"y":-1,"z":0},"maxPos":{"x":1,"y":1,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[39]],[[{"name":"xr_icon_videoplayer_volume_normal","rect":{"x":7,"y":12,"width":46,"height":37},"offset":{"x":0,"y":-0.5},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-23,-18.5,0,23,-18.5,0,-23,18.5,0,23,18.5,0],"indexes":[0,1,2,2,1,3],"uv":[7,48,53,48,7,11,53,11],"nuv":[0.11666666666666667,0.18333333333333332,0.8833333333333333,0.18333333333333332,0.11666666666666667,0.8,0.8833333333333333,0.8],"minPos":{"x":-23,"y":-18.5,"z":0},"maxPos":{"x":23,"y":18.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[40]],[[{"name":"xr_icon_videoplayer_volume_hover","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[41]],[[{"name":"xr_icon_videoplayer_button_normal","rect":{"x":0,"y":0,"width":120,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-30,0,60,-30,0,-60,30,0,60,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,120,60,0,0,120,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60,"y":-30,"z":0},"maxPos":{"x":60,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[42]],[[{"name":"xr_icon_videoplayer_playforward_hover","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[43]],[[{"name":"default_progressbar_bg","rect":{"x":0,"y":0,"width":60,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-30,-7.5,0,30,-7.5,0,-30,7.5,0,30,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,60,15,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-7.5,"z":0},"maxPos":{"x":30,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[44]],[[{"name":"xr_icon_videoplayer_hover","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-30,-30,0,30,-30,0,-30,30,0,30,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,60,60,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-30,"z":0},"maxPos":{"x":30,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[45]],[[{"name":"xr_reticle_inner","rect":{"x":85,"y":85,"width":87,"height":87},"offset":{"x":0.5,"y":-0.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-43.5,-43.5,0,43.5,-43.5,0,-43.5,43.5,0,43.5,43.5,0],"indexes":[0,1,2,2,1,3],"uv":[85,171,172,171,85,84,172,84],"nuv":[0.33203125,0.328125,0.671875,0.328125,0.33203125,0.66796875,0.671875,0.66796875],"minPos":{"x":-43.5,"y":-43.5,"z":0},"maxPos":{"x":43.5,"y":43.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[46]],[[[52,"main-xr-video"],[26,"XR Video Controller",8388608,[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32],[[68,-9,-8,-7,-6,-5,-4,-3,-2,-1],[69,-10],[6,-11]]],[53,0,{},[70,"f2EIj8Vm9Avrc32qcx7awa",null,-51,[19,"39N6BVs7NAj6wxmO0McZZq",null,[[31,["_contentSize"],[1,["a7Ykim8nNAcpSqvVPinXgz"]],[5,960,640]],[31,["_lpos"],[1,["26zTf0+jJGuozhWpobDW4x"]],[1,480,320,0]],[32,"XR Simulator",["_name"],-47],[13,["_lpos"],-48,[1,0,0,0]],[13,["_lrot"],-49,[3,0,0,0,1]],[13,["_euler"],-50,[1,0,0,0]]]],[[18,["_target"],-34,[1,["7eACBq9ZxNwb/royRJlers"]],-33,[1,["d57o/36SxN9YtElmAvjO1V"]]],[18,["_target"],-36,[1,["2dAJir4J5F3IVEGgha4oCG"]],-35,[1,["95y6nLs4hA5I1ZNmNnqAf7"]]],[18,["_checkMark"],-38,[1,["2dAJir4J5F3IVEGgha4oCG"]],-37,[1,["6a3igP/VNBZYvug9YSE5FN"]]],[18,["_target"],-40,[1,["a95mHuH6ROR7XaOgPuWyEd"]],-39,[1,["ad22BsYuRDY6TnQv35xUeK"]]],[18,["_checkMark"],-42,[1,["a95mHuH6ROR7XaOgPuWyEd"]],-41,[1,["49e5ph85xFxJDpNSXxjgC3"]]],[18,["_target"],-44,[1,["89UUVBLutMJ7dHzHXeWtHV"]],-43,[1,["347i8XM0JD35alYLTjWT4K"]]],[18,["_checkMark"],-46,[1,["89UUVBLutMJ7dHzHXeWtHV"]],-45,[1,["794bTa5U1Fpa+Pn8dk8bDV"]]]],15]],[72,"main-xr-video",[-57,-58,-59,-60,-61,-62,-63,2,-64,-65,-66],[71,null,null,"c313d1eb-999d-4f6b-99ff-0b8ff30907c7",null,null,[-52,-53,-54,-55,-56,2]],[73,[74,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[75,true,1,1,[4,1929379840],[0,512,512]],[76,true,215,216],[77,[4,4292993505]],[78],[79]]],[27,"Container",8388608,[-69,-70,-71,-72,-73,-74,-75],[[0,-67,[5,300,200]],[80,2,3,1,10,10,1,3,true,true,-68,[5,375,131]]],[1,-249.333,77.667,0],[1,0.6,0.6,0.6]],[54,"ChangeToXRUI",8388608,"96as99IrJJD7rpxwniNblf",3,[-84],[[0,-76,[5,100,40]],[7,1,0,-77,8,9],[84,2,-80,[[85,"ba57cejGr1Lm4SWg4cM+CoW","changeSceneToXRUI",-79]],[4,4292269782],-78,10,11,12,13],[2,-81],[3,-82,[1,100,40,0.01],14],[6,-83]],[1,-0.031,9.808,-5.39],[1,0.05,0.05,0.05]],[30,"PlaySpeed",8388608,1,[-91],[[[0,-85,[5,36,22]],[11,0,-86,64,65],-87,[2,-88],[3,-89,[1,36,22,0.01],66],[6,-90]],4,4,1,4,4,4],[1,1.308,-1.347,0.01],[1,0.01,0.01,0.01]],[16,"PlaySpeed_05",8388608,[-99],[[0,-92,[5,36,12.8]],[7,1,0,-93,81,82],[8,2,-95,[4,4292269782],-94,83,84,85,86],[2,-96],[3,-97,[1,36,12.8,0.01],87],[6,-98]],[1,0,27.6,0]],[16,"PlaySpeed_10",8388608,[-107],[[0,-100,[5,36,12.8]],[7,1,0,-101,89,90],[8,2,-103,[4,4292269782],-102,91,92,93,94],[2,-104],[3,-105,[1,36,12.8,0.01],95],[6,-106]],[1,0,13.800000000000002,0]],[26,"PlaySpeed_15",8388608,[-115],[[0,-108,[5,36,12.8]],[7,1,0,-109,97,98],[8,2,-111,[4,4292269782],-110,99,100,101,102],[2,-112],[3,-113,[1,36,12.8,0.01],103],[6,-114]]],[16,"PlaySpeed_20",8388608,[-123],[[0,-116,[5,36,12.8]],[7,1,0,-117,105,106],[8,2,-119,[4,4292269782],-118,107,108,109,110],[2,-120],[3,-121,[1,36,12.8,0.01],111],[6,-122]],[1,0,-13.799999999999999,0]],[16,"PlaySpeed_25",8388608,[-131],[[0,-124,[5,36,12.8]],[7,1,0,-125,113,114],[8,2,-127,[4,4292269782],-126,115,116,117,118],[2,-128],[3,-129,[1,36,12.8,0.01],119],[6,-130]],[1,0,-27.6,0]],[16,"PlayShape_2D",8388608,[-139],[[0,-132,[5,220,77.33333333333333]],[7,1,0,-133,123,124],[8,2,-135,[4,4292269782],-134,125,126,127,128],[2,-136],[3,-137,[1,220,77,0.01],129],[6,-138]],[1,0,81.33333333333334,0]],[26,"PlayShape_Pano180",8388608,[-147],[[0,-140,[5,220,77.33333333333333]],[7,1,0,-141,131,132],[8,2,-143,[4,4292269782],-142,133,134,135,136],[2,-144],[3,-145,[1,220,77,0.01],137],[6,-146]]],[16,"PlayShape_Pano360",8388608,[-155],[[0,-148,[5,220,77.33333333333333]],[7,1,0,-149,139,140],[8,2,-151,[4,4292269782],-150,141,142,143,144],[2,-152],[3,-153,[1,220,77,0.01],145],[6,-154]],[1,0,-81.33333333333331,0]],[17,"PlayShape_2D",8388608,4,[-163],[[0,-156,[5,375,131]],[11,0,-157,149,150],[8,2,-159,[4,4292269782],-158,151,152,153,154],[2,-160],[3,-161,[1,375,131,0.01],155],[6,-162]],[1,37.5,34.5,0]],[17,"PlayShape_Pano180",8388608,4,[-171],[[0,-164,[5,375,131]],[7,1,0,-165,157,158],[8,2,-167,[4,4292269782],-166,159,160,161,162],[2,-168],[3,-169,[1,375,131,0.01],163],[6,-170]],[1,37.5,-106.5,0]],[17,"PlayShape_Pano360",8388608,4,[-179],[[0,-172,[5,375,131]],[7,1,0,-173,165,166],[8,2,-175,[4,4292269782],-174,167,168,169,170],[2,-176],[3,-177,[1,375,131,0.01],171],[6,-178]],[1,37.5,-247.5,0]],[17,"PlayShape_3DLR",8388608,4,[-187],[[0,-180,[5,375,131]],[7,1,0,-181,173,174],[8,2,-183,[4,4292269782],-182,175,176,177,178],[2,-184],[3,-185,[1,375,131,0.01],179],[6,-186]],[1,422.5,34.5,0]],[17,"PlayShape_3DTB",8388608,4,[-195],[[0,-188,[5,375,131]],[7,1,0,-189,181,182],[8,2,-191,[4,4292269782],-190,183,184,185,186],[2,-192],[3,-193,[1,375,131,0.01],187],[6,-194]],[1,422.5,-106.5,0]],[17,"PlayShape_Pano3603DLR",8388608,4,[-203],[[0,-196,[5,375,131]],[7,1,0,-197,189,190],[8,2,-199,[4,4292269782],-198,191,192,193,194],[2,-200],[3,-201,[1,375,131,0.01],195],[6,-202]],[1,422.5,-247.5,0]],[17,"PlayShape_Pano3603DTB",8388608,4,[-211],[[0,-204,[5,375,131]],[7,1,0,-205,197,198],[8,2,-207,[4,4292269782],-206,199,200,201,202],[2,-208],[3,-209,[1,375,131,0.01],203],[6,-210]],[1,807.5,34.5,0]],[28,"XR HMD",[-217,-218],[[88,0.1,14,1820327937,2,1,-212],[90,-213],[91,-214],[42,2,-215],[93,-216]]],[30,"PlayShape",8388608,1,[-224],[[[0,-219,[5,45,22]],[11,0,-220,68,69],-221,[2,-222],[3,-223,[1,45,22,0.01],70]],4,4,1,4,4],[1,1.75,-1.347,0.01],[1,0.01,0.01,0.01]],[16,"Container",8388608,[7,8,9,10,11],[[0,-225,[5,36,70]],[37,2,2,1,1,1,true,true,-226]],[1,0,4.3,0]],[29,"Exit",8388608,1,[-233],[[0,-227,[5,272,64]],[7,1,2,-228,207,208],[8,2,-230,[4,4292269782],-229,209,210,211,212],[2,-231],[3,-232,[1,272,64,0.01],213]],[1,0,-1.905,0],[1,0.005,0.005,0.005]],[28,"Controller Left",[-239],[[92,-234],[94,-235],[96,-236,1],[97,-237],[44,-238,[45],[46],[47]]]],[28,"Controller Right",[-245],[[42,4,-240],[95,1,-241],[98,4294967295,null,-242],[99,-243,[3],[[[1,0,0,0],[1,0,0,-30]],8,8],[100,0.004],[101,[4,4278190335]]],[44,-244,[45],[46],[47]]]],[24,"Volume",8388608,1,[[[0,-246,[5,24,24]],[11,0,-247,22,23],-248,[2,-249],[3,-250,[1,26,26,0.01],24]],4,4,1,4,4],[1,-1.778,-1.347,0.01],[1,0.01,0.01,0.01]],[29,"SeekSlider",8388608,1,[-257],[[0,-251,[5,300,5]],[81,3,0,-252,[4,4294404641],28,29],[102,0,-254,-253],[2,-255],[3,-256,[1,300,10,0.01],30]],[1,0.048,-1.553,0.01],[1,0.01,0.01,0.01]],[24,"Play",8388608,1,[[[0,-258,[5,24,24]],[11,0,-259,33,34],-260,[2,-261],[3,-262,[1,26,26,0.01],35]],4,4,1,4,4],[1,0,-1.347,0.01],[1,0.01,0.01,0.01]],[34,"Pause",false,8388608,1,[[0,-263,[5,24,24]],[11,0,-264,36,37],[8,2,-266,[4,4292269782],-265,38,39,40,41],[2,-267],[3,-268,[1,26,26,0.01],42]],[1,0,-1.347,0.01],[1,0.01,0.01,0.01]],[24,"PlayRewind",8388608,1,[[[0,-269,[5,22,22]],[11,0,-270,43,44],-271,[2,-272],[3,-273,[1,24,24,0.01],45]],4,4,1,4,4],[1,-0.4,-1.347,0.01],[1,0.01,0.01,0.01]],[24,"PlayForward",8388608,1,[[[0,-274,[5,22,22]],[11,0,-275,46,47],-276,[2,-277],[3,-278,[1,24,24,0.01],48]],4,4,1,4,4],[1,0.4,-1.347,0.01],[1,0.01,0.01,0.01]],[34,"SubtitleDisabled",false,8388608,1,[[0,-279,[5,36,24]],[11,0,-280,49,50],[8,2,-282,[4,4292269782],-281,51,52,53,54],[2,-283],[3,-284,[1,36,24,0.01],55]],[1,0.889,-1.347,0.01],[1,0.01,0.01,0.01]],[14,"SubtitleEnabled",8388608,1,[[0,-285,[5,36,22]],[11,0,-286,56,57],[8,2,-288,[4,4292269782],-287,58,59,60,61],[2,-289],[3,-290,[1,36,22,0.01],62]],[1,0.889,-1.347,0.01],[1,0.01,0.01,0.01]],[27,"VolumeSlider",8388608,[-297],[[0,-291,[5,5,120]],[82,3,1,0,-292,[4,4294404641],74,75],[103,1,0,-294,-293],[2,-295],[3,-296,[1,15,120,0.01],76]],[1,0,-1.9,0],[1,0.5,0.5,0.5]],[55,"Gaze Pointer Interactor","b9Y0xWGKpMraBt1ZswAf5L",3,[-302,-303],[[0,-298,[5,16,16]],[6,-299],[104,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,-301,-300]],[1,0.3800772618681967,5.237876409665997,6.746526680395974],[3,-0.07236081996736565,0.035018096412070245,0.002542173940871126,0.9967603433167774],[1,0.0022500000000000016,0.002250000000000001,0.0022500000000000007],[1,-8.304321541008015,4.0241654725802976,4.969616689786745e-17]],[56,"Canvas",33554432,"a8X9OiFblEeZfm2KrQCYum",3,[-308,-309],[[0,-304,[5,960,640]],[105,-306,-305],[106,45,-307]],[1,480,320,0]],[23,"VolumeControlPanel",false,8388608,1,[-312,36,-313],[[0,-310,[5,45,107]],[11,0,-311,78,79]],[1,-1.778,-0.732,0.01],[1,0.01,0.01,0.01]],[27,"Container",8388608,[12,13,14],[[0,-314,[5,236,248]],[37,2,2,4,4,4,true,true,-315]],[1,0,12,0],[1,0.6,0.6,0.6]],[57,"TrackingSpace",[22,26,27],[1,0,1.36144,0]],[58,"Label",33554432,38,[[0,-316,[5,42.26,50.4]],[108,20,20,-317,[4,4278387708]],[107,18,-100,-318],[112,-319]],[1,-100,0,0]],[65,"XR Video Player","2d81lipHRM0I5K0OygsF0V",3,[-321,1,-322],[-320],[1,0,5.345,2.999]],[14,"VideoControllerBackground",8388608,1,[[0,-323,[5,1.05,1.05]],[11,0,-324,19,20],[86,false,-325],[87,-326,[1,0,0,-0.2],[1,0.99,0.75,0.01],21]],[1,0,-1.464,-0.001],[1,4,0.8,1]],[30,"PlayProgressBar",8388608,1,[-330],[[[0,-327,[5,300,5]],[7,1,0,-328,25,26],-329],4,4,1],[1,0.048,-1.553,0.009],[1,0.01,0.01,0.01]],[25,"Handle",8388608,29,[[[0,-331,[5,10,10]],-332,[40,-334,[4,4292269782],-333,27]],4,1,4],[1,-150,0,0]],[29,"ProgressBar",8388608,39,[-339],[[0,-335,[5,5,120]],[7,1,0,-336,71,72],[113,1,120,0,-338,-337]],[1,-2.842170943040401e-14,-1.9000000000000057,0],[1,0.5,0.5,0.5]],[25,"Handle",8388608,36,[[[0,-340,[5,10,10]],-341,[40,-343,[4,4292269782],-342,73]],4,1,4],[1,0,-60,0]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["f2EIj8Vm9Avrc32qcx7awa"]],[59,"SubtitleDisplayPlane",8388608,[[0,-344,[5,1200,90.39999999999999]],[49,"字幕显示区域\nThis place will show video subtitle content!",1,2,32,1200,false,-345],[6,-346]],[1,0,-0.42488888888888887,0],[1,0.00075,0.0013333333333333333,0.003]],[23,"PlaySpeedControlPanel",false,8388608,1,[24],[[0,-347,[5,62,100]],[11,0,-348,120,121]],[1,1.28,-0.75,0.01],[1,0.01,0.01,0.01]],[23,"PlayShapeControlPanel",false,8388608,1,[40],[[0,-349,[5,236,248]],[7,1,0,-350,146,147]],[1,1.743,-0.878,0.01],[1,0.003,0.003,0.003]],[23,"PlayShapeControlPanel-3D",false,8388608,1,[4],[[0,-351,[5,800,350]],[7,1,0,-352,204,205]],[1,1.789,-0.723,0.01],[1,0.003,0.003,0.003]],[14,"SubtitleDisplayPano",8388608,1,[[0,-353,[5,1200,90.39999999999999]],[49,"字幕显示区域\nThis place will show video subtitle content!",1,2,32,1200,false,-354],[6,-355]],[1,0,-0.956,0],[1,0.003,0.003,0.003]],[60,"XR Agent","037wZ7P7JD/ZK8F4B1swLb",3,[41],[[115,-356,41]],[1,0.4563737338172984,4.020698998822525,7.83104356477376],[3,-0.07236081996736557,0.03501809641207027,0.002542173940871126,0.9967603433167773],[1,-8.304321541008003,4.024165472580301,9.93923337957349e-17]],[35,"LeftEye",false,22,[[41,"Camera<CameraComponent>",0.1,1822425087,0,-357,[4,4286073907]],[43,1,-358]]],[35,"RightEye",false,22,[[41,"Camera<CameraComponent>",0.1,1822425087,1,-359,[4,4286073907]],[43,2,-360]]],[21,0,{},26,[22,"c46/YsCPVOJYA4mWEpNYRx",null,null,-361,[19,"77pE1KzkdB1YkyggGPDHFM",null,[[32,"Controller Left",["_name"],49],[13,["_lpos"],49,[1,0,0,0]],[13,["_lrot"],49,[3,0,0,0,1]],[13,["_euler"],49,[1,0,0,0]]]],0]],[21,0,{},27,[22,"c46/YsCPVOJYA4mWEpNYRx",null,null,-362,[19,"9fH5YsnTBIRoRxaiCE5s3E",null,[[32,"Controller Right",["_name"],50],[13,["_lpos"],50,[1,0,0,0]],[13,["_lrot"],50,[3,0,0,0,1]],[13,["_euler"],50,[1,0,0,0]]]],2]],[21,0,null,3,[22,"26LvC5hbxAuJZ9Jl2SB/IV",null,null,-363,[19,"cdNOYl3LRPhapW8a8hi/Iy",null,[[5,["lightmapSettings"],[1,["ddvMFij+ZIL5lu+/NQX8Nf"]],[4]],[5,["lightmapSettings"],[1,["e3XMjUJKFLH41z39JaWzyB"]],[4]],[31,["position"],[1,["fd517lz3tOuqVWGd5300X6"]],[1,-1.341,0.805,-2.555]],[5,["lightmapSettings"],[1,["a5Viy6l3VLDpf6gY5yZF+v"]],[4]],[9,1,["_shadowCastingMode"],[1,["a5Viy6l3VLDpf6gY5yZF+v"]]],[5,["lightmapSettings"],[1,["e4If/bQrJCsb9D9JopZa2h"]],[4]],[5,["lightmapSettings"],[1,["d7Vkz0NV5Mn4RUce28JVTp"]],[4]],[5,["lightmapSettings"],[1,["3eVATgLQJKDbqOvE33W2uc"]],[4]],[5,["lightmapSettings"],[1,["2akU/MgO5Ovo6QcS0c/I7e"]],[4]],[5,["lightmapSettings"],[1,["54xaKIQbtPLK5r21VY0qmM"]],[4]],[5,["lightmapSettings"],[1,["23UFBqszxJ/6Otof04QwYT"]],[4]],[5,["lightmapSettings"],[1,["c7PE6gNTdDw45ytwlOEWR3"]],[4]],[9,true,["_active"],[1,["26LvC5hbxAuJZ9Jl2SB/IV"]]]]],4]],[21,0,null,3,[22,"6dMvPN2t1B66O9Zc3HG8dr",null,null,-364,[19,"93xtJEZ71OF5Gk8u497J9k",null,[[5,["lightmapSettings"],[1,["78XZsd31xPjIsSP2888FcN"]],[4]],[5,["lightmapSettings"],[1,["ffoVYmt2NOmIBz5DHpacF8"]],[4]],[5,["lightmapSettings"],[1,["9aCVBuMeZPv6so1VxT6c40"]],[4]],[5,["lightmapSettings"],[1,["ca1srfPsJJgKKJww9GO/JE"]],[4]],[9,false,["_active"],[1,["6dMvPN2t1B66O9Zc3HG8dr"]]]]],5]],[21,0,null,3,[22,"e5Peksu5tL9peMeABb8/JC",null,null,-365,[19,"7e4SH9jydKyaQjXZtS5AiQ",null,[[5,["lightmapSettings"],[1,["a6J1jU/r1BPKNIcVMEREit"]],[4]],[9,1,["_shadowReceivingMode"],[1,["a6J1jU/r1BPKNIcVMEREit"]]],[5,["lightmapSettings"],[1,["28WH2cvhNDFbN3it+8Q+XK"]],[4]],[9,1,["_shadowReceivingMode"],[1,["28WH2cvhNDFbN3it+8Q+XK"]]],[5,["lightmapSettings"],[1,["87exLhmM1P35jx6GLN7j5f"]],[4]],[9,1,["_shadowReceivingMode"],[1,["87exLhmM1P35jx6GLN7j5f"]]],[5,["lightmapSettings"],[1,["dduLonFhNK+q908BUlLM7f"]],[4]],[9,1,["_shadowCastingMode"],[1,["dduLonFhNK+q908BUlLM7f"]]],[9,1,["_shadowReceivingMode"],[1,["dduLonFhNK+q908BUlLM7f"]]],[5,["lightmapSettings"],[1,["af0f1GeGlKf5MvKMEuH8MJ"]],[4]],[9,1,["_shadowReceivingMode"],[1,["af0f1GeGlKf5MvKMEuH8MJ"]]],[5,["lightmapSettings"],[1,["e9BPt5G81CloUmA5IJNHIQ"]],[4]],[9,1,["_shadowReceivingMode"],[1,["e9BPt5G81CloUmA5IJNHIQ"]]],[5,["lightmapSettings"],[1,["7dt8ZZ5EBNDIxOgpt1XbGu"]],[4]],[9,1,["_shadowReceivingMode"],[1,["7dt8ZZ5EBNDIxOgpt1XbGu"]]],[5,["lightmapSettings"],[1,["c4Nekl9YtKUKupS0ASX7It"]],[4]],[9,1,["_shadowReceivingMode"],[1,["c4Nekl9YtKUKupS0ASX7It"]]],[5,["lightmapSettings"],[1,["b9cuhcVRxPvZTPHcAyE7eS"]],[4]],[9,1,["_shadowReceivingMode"],[1,["b9cuhcVRxPvZTPHcAyE7eS"]]],[5,["lightmapSettings"],[1,["f3T3OFBBJBYrGbPSQ+k7GJ"]],[4]],[9,1,["_shadowReceivingMode"],[1,["f3T3OFBBJBYrGbPSQ+k7GJ"]]],[5,["lightmapSettings"],[1,["d0A5LfhGhAfrDnBGJ3JzOe"]],[4]],[9,1,["_shadowReceivingMode"],[1,["d0A5LfhGhAfrDnBGJ3JzOe"]]],[5,["lightmapSettings"],[1,["161SEdWiFO/abXxUI8RkYk"]],[4]],[9,1,["_shadowReceivingMode"],[1,["161SEdWiFO/abXxUI8RkYk"]]],[9,false,["_active"],[1,["e5Peksu5tL9peMeABb8/JC"]]]]],6]],[61,"Label",512,8388608,5,[[0,-366,[5,100,40]],[109,"ChangeToXRUI",12,12,1,false,-367,[4,4278190080],7]]],[62,"change_scene","8eyOMiPZJA8pFZqTjf7n7q",3,[[116,-368]]],[15,"Reticle Inner",8388608,37,[[0,-369,[5,24,24]],[11,0,-370,16,17]],[1,0.3,0.3,0.3]],[64,"Reticle Outer",8388608,37,[[[0,-371,[5,48,48]],-372],4,1],[1,0.3,0.3,0.3]],[66,"XR Video Content",43,[52],[-373],[1,4,2.25,1]],[25,"Bar",8388608,45,[[[36,-374,[5,0,5],[0,0,0.5]],-375],4,1],[1,-150,0,0]],[14,"PlayedTime",8388608,1,[[0,-376,[5,124.56,40.32]],[33,"00:00:00",32,32,32,-377,31]],[1,-1.734,-1.552,0.01],[1,0.003,0.003,0.003]],[14,"TotalTime",8388608,1,[[0,-378,[5,124.56,40.32]],[33,"00:00:00",32,32,32,-379,32]],[1,1.772,-1.552,0.01],[1,0.003,0.003,0.003]],[15,"Label",8388608,6,[[0,-380,[5,100,40]],[10,"1X",32,32,1,false,-381,63]],[1,0.3,0.3,1]],[15,"Label",8388608,23,[[0,-382,[5,200,80]],[10,"2D",32,32,1,false,-383,67]],[1,0.28,0.28,1]],[25,"Bar",8388608,47,[[[36,-384,[5,5,0],[0,0.5,0]],-385],4,1],[1,0,-60,0]],[14,"VolumeValue",8388608,39,[[0,-386,[5,35.59,40.32]],[33,"00",32,32,32,-387,77]],[1,0,35,0],[1,0.3,0.3,0.3]],[15,"Label",8388608,7,[[0,-388,[5,100,40]],[10,"0.5X",32,32,1,false,-389,80]],[1,0.2,0.2,1]],[15,"Label",8388608,8,[[0,-390,[5,100,40]],[10,"1.0X",32,32,1,false,-391,88]],[1,0.2,0.2,1]],[15,"Label",8388608,9,[[0,-392,[5,100,40]],[10,"1.5X",32,32,1,false,-393,96]],[1,0.2,0.2,1]],[15,"Label",8388608,10,[[0,-394,[5,100,40]],[10,"2.0X",32,32,1,false,-395,104]],[1,0.2,0.2,1]],[15,"Label",8388608,11,[[0,-396,[5,100,40]],[10,"2.5X",32,32,1,false,-397,112]],[1,0.2,0.2,1]],[12,"Label",8388608,12,[[0,-398,[5,100,40]],[10,"2D",32,32,1,false,-399,122]]],[12,"Label",8388608,13,[[0,-400,[5,160,40]],[10,"180° Pano",32,32,1,false,-401,130]]],[12,"Label",8388608,14,[[0,-402,[5,160,40]],[10,"360° Pano",32,32,1,false,-403,138]]],[12,"Label",8388608,15,[[0,-404,[5,100,40]],[10,"2D",32,32,1,false,-405,148]]],[12,"Label",8388608,16,[[0,-406,[5,160,40]],[10,"180° Pano",32,32,1,false,-407,156]]],[12,"Label",8388608,17,[[0,-408,[5,160,40]],[10,"360° Pano",32,32,1,false,-409,164]]],[12,"Label",8388608,18,[[0,-410,[5,200,40]],[10,"3D Left Right",32,32,1,false,-411,172]]],[12,"Label",8388608,19,[[0,-412,[5,220,40]],[10,"3D Top Bottom",32,32,1,false,-413,180]]],[12,"Label",8388608,20,[[0,-414,[5,345.47,50.4]],[48,"360° Pano 3D Left Right",32,32,false,-415,188]]],[12,"Label",8388608,21,[[0,-416,[5,370.36,50.4]],[48,"360° Pano 3D Top Bottom",32,32,false,-417,196]]],[14,"Label",8388608,25,[[0,-418,[5,100,64]],[110,"退出",48,48,64,1,false,-419,206]],[1,29.6,0.6,0],[1,0.5,0.5,0.5]],[14,"VideoClipName",8388608,1,[[0,-420,[5,1200,32]],[111,"",28,28,32,1,false,-421,[4,4290098621],214]],[1,0,-1.659,0.009999999999999787],[1,0.003,0.003,0.003]],[117,43],[63,"Main Light","c0y6F5f+pAvI805TdmxIjx",3,[[118,125000,3.2552083333333335,true,2,0.01,0.45098039215686275,10,1,50,10,-422,[119]]],[1,-2.955,3.412,5.118],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[83,3,2,0,68,[4,4278190335],[0,0.5,0.5]],[67,"Camera",33554432,38,[-423],[1,0,0,1000]],[89,0,1073741824,320,2000,6,41943040,97,[4,4278190080]],[120,69,[18],[4]],[20,2,28,[4,4292269782],28],[38,1,0,70,[4,16214561]],[114,300,0,45,101],[39,0,46],[20,2,30,[4,4292269782],30],[20,2,32,[4,4292269782],32],[20,2,33,[4,4292269782],33],[20,2,6,[4,4292269782],6],[20,2,23,[4,4292269782],23],[38,1,0,75,[4,4294404641]],[39,0,48],[12,"Video Caption",8388608,43,[[121,-424,94]]]],0,[0,19,100,0,20,107,0,21,108,0,22,105,0,23,106,0,24,102,0,25,104,0,26,94,0,0,1,0,0,1,0,0,1,0,-1,44,0,-2,28,0,-3,45,0,-4,29,0,-5,71,0,-6,72,0,-7,30,0,-8,31,0,-9,32,0,-10,33,0,-11,34,0,-12,35,0,-13,6,0,-14,23,0,-15,39,0,-16,53,0,-17,54,0,-18,55,0,-19,25,0,-20,56,0,-21,93,0,11,2,0,12,2,0,11,2,0,12,2,0,11,2,0,12,2,0,11,2,0,12,2,0,11,2,0,12,2,0,11,2,0,12,2,0,11,2,0,12,2,0,15,51,0,15,51,0,15,51,0,15,51,0,13,2,0,-1,60,0,-2,61,0,-3,62,0,-4,63,0,-5,64,0,-1,95,0,-2,57,0,-3,62,0,-4,63,0,-5,64,0,-6,5,0,-7,66,0,-9,37,0,-10,38,0,-11,43,0,0,4,0,0,4,0,-1,15,0,-2,16,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,0,5,0,0,5,0,9,5,0,11,66,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,65,0,0,6,0,0,6,0,-3,107,0,0,6,0,0,6,0,0,6,0,-1,73,0,0,7,0,0,7,0,9,7,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,77,0,0,8,0,0,8,0,9,8,0,0,8,0,0,8,0,0,8,0,0,8,0,-1,78,0,0,9,0,0,9,0,9,9,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,79,0,0,10,0,0,10,0,9,10,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,80,0,0,11,0,0,11,0,9,11,0,0,11,0,0,11,0,0,11,0,0,11,0,-1,81,0,0,12,0,0,12,0,9,12,0,0,12,0,0,12,0,0,12,0,0,12,0,-1,82,0,0,13,0,0,13,0,9,13,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,83,0,0,14,0,0,14,0,9,14,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,84,0,0,15,0,0,15,0,9,15,0,0,15,0,0,15,0,0,15,0,0,15,0,-1,85,0,0,16,0,0,16,0,9,16,0,0,16,0,0,16,0,0,16,0,0,16,0,-1,86,0,0,17,0,0,17,0,9,17,0,0,17,0,0,17,0,0,17,0,0,17,0,-1,87,0,0,18,0,0,18,0,9,18,0,0,18,0,0,18,0,0,18,0,0,18,0,-1,88,0,0,19,0,0,19,0,9,19,0,0,19,0,0,19,0,0,19,0,0,19,0,-1,89,0,0,20,0,0,20,0,9,20,0,0,20,0,0,20,0,0,20,0,0,20,0,-1,90,0,0,21,0,0,21,0,9,21,0,0,21,0,0,21,0,0,21,0,0,21,0,-1,91,0,0,22,0,0,22,0,0,22,0,0,22,0,0,22,0,-1,58,0,-2,59,0,0,23,0,0,23,0,-3,108,0,0,23,0,0,23,0,-1,74,0,0,24,0,0,24,0,0,25,0,0,25,0,9,25,0,0,25,0,0,25,0,0,25,0,-1,92,0,0,26,0,0,26,0,0,26,0,0,26,0,0,26,0,-1,60,0,0,27,0,0,27,0,0,27,0,0,27,0,0,27,0,-1,61,0,0,28,0,0,28,0,-3,100,0,0,28,0,0,28,0,0,29,0,0,29,0,16,103,0,0,29,0,0,29,0,0,29,0,-1,46,0,0,30,0,0,30,0,-3,104,0,0,30,0,0,30,0,0,31,0,0,31,0,9,31,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,-3,105,0,0,32,0,0,32,0,0,33,0,0,33,0,-3,106,0,0,33,0,0,33,0,0,34,0,0,34,0,9,34,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,9,35,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,16,110,0,0,36,0,0,36,0,0,36,0,-1,48,0,0,37,0,0,37,0,27,96,0,0,37,0,-1,67,0,-2,68,0,0,38,0,28,98,0,0,38,0,0,38,0,-1,97,0,-2,42,0,0,39,0,0,39,0,-1,47,0,-3,76,0,0,40,0,0,40,0,0,42,0,0,42,0,0,42,0,0,42,0,-1,94,0,-1,69,0,-3,111,0,0,44,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,-3,102,0,-1,70,0,0,46,0,-2,103,0,9,46,0,0,46,0,0,47,0,0,47,0,29,109,0,0,47,0,-1,75,0,0,48,0,-2,110,0,9,48,0,0,48,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,54,0,0,54,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,58,0,0,58,0,0,59,0,0,59,0,13,60,0,13,61,0,13,62,0,13,63,0,13,64,0,0,65,0,0,65,0,0,66,0,0,67,0,0,67,0,0,68,0,-2,96,0,-1,99,0,0,70,0,-2,101,0,0,71,0,0,71,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,0,75,0,-2,109,0,0,76,0,0,76,0,0,77,0,0,77,0,0,78,0,0,78,0,0,79,0,0,79,0,0,80,0,0,80,0,0,81,0,0,81,0,0,82,0,0,82,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,95,0,-1,98,0,0,111,0,30,3,1,10,43,2,10,3,4,10,55,7,10,24,8,10,24,9,10,24,10,10,24,11,10,24,12,10,40,13,10,40,14,10,40,22,10,41,24,10,53,26,10,41,27,10,41,36,10,39,40,10,54,41,10,57,52,10,69,94,31,99,424],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,99,100,100,100,100,101,103,103,104,104,104,104,105,105,105,105,106,106,106,106,107,107,107,107,108,108,108,108,109,110,110,94],[14,3,14,-1,14,14,14,1,1,2,4,6,7,8,3,14,1,2,-1,1,2,3,1,2,3,1,2,4,1,2,3,1,1,1,2,3,1,2,4,6,7,8,3,1,2,3,1,2,3,1,2,4,6,7,8,3,1,2,4,6,7,8,3,1,1,2,3,1,1,2,3,1,2,4,1,2,3,1,1,2,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,2,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,2,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,1,2,4,6,7,8,3,1,2,1,1,2,4,6,7,8,3,1,32,33,1,2,34,4,6,7,8,2,1,2,4,6,7,8,4,6,7,8,4,6,7,8,4,6,7,8,4,6,7,8,2,1,2,35],[47,3,48,49,50,51,52,0,0,9,9,9,53,54,3,55,0,56,57,0,58,3,0,13,3,0,14,5,0,15,3,0,0,0,4,3,0,6,6,6,4,6,3,0,10,3,0,11,3,0,7,7,59,8,7,3,0,8,8,60,7,8,3,0,0,1,3,0,0,1,3,0,14,5,0,15,3,0,0,61,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,62,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,16,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,0,1,1,2,2,1,3,0,16,0,0,12,12,63,64,12,3,0,17,17,0,65,66,13,18,18,67,19,0,5,4,68,4,4,10,20,20,10,11,21,21,11,1,2,2,1,1,2,2,1,19,0,5,69]],[[{"name":"xr_icon_videoplayer_playspeed_background","rect":{"x":0,"y":0,"width":236,"height":344},"offset":{"x":0,"y":0},"originalSize":{"width":236,"height":344},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-118,-172,0,118,-172,0,-118,172,0,118,172,0],"indexes":[0,1,2,2,1,3],"uv":[0,344,236,344,0,0,236,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-118,"y":-172,"z":0},"maxPos":{"x":118,"y":172,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[70]],[[{"name":"xr_icon_videoplayer_exit_hover","rect":{"x":0,"y":0,"width":272,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-136,-32,0,136,-32,0,-136,32,0,136,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,272,64,0,0,272,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-136,"y":-32,"z":0},"maxPos":{"x":136,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[71]],[[[122,"../xr/res/default_effects/xr-videoplayer-builtin-unlit",[{"hash":2561531515,"name":"../xr/res/default_effects/xr-videoplayer-builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"leftEyeIndex","type":13,"count":1},{"name":"rightEyeIndex","type":13,"count":1},{"name":"videoShape","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":16,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"leftEyeIndex","type":13,"count":1},{"name":"rightEyeIndex","type":13,"count":1},{"name":"videoShape","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n  float leftEyeIndex;\n  float rightEyeIndex;\n  float videoShape;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  vec2 newUV = vec2(v_uv.x, v_uv.y);\n  if(videoShape == 3.0 || videoShape == 5.0) {\n    if(leftEyeIndex >= rightEyeIndex) {\n      newUV.x = newUV.x * 0.5;\n    }\n    if(leftEyeIndex < rightEyeIndex) {\n      newUV.x = newUV.x * 0.5 + 0.5;\n    }\n  } else if(videoShape == 4.0 || videoShape == 6.0) {\n    if(leftEyeIndex >= rightEyeIndex) {\n      newUV.y = newUV.y * 0.5 + 0.5;\n    }\n    if(leftEyeIndex < rightEyeIndex) {\n      newUV.y = newUV.y * 0.5;\n    }\n  }\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, newUV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  #if CC_USE_RGBE_OUTPUT\n    o = packRGBE(o.rgb);\n  #endif\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nuniform mediump vec4 cc_debug_view_mode;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n   uniform float leftEyeIndex;\n   uniform float rightEyeIndex;\n   uniform float videoShape;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  vec2 newUV = vec2(v_uv.x, v_uv.y);\n  if(videoShape == 3.0 || videoShape == 5.0) {\n    if(leftEyeIndex >= rightEyeIndex) {\n      newUV.x = newUV.x * 0.5;\n    }\n    if(leftEyeIndex < rightEyeIndex) {\n      newUV.x = newUV.x * 0.5 + 0.5;\n    }\n  } else if(videoShape == 4.0 || videoShape == 6.0) {\n    if(leftEyeIndex >= rightEyeIndex) {\n      newUV.y = newUV.y * 0.5 + 0.5;\n    }\n    if(leftEyeIndex < rightEyeIndex) {\n      newUV.y = newUV.y * 0.5;\n    }\n  }\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, newUV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  #if CC_USE_RGBE_OUTPUT\n    o = packRGBE(o.rgb);\n  #endif\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":47}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"},{"name":"CC_USE_FLOAT_OUTPUT","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_TONE_MAPPING_TYPE","type":"number","range":[0,3]},{"name":"HDR_TONE_MAPPING_ACES","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"../xr/res/default_effects/xr-videoplayer-builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"leftEyeIndex":{"type":13,"value":[0]},"rightEyeIndex":{"type":13,"value":[0]},"videoShape":{"type":13,"value":[0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"program":"../xr/res/default_effects/xr-videoplayer-builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"leftEyeIndex":{"value":0,"editor":{"visible":true}},"rightEyeIndex":{"value":0,"editor":{"visible":true}},"videoShape":{"value":0,"editor":{"visible":true}},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"leftEyeIndex":{"type":13,"value":[0]},"rightEyeIndex":{"type":13,"value":[0]},"videoShape":{"type":13,"value":[0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"xr_icon_videoplayer_playback_normal","rect":{"x":7,"y":16,"width":41,"height":28},"offset":{"x":-2.5,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-20.5,-14,0,20.5,-14,0,-20.5,14,0,20.5,14,0],"indexes":[0,1,2,2,1,3],"uv":[7,44,48,44,7,16,48,16],"nuv":[0.11666666666666667,0.26666666666666666,0.8,0.26666666666666666,0.11666666666666667,0.7333333333333333,0.8,0.7333333333333333],"minPos":{"x":-20.5,"y":-14,"z":0},"maxPos":{"x":20.5,"y":14,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[72]],[[{"name":"xr_icon_videoplayer_exit_normal","rect":{"x":0,"y":0,"width":272,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-136,-32,0,136,-32,0,-136,32,0,136,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,272,64,0,0,272,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-136,"y":-32,"z":0},"maxPos":{"x":136,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[73]]]]
