[1,["faI1Qj4vVJG4ly7A6YIl9b","e3+chOu/ZGHaj1Gj2tfKWj@896f4","b3B5XwX1xPaqdnnJXxMH3n@6c48a","baIUdvKGZPgZxNbjWTFuRI","95EkngnxZFbYuFpsqVTaFr@f9941","e3+chOu/ZGHaj1Gj2tfKWj@e5852","e3+chOu/ZGHaj1Gj2tfKWj@dbd72","e3+chOu/ZGHaj1Gj2tfKWj@1db17","aa3gnuj51BPKnojGhupeFg@73b7f","b6mOVasAtJh6i0r4PN3Fn3","aa3gnuj51BPKnojGhupeFg@ef5e1","aa3gnuj51BPKnojGhupeFg@438fe","20g1ukYUVPvKWKBRznAKo+@f9941","f1KiPEuSRDIqJgPZgkKPHo@f9941","7b+d9AS8lOJYywmlAPlJEC","54TknWPwVPqJqeCR+Y/Czo@f9941","45go8ltQ1MUqWR4ZSRpiuM@f9941","a3zQCfCrBCDZJ4uf2rk5u8","1brw/JvvpFnIvdrxpFCgMZ","a7YStUNeNCOKGpSntUY1g5","8aWN3s9DdAuY7AH8h96X+1","b0TtmesfFCGLJ4Ebjh3S1c","5a8gG1WVFOLKgfrEqtkTLL@b47c0","e3+chOu/ZGHaj1Gj2tfKWj@e95dd","e3+chOu/ZGHaj1Gj2tfKWj@d3b5d","e3+chOu/ZGHaj1Gj2tfKWj@99d82","e3+chOu/ZGHaj1Gj2tfKWj@6c1a2","e3+chOu/ZGHaj1Gj2tfKWj@963e4","e3+chOu/ZGHaj1Gj2tfKWj@39774","e3+chOu/ZGHaj1Gj2tfKWj@bdd2f","bdG8q6vX1KcbFDmXyII4Pk@f9941","11vcSwZKhOt6Knn7niM+l3@f9941","63OpDIkDFDAL01KHDnirYA@6c48a","e3VTytLxVCk4Waj0PHgPKJ@73b7f","1fC+T44LpBTZiuNZlxSoH1","4e11YahjpB7JY7A2SdqSr6","ccw6dVfT1DBKo7ykeS152f","cfxTxOeVZIK668P7Hc027v","5eTUjEDjRFr6JoiUhRl+i8","06dWl2b7RBeKSxHS0G+pk2","76zMsg7kRLlZp9Z+bKUzy3","28dl4vBApMZY6M+dC7edhj@f9941","4eEFhoXK1IGb/3kLDuSu8F","574Wax9SFJcJdqthfARz3W","d3x4IMKphEKYvHuEU7yaxB","12Y9dMgWdJKJGmTiZyQR9H@a804a","e3+chOu/ZGHaj1Gj2tfKWj@8e645","e3+chOu/ZGHaj1Gj2tfKWj@ed8d8","e3+chOu/ZGHaj1Gj2tfKWj@6fc09","e3+chOu/ZGHaj1Gj2tfKWj@a5c44","e3+chOu/ZGHaj1Gj2tfKWj@11706","e3+chOu/ZGHaj1Gj2tfKWj@c234f","e3+chOu/ZGHaj1Gj2tfKWj@805e8","e3+chOu/ZGHaj1Gj2tfKWj@78a41","e3+chOu/ZGHaj1Gj2tfKWj@cd071","e3+chOu/ZGHaj1Gj2tfKWj@cfabe","e3+chOu/ZGHaj1Gj2tfKWj@1c4f9","e3+chOu/ZGHaj1Gj2tfKWj@786a5","e3+chOu/ZGHaj1Gj2tfKWj@4438d","e3+chOu/ZGHaj1Gj2tfKWj@3a434","e3+chOu/ZGHaj1Gj2tfKWj@fea4c","e3+chOu/ZGHaj1Gj2tfKWj@55ce9","e3+chOu/ZGHaj1Gj2tfKWj@37564","e3+chOu/ZGHaj1Gj2tfKWj@56220","e3+chOu/ZGHaj1Gj2tfKWj@235c3","e3+chOu/ZGHaj1Gj2tfKWj@c3dee","e3+chOu/ZGHaj1Gj2tfKWj@cf338","e3+chOu/ZGHaj1Gj2tfKWj@43697","e3+chOu/ZGHaj1Gj2tfKWj@b3398","e3+chOu/ZGHaj1Gj2tfKWj@3bf28","e3+chOu/ZGHaj1Gj2tfKWj@b607c","e3+chOu/ZGHaj1Gj2tfKWj@53a48","e3+chOu/ZGHaj1Gj2tfKWj@f00c5","e3+chOu/ZGHaj1Gj2tfKWj@ecd7f","e3+chOu/ZGHaj1Gj2tfKWj@80bf1","e3+chOu/ZGHaj1Gj2tfKWj@0c5d5","e3+chOu/ZGHaj1Gj2tfKWj@55d2b","e3+chOu/ZGHaj1Gj2tfKWj@e7671","e3+chOu/ZGHaj1Gj2tfKWj@d8473","e3+chOu/ZGHaj1Gj2tfKWj@b4fac","e3+chOu/ZGHaj1Gj2tfKWj@a3c00","e3+chOu/ZGHaj1Gj2tfKWj@333fe","e3+chOu/ZGHaj1Gj2tfKWj@cad1b","e3+chOu/ZGHaj1Gj2tfKWj@dfe32","e3+chOu/ZGHaj1Gj2tfKWj@e8ed1","e3+chOu/ZGHaj1Gj2tfKWj@c10f3","e3+chOu/ZGHaj1Gj2tfKWj@d50c7","e3+chOu/ZGHaj1Gj2tfKWj@bfaeb","e3+chOu/ZGHaj1Gj2tfKWj@1f437","e3+chOu/ZGHaj1Gj2tfKWj@46a0f","e3+chOu/ZGHaj1Gj2tfKWj@ad0cf","e3+chOu/ZGHaj1Gj2tfKWj@9883f","e3+chOu/ZGHaj1Gj2tfKWj@effe5","e3+chOu/ZGHaj1Gj2tfKWj@8b244","e3+chOu/ZGHaj1Gj2tfKWj@e18fe","e3+chOu/ZGHaj1Gj2tfKWj@64503","e3+chOu/ZGHaj1Gj2tfKWj@643ee","e3+chOu/ZGHaj1Gj2tfKWj@15c73","e3+chOu/ZGHaj1Gj2tfKWj@1a38b","e3+chOu/ZGHaj1Gj2tfKWj@fbe43","e3+chOu/ZGHaj1Gj2tfKWj@63b1b","e3+chOu/ZGHaj1Gj2tfKWj@f5b8d","e3+chOu/ZGHaj1Gj2tfKWj@ddb23","e3+chOu/ZGHaj1Gj2tfKWj@2766a","e3+chOu/ZGHaj1Gj2tfKWj@27b01","e3+chOu/ZGHaj1Gj2tfKWj@35616","e3+chOu/ZGHaj1Gj2tfKWj@0a8f6","e3+chOu/ZGHaj1Gj2tfKWj@cda20","e3+chOu/ZGHaj1Gj2tfKWj@e61a0","e3+chOu/ZGHaj1Gj2tfKWj@51fc3","e3+chOu/ZGHaj1Gj2tfKWj@1df15","e3+chOu/ZGHaj1Gj2tfKWj@f0a95","e3+chOu/ZGHaj1Gj2tfKWj@a7ff0","e3+chOu/ZGHaj1Gj2tfKWj@0ac97","e3+chOu/ZGHaj1Gj2tfKWj@499aa","e3+chOu/ZGHaj1Gj2tfKWj@95579","e3+chOu/ZGHaj1Gj2tfKWj@5dd95","e3+chOu/ZGHaj1Gj2tfKWj@c9ec5","e3+chOu/ZGHaj1Gj2tfKWj@91ae2","e3+chOu/ZGHaj1Gj2tfKWj@adea0","e3+chOu/ZGHaj1Gj2tfKWj@74933","e3+chOu/ZGHaj1Gj2tfKWj@e9132","e3+chOu/ZGHaj1Gj2tfKWj@52b93","e3+chOu/ZGHaj1Gj2tfKWj@513e9","e3+chOu/ZGHaj1Gj2tfKWj@3dcbe","e3+chOu/ZGHaj1Gj2tfKWj@7ecf5","e3+chOu/ZGHaj1Gj2tfKWj@f1412","e3+chOu/ZGHaj1Gj2tfKWj@d68c1","e3+chOu/ZGHaj1Gj2tfKWj@f53ce","e3+chOu/ZGHaj1Gj2tfKWj@4c102","e3+chOu/ZGHaj1Gj2tfKWj@bc022","e3+chOu/ZGHaj1Gj2tfKWj@940b8","e3+chOu/ZGHaj1Gj2tfKWj@94e36","e3+chOu/ZGHaj1Gj2tfKWj@b2e08","e3+chOu/ZGHaj1Gj2tfKWj@6d823","e3+chOu/ZGHaj1Gj2tfKWj@3dc17","e3+chOu/ZGHaj1Gj2tfKWj@49a26","e3+chOu/ZGHaj1Gj2tfKWj@d07de","e3+chOu/ZGHaj1Gj2tfKWj@de3c3","e3+chOu/ZGHaj1Gj2tfKWj@63063","e3+chOu/ZGHaj1Gj2tfKWj@7a0f5","e3+chOu/ZGHaj1Gj2tfKWj@e603f","e3+chOu/ZGHaj1Gj2tfKWj@35deb","e3+chOu/ZGHaj1Gj2tfKWj@7724d","e3+chOu/ZGHaj1Gj2tfKWj@9db6b","e3+chOu/ZGHaj1Gj2tfKWj@ebbeb","11vcSwZKhOt6Knn7niM+l3@6c48a","15jn5SMiBM15aUcT4OboJ4@6c48a","c9LxYj1oxGQYxmNUFpHpAX@009dc","20g1ukYUVPvKWKBRznAKo+@6c48a","28dl4vBApMZY6M+dC7edhj@6c48a","45go8ltQ1MUqWR4ZSRpiuM@6c48a","15jn5SMiBM15aUcT4OboJ4@f9941","6fu9yL19pMNay7VNqVYE3Y@64063","54TknWPwVPqJqeCR+Y/Czo@6c48a","6fu9yL19pMNay7VNqVYE3Y@2deab","6fu9yL19pMNay7VNqVYE3Y@a62fe","0asxQqaWhAc5WvAmvDsjYj@2df3a","c5CD51rS5OqYsz3udImVsA@6c48a","6fiRp7WghI5phB3bNkrIax@6c48a","955bAq4zhCPL27F0htsdnr@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","07GNmWOb9KtLtjSWZm/vRn@6c48a","e3j4GvcOxPerN3dnsOx2N3","aeGN7qxuBKPb9w7lUz+bqH@6c48a","bdG8q6vX1KcbFDmXyII4Pk@6c48a","c9LxYj1oxGQYxmNUFpHpAX@614aa","c9LxYj1oxGQYxmNUFpHpAX@a62fe","700zdYHB5CTbCr6sdBBVm/","0asxQqaWhAc5WvAmvDsjYj@2b0a8","a1Vfk7d2lMpLdfsT5SGThZ","0asxQqaWhAc5WvAmvDsjYj@4a7d8","0asxQqaWhAc5WvAmvDsjYj@0e750","0asxQqaWhAc5WvAmvDsjYj@ef86b","0asxQqaWhAc5WvAmvDsjYj@426f2","0asxQqaWhAc5WvAmvDsjYj@754a2","0asxQqaWhAc5WvAmvDsjYj@71919","0asxQqaWhAc5WvAmvDsjYj@1332c","0asxQqaWhAc5WvAmvDsjYj@4d16f","0asxQqaWhAc5WvAmvDsjYj@efe84","e3VTytLxVCk4Waj0PHgPKJ@18751","e3VTytLxVCk4Waj0PHgPKJ@30732","e3VTytLxVCk4Waj0PHgPKJ@da6f3","e3VTytLxVCk4Waj0PHgPKJ@f1394","e3VTytLxVCk4Waj0PHgPKJ@4b929","e3VTytLxVCk4Waj0PHgPKJ@75ee4","8eBHF49hxDIqL20a2yi2ri","e3VTytLxVCk4Waj0PHgPKJ@39f7b","e3VTytLxVCk4Waj0PHgPKJ@a72ab","f1KiPEuSRDIqJgPZgkKPHo@6c48a","609xlc7CpF67qUiVX2DoHQ"],["node","_customMaterial","_spriteFrame","_textureSource","_parent","_material","_normalSprite","_target","_hoverSprite","_pressedSprite","_disabledSprite","_mesh","root","_skeleton","_defaultClip","asset","data","_effectAsset","mainTexture","target","_checkMark","_inputDevice","_checker","_offsetObject","_handle","_cameraComponent","_camera","scene","_envmapHDR","_envmapLDR","_placeholderLabel","_textLabel","_xrKeyboard","_suspendTransform","_backgroundImage"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_active","_objFlags","__editorExtras__","_parent","_components","_prefab","_children","_lpos","_lscale","_euler","_lrot"],-3,1,9,4,2,5,5,5,5],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","_name","node","_spriteFrame","__prefab","_customMaterial"],-1,1,6,4,6],["cc.Node",["_name","_layer","_active","_components","_parent","_prefab","_lpos","_children","_lrot","_lscale","_euler"],0,12,1,4,5,2,5,5,5],"cc.ImageAsset",["cc.UITransform",["_name","node","_contentSize","__prefab","_anchorPoint"],2,1,5,4,5],["cc.Label",["_string","_fontSize","_actualFontSize","_enableWrapText","_overflow","_horizontalAlign","_lineHeight","node","_customMaterial","__prefab","_color"],-4,1,6,4,5],["cc.Button",["_transition","node","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","clickEvents","__prefab"],2,1,5,1,6,6,6,6,9,4],["cc.BoxCollider",["_material","node","_size","__prefab"],3,6,1,5,4],["cc.Node",["_name","_id","_parent","_components","_lpos","_children","_prefab","_lrot","_euler"],1,1,2,5,9,4,5,5],["cc.MeshRenderer",["_name","_shadowCastingMode","node","_materials","bakeSettings","_mesh","__prefab"],1,1,3,4,6,4],["cc.Camera",["_clearFlags","_visibility","_near","_cameraType","_name","_trackingType","_projection","_priority","_orthoHeight","_far","node","_color"],-7,1,5],["cc.Toggle",["_isChecked","node","__prefab","_checkMark","_normalSprite","_normalColor","_target"],2,1,4,1,6,5,1],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["fileId","instance","nestedPrefabInstanceRoots","targetOverrides","root","asset"],-1,1,1],["aaeefWAZ5BFQrbuxj/FZCHP",["node","__prefab"],3,1,4],["cc.RenderRoot2D",["node","__prefab"],3,1,4],["cc.CurveRange",["mode","constant","spline"],1,4],["42802Gifv1E5aGtEbsdZBRs",["_trackingSource","node"],2,1],["8909cpyL+hIQrKUBvDwkdo8",["_targetEye","node"],2,1],["cc.Widget",["_alignFlags","_left","_right","_top","_bottom","_originalWidth","_originalHeight","node"],-4,1],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents"],1,9,9],["1e92bOQQApPabAbOLV6ZwkG",["_inputDevice","node"],2,1],["cc.Prefab",["_name"],2],["10086NyavFKjI7lLnSFQSoj",["_key","node","__prefab"],2,1,4],["cc.SkeletalAnimation",["playOnLoad","_name","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","bakeSettings","_skinningRoot","_mesh","_skeleton"],2,1,4,3,4,1,6,6],["cc.Material",["_states","_defines","_name","_props"],0,12],["cc.Material",["_name","_props","_defines","_states"],-1],"cc.TextureCube","cc.SpriteAtlas",["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","instance","targetOverrides","root","asset","nestedPrefabInstanceRoots"],0,1,1,2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","lightProbeInfo"],3,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_enabled","_type","_distance","_shadowColor","_size"],0,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.LightProbeInfo",[],3],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_euler"],2,1,12,4,5,5,5],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.ModelBakeSettings",[],3],["cc.RigidBody",["node"],3,1],["6240bEd8vRPJZo0UNedTuIv",["_attachEaseInTime","_throwVelocityScale","node","_throwSmoothingCurve"],1,1,4],["cc.RealCurve",["_times","_values"],2,9],["cc.RealKeyframeValue",["interpolationMode","value"],1],["d8cb8VQh+9Ae4EaDCs5iYYW",["node","hoverEnterEvents","hoverExitEvents","selectExitEvents"],3,1,9,9,9],["16ecfkJwMlJPbwfl0/Ap/MK",["node"],3,1],["2bae89OKg1Ht5AEap6sVgok",["node","_offsetObject"],3,1,1],["3247cdNys9H94Rl+xbkhen4",["node"],3,1],["ca141x9P8hLmqHc3HtVYnDx",["node","_configuration"],3,1,4],["cc.ARConfiguration",["_cameraFeature","_lightingFeature","_anchorFeature","_planeFeature","_meshingFeature","_imageFeature","_faceFeature"],3,4,4,4,4,4,4,4],["cc.ARFeatureCamera",["_enable"],2],["cc.ARFeatureLighting",["_enable"],2],["cc.ARFeatureAnchor",["_enable"],2],["cc.ARFeaturePlane",["_enable"],2],["cc.ARFeatureWorldMesh",["_enable"],2],["cc.ARFeatureImage",["_enable"],2],["cc.ARFeatureFace",["_enable"],2],["81a68d1y95GsKT1zcnEtncc",["_defaultSessionMode","node"],2,1],["42e56uX4t5HspepxO/kP3MN",["_turnAngle","_enableTurnAround","_activationTimeout","_turnSpeed","node","_checker","_inputDevice"],-1,1,1,1],["b0a1fF4UZtCRpPJNmMeRz8M",["node","_checker","_inputDevice"],3,1,1,1],["cc.AudioSource",["node"],3,1],["4b5ca+hvnRKvqbmOcVO9MjU",["node"],3,1],["cc.Slider",["node","slideEvents","_handle"],3,1,9,1],["78601ayuslIQr9sP4c1t054",["_startingSelectedInteractable","node"],2,1],["cc.Line",["node","_materials","_positions","_width","_color"],3,1,3,12,4,4],["cc.GradientRange",["color"],3,5],["94f4b3Y9BtBuYwZ00W4c5re",["node","audioEvents","hapticEvents","interactorEvents"],3,1,4,4,4],["cc.AudioEvents",[],3],["cc.HapticEvents",[],3],["cc.SubInteractorEvents",[],3],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.TargetInfo",["localID"],2],["99df7cU/T1E4LPfpQDQJC77",["node"],3,1],["419e7jnuRNLjaY0M8wgAL66",["node","_camera"],3,1,1],["83889gnaktLWJmx+MfBQBca",["node","xrSessionNode","vrButton","inlineButton"],3,1,1,1,1],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],2,1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["78ea74Y7fxHarp29Xrvq8DV",["_xrAgent"],3,1],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","_shadowEnabled","_shadowPcf","_shadowBias","_shadowSaturation","_shadowDistance","_csmLevel","_shadowFar","_shadowOrthoSize","node","_staticSettings"],-7,1,4],["cc.StaticLightSettings",[],3],["ba57cejGr1Lm4SWg4cM+CoW",["node"],3,1],["cc.CompPrefabInfo",["fileId"],2],["cc.EditBox",["_inputMode","node","__prefab","_textLabel","_placeholderLabel","_backgroundImage"],2,1,4,1,1,6],["97d70qCGBBBU4k5AUqwd5Gb",["node","__prefab","_suspendTransform","_xrKeyboard"],3,1,4,1,1],["90b69PCbDdEnZ1RRl0FofqB",["node","__prefab","_switch_latin","_switch_symbol"],3,1,4,1,1],["c8a3cbMNIpJXqqZ+mEorEqQ",["node","__prefab"],3,1,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.ToggleContainer",["node","__prefab"],3,1,4],["cc.RichText",["node","__prefab"],3,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12]],[[91,0,2],[14,0,1,3,2,4,5,5],[5,1,3,2,1],[15,0,1,1],[8,1,3,2,0,1],[2,1,0,4,6,7,5,3],[7,0,1,9,2,3,4,5,6,7,2],[24,0,1,2,2],[1,0,6,7,8,2],[2,0,4,6,7,5,2],[2,4,6,7,5,1],[44,1],[76,0,2],[5,1,3,1],[1,0,6,9,7,8,10,2],[1,0,9,7,8,2],[1,0,3,9,7,8,3],[94,0,1,2,3,1],[9,0,2,5,6,4,7,8,2],[1,0,6,8,10,13,12,2],[1,0,3,6,7,8,3],[82,0,1,2,2],[83,0,1,2,2],[1,0,6,9,8,10,13,11,12,2],[1,0,6,7,8,10,2],[96,0,1,2,3],[1,0,9,7,8,10,2],[1,0,6,9,8,2],[1,0,6,7,8,13,11,12,2],[26,1,2,3,4,5,6,7,1],[85,0,1,2,3],[1,0,6,9,8,10,13,12,2],[1,4,5,6,8,3],[1,0,6,9,7,8,10,13,11,12,2],[81,0,1,2,3],[13,0,1,2,3,4,5,4],[5,1,2,1],[25,1,0,2,3,4,5,3],[1,0,6,7,8,10,13,11,12,2],[23,0,2],[10,1,2,6,3,4,5,2],[21,0,1,2,3],[1,0,6,9,7,8,2],[1,0,9,8,2],[43,0,1,2,3],[27,2,0,1,3,4],[16,0,1,1],[100,0,1,2,3,4],[10,2,6,3,4,5,1],[1,0,4,1,6,7,4],[1,0,1,9,7,8,11,3],[3,0,7,3,2],[5,1,3,2,4,1],[2,1,0,4,7,5,3],[2,0,2,4,6,7,5,3],[15,0,1],[8,1,2,0,1],[16,0,1],[25,0,2,3,4,5,2],[34,0,1,2,3,4,5,4],[1,0,2,6,7,3],[1,0,3,6,7,3],[1,0,1,6,9,7,8,10,3],[1,0,6,8,10,2],[3,0,1,4,3,5,3],[3,0,2,1,4,3,5,4],[5,1,1],[5,0,1,3,2,2],[2,1,4,6,7,5,2],[2,0,4,6,2],[2,3,0,4,6,3],[7,0,1,8,2,3,4,5,6,7,2],[17,1,2],[48,0,1,3],[18,0,1,2],[19,0,1,2],[68,0,1,2],[69,0,1,2,3,4,1],[70,0,1],[71,0,1,2,3,1],[72,1],[73,1],[74,1],[6,0,2,1,4,3,7,10,8,6],[11,4,2,0,1,3,10,11,6],[80,0,1,2,2],[23,1],[12,0,1,2,5,6,3,4,2],[27,0,1,3,3],[28,0,1,3,2,5],[99,0,1,2,4],[31,0,2],[32,0,1,2,3,2],[33,0,1,2,3,4,5,6],[13,0,2,1,3,4,5,4],[14,0,1,2,3,4,5,5],[35,0,1,2,3,4,5,1],[36,0,1,2,2],[37,0,1,2,3,4,4],[38,0,1,2,2],[39,0,1],[40,1],[41,1],[1,0,3,1,9,7,10,11,4],[1,0,2,6,7,10,11,3],[1,0,2,6,9,7,10,13,12,3],[1,0,1,2,6,9,7,4],[1,0,1,6,9,7,10,11,3],[1,0,1,9,7,3],[1,0,1,9,7,10,11,3],[1,0,1,2,6,9,7,10,4],[1,0,6,9,10,2],[1,0,1,6,7,10,3],[1,0,3,2,6,9,7,10,13,12,4],[1,0,2,6,7,10,13,12,3],[1,0,7,8,10,2],[1,0,6,9,7,8,11,2],[1,0,6,8,2],[1,0,1,6,9,7,8,3],[1,0,6,9,7,8,10,11,2],[1,0,1,7,8,11,3],[1,0,6,7,8,10,11,12,2],[1,0,9,8,10,13,12,2],[1,0,9,8,10,2],[1,0,6,9,8,13,12,2],[1,0,6,8,10,13,11,12,2],[1,0,6,9,8,10,2],[3,0,1,4,3,6,3],[3,0,2,4,7,3,5,6,8,9,10,3],[3,0,2,1,4,3,5,6,4],[3,0,1,4,3,5,6,3],[9,0,1,2,3,3],[9,0,2,3,4,2],[42,0,1,2,3,4,5,6,2],[2,1,0,4,5,3],[2,0,4,2],[7,0,1,2,3,4,5,6,7,2],[7,1,2,3,4,1],[8,1,0,1],[8,2,0,1],[10,0,2,3,4,5,2],[45,0,1],[46,0,1,2,3,3],[17,0,2,2],[47,0,1,2],[49,0,1,2,3,1],[50,0,1],[51,0,1,1],[52,0,1],[53,0,1,1],[54,0,1,2,3,4,5,6,1],[55,0,2],[56,0,2],[57,0,2],[58,0,2],[59,0,2],[60,0,2],[61,0,2],[62,0,1,2],[63,0,1,2,3,4,5,6,5],[64,0,1,2,1],[65,0,1],[66,0,1],[18,1,1],[19,1,1],[67,0,1,2,1],[20,0,1,2,3,4,5,6,7,8],[20,0,7,2],[75,0,1,1],[6,0,2,1,7,8,4],[6,0,2,1,4,3,7,10,6],[6,0,5,2,1,6,3,7,9,8,7],[6,0,5,1,4,3,7,9,6],[6,0,5,2,1,4,3,7,9,7],[77,0,1],[78,0,1,1],[79,0,1,2,3,1],[11,2,0,1,3,5,10,6],[11,6,7,8,9,0,1,10,11,7],[21,0,1,3,2,3],[84,0,1,2,2],[86,0,1],[87,0,1,1],[88,0,1,2,3,4,5,6,7,8,9,10,11,11],[89,1],[22,1,1],[22,0,1,2],[90,0,1],[92,0,1,2,3,4,5,2],[93,0,1,2,3,1],[24,1,2,1],[95,0,1,1],[12,1,2,3,4,1],[12,1,2,5,6,3,4,1],[97,0,1,1],[26,0,1,2,3,4,5,6,7,2],[28,0,1,2,4],[98,0,1,1]],[[[[91,"webxr-main"],[92,"webxr-main",[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21],[93,null,null,"75c7af57-1684-464b-a5b8-fbe2c2b0a5f3",null,[],[-1,-2,-3,-4,-5,-6,-7,-8,-9]],[96,[97,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[98,true,1,1,[4,1929379840],[0,512,512]],[99,true,41,42],[100,[4,4292993505]],[101],[102]]],[103,"Inline",false,8388608,[-30],[[36,-22,[5,100,40]],[53,1,0,-23,18,19],[71,2,-26,[[44,"83889gnaktLWJmx+MfBQBca","changeSessionMode",-25]],[4,4292269782],-24,25,26,27,28],[55,-27],[56,-28,[1,100,40,0.01],29],[57,-29]],[1,-0.034,11.039,0],[1,0.03,0.03,0.03]],[104,"Cube","0d/2X184ROtrzHx8qM6xXK",1,[[140,"Cube<ModelComponent>",-31,[30],[11],31],[141,-32],[138,-33,32],[142,1,3,-34,[143,1,[144,[0,1],[[73,2,1],[73,2,1]]]]],[145,-38,[[44,"16ecfkJwMlJPbwfl0/Ap/MK","changeScale",-37]],[[44,"16ecfkJwMlJPbwfl0/Ap/MK","reverseScale",-36]],[[44,"16ecfkJwMlJPbwfl0/Ap/MK","reverseScale",-35]]],[146,-39]],[1,0.887,1.66,0],[1,0.3,0.3,0.3]],[105,"XR Agent","037wZ7P7JD/ZK8F4B1swLb",1,[-51],[[147,-41,-40],[148,-42],[149,-43,[150,[151,false],[152,false],[153,false],[154,false],[155,false],[156,false],[157,false]]],[158,2,-44],[159,null,null,null,null,-47,-46,-45],[160,-50,-49,-48]],[1,0.4563737338172984,4.020698998822525,7.83104356477376],[3,-0.07236081996736557,0.03501809641207027,0.002542173940871126,0.9967603433167773],[1,-8.304321541008003,4.024165472580301,9.93923337957349e-17]],[51,"XR HMD",[-57,-58],[[-52,[161,-53],[162,-54],[74,2,-55],[164,-56]],1,4,4,4,4]],[106,"UIRoot",8388608,"aeapOyeUlMx48dO87io81M",1,[-61,-62,-63,-64,-65,2],[[66,-59],[57,-60]]],[107,"Slider",8388608,6,[-73,-74],[[36,-66,[5,300,20]],[53,1,0,-67,12,13],[165,-70,[[44,"99df7cU/T1E4LPfpQDQJC77","changeText",-69]],-68],[55,-71],[56,-72,[1,300,20,0.01],14]],[1,0.516,6.344,0],[1,0.03,0.03,0.03]],[108,"Button",33554432,[-81],[[36,-75,[5,100,40]],[134,1,0,-76,20],[71,2,-79,[[44,"83889gnaktLWJmx+MfBQBca","changeSessionMode",-78]],[4,4292269782],-77,21,22,23,24],[166,12,430,430,300,300,100,40,-80]]],[109,"Button",8388608,[-88],[[36,-82,[5,100,40]],[53,1,0,-83,34,35],[136,2,-85,[4,4292269782],-84,36,37,38,39],[55,-86],[56,-87,[1,100,40,0.01],40]],[1,-0.353,4.1,-7.159],[1,0.03,0.03,0.03]],[51,"Controller Left",[-94],[[[163,-89],-90,[76,null,-91],[77,-92,[1],[[[1,0,0,0],[1,0,0,-30]],8,8],[72,0.004],[78,[4,4278190335]]],[79,-93,[80],[81],[82]]],4,1,4,4,4]],[51,"Controller Right",[-100],[[[74,4,-95],-96,[76,null,-97],[77,-98,[3],[[[1,0,0,0],[1,0,0,-30]],8,8],[72,0.004],[78,[4,4278190335]]],[79,-99,[80],[81],[82]]],4,1,4,4,4]],[110,"Canvas",33554432,"66QGWbpj1D9pSHj7ZJyp3e",1,[-105,8],[[36,-101,[5,960,640]],[168,-103,-102],[167,45,-104]],[1,480,320,0]],[111,"TrackingSpace",4,[5,10,11],[1,0,1.36144,0]],[12,["c46/YsCPVOJYA4mWEpNYRx"]],[127,"Handle",8388608,7,[[[36,-106,[5,32,32]],-107,[137,-109,[4,4292269782],-108,10]],4,1,4],[1,-120,0,0]],[112,"Label",8388608,7,[[36,-110,[5,22.25,50.4]],[169,"10",20,20,-111,11],[174,-112]],[1,-188.2,2.567,0]],[12,["c46/YsCPVOJYA4mWEpNYRx"]],[12,["c46/YsCPVOJYA4mWEpNYRx"]],[113,"UI-eye",false,"ba59DmvARAfaGxgfiLgc2r",1,[9],[[66,-113],[57,-114],[175,-116,-115]],[1,0.4563737338172984,4.020698998822525,7.83104356477376],[3,-0.07236081996736557,0.03501809641207027,0.002542173940871126,0.9967603433167773],[1,-8.304321541008003,4.024165472580301,9.93923337957349e-17]],[12,["c46/YsCPVOJYA4mWEpNYRx"]],[12,["c46/YsCPVOJYA4mWEpNYRx"]],[12,["c46/YsCPVOJYA4mWEpNYRx"]],[60,"WebXRModeControl","8eAebetMRB/bRwF9snQvJZ",1,[[176,-117,5,8,2]]],[61,"LeftEye",false,5,[[84,"Camera<CameraComponent>",0.1,14,1822425087,2,-118,[4,4286073907]],[75,1,-119]]],[61,"RightEye",false,5,[[84,"Camera<CameraComponent>",0.1,14,1822425087,2,-120,[4,4286073907]],[75,2,-121]]],[32,0,{},10,[35,"c46/YsCPVOJYA4mWEpNYRx",null,null,-122,[41,"77pE1KzkdB1YkyggGPDHFM",null,[[34,"Controller Left",["_name"],20],[21,["_lpos"],20,[1,0,0,0]],[21,["_lrot"],20,[3,0,0,0,1]],[21,["_euler"],20,[1,0,0,0]]]],0]],[32,0,{},11,[35,"c46/YsCPVOJYA4mWEpNYRx",null,null,-123,[41,"9fH5YsnTBIRoRxaiCE5s3E",null,[[34,"Controller Right",["_name"],21],[21,["_lpos"],21,[1,0,0,0]],[21,["_lrot"],21,[3,0,0,0,1]],[21,["_euler"],21,[1,0,0,0]]]],2]],[181,4],[32,0,null,1,[35,"26LvC5hbxAuJZ9Jl2SB/IV",null,null,-124,[179,"cdNOYl3LRPhapW8a8hi/Iy",null,[[182,[12,["70dgNwYARPfbvgVcNs+gIQ"]],[[139,[1,5,5,0.7],5]]]],[[22,["lightmapSettings"],[12,["ddvMFij+ZIL5lu+/NQX8Nf"]],[11]],[22,["lightmapSettings"],[12,["e3XMjUJKFLH41z39JaWzyB"]],[11]],[180,["position"],[12,["fd517lz3tOuqVWGd5300X6"]],[1,-1.341,0.805,-2.555]],[22,["lightmapSettings"],[12,["a5Viy6l3VLDpf6gY5yZF+v"]],[11]],[30,1,["_shadowCastingMode"],[12,["a5Viy6l3VLDpf6gY5yZF+v"]]],[22,["lightmapSettings"],[12,["e4If/bQrJCsb9D9JopZa2h"]],[11]],[22,["lightmapSettings"],[12,["d7Vkz0NV5Mn4RUce28JVTp"]],[11]],[22,["lightmapSettings"],[12,["3eVATgLQJKDbqOvE33W2uc"]],[11]],[22,["lightmapSettings"],[12,["2akU/MgO5Ovo6QcS0c/I7e"]],[11]],[22,["lightmapSettings"],[12,["54xaKIQbtPLK5r21VY0qmM"]],[11]],[22,["lightmapSettings"],[12,["23UFBqszxJ/6Otof04QwYT"]],[11]],[22,["lightmapSettings"],[12,["c7PE6gNTdDw45ytwlOEWR3"]],[11]]]],4]],[32,0,null,1,[35,"6dMvPN2t1B66O9Zc3HG8dr",null,null,-125,[41,"93xtJEZ71OF5Gk8u497J9k",null,[[22,["lightmapSettings"],[12,["78XZsd31xPjIsSP2888FcN"]],[11]],[22,["lightmapSettings"],[12,["ffoVYmt2NOmIBz5DHpacF8"]],[11]],[22,["lightmapSettings"],[12,["9aCVBuMeZPv6so1VxT6c40"]],[11]],[22,["lightmapSettings"],[12,["ca1srfPsJJgKKJww9GO/JE"]],[11]]]],6]],[32,0,null,1,[35,"e5Peksu5tL9peMeABb8/JC",null,null,-126,[41,"7e4SH9jydKyaQjXZtS5AiQ",null,[[22,["lightmapSettings"],[12,["a6J1jU/r1BPKNIcVMEREit"]],[11]],[30,1,["_shadowReceivingMode"],[12,["a6J1jU/r1BPKNIcVMEREit"]]],[22,["lightmapSettings"],[12,["28WH2cvhNDFbN3it+8Q+XK"]],[11]],[30,1,["_shadowReceivingMode"],[12,["28WH2cvhNDFbN3it+8Q+XK"]]],[22,["lightmapSettings"],[12,["87exLhmM1P35jx6GLN7j5f"]],[11]],[30,1,["_shadowReceivingMode"],[12,["87exLhmM1P35jx6GLN7j5f"]]],[22,["lightmapSettings"],[12,["dduLonFhNK+q908BUlLM7f"]],[11]],[30,1,["_shadowCastingMode"],[12,["dduLonFhNK+q908BUlLM7f"]]],[30,1,["_shadowReceivingMode"],[12,["dduLonFhNK+q908BUlLM7f"]]],[22,["lightmapSettings"],[12,["af0f1GeGlKf5MvKMEuH8MJ"]],[11]],[30,1,["_shadowReceivingMode"],[12,["af0f1GeGlKf5MvKMEuH8MJ"]]],[22,["lightmapSettings"],[12,["e9BPt5G81CloUmA5IJNHIQ"]],[11]],[30,1,["_shadowReceivingMode"],[12,["e9BPt5G81CloUmA5IJNHIQ"]]],[22,["lightmapSettings"],[12,["7dt8ZZ5EBNDIxOgpt1XbGu"]],[11]],[30,1,["_shadowReceivingMode"],[12,["7dt8ZZ5EBNDIxOgpt1XbGu"]]],[22,["lightmapSettings"],[12,["c4Nekl9YtKUKupS0ASX7It"]],[11]],[30,1,["_shadowReceivingMode"],[12,["c4Nekl9YtKUKupS0ASX7It"]]],[22,["lightmapSettings"],[12,["b9cuhcVRxPvZTPHcAyE7eS"]],[11]],[30,1,["_shadowReceivingMode"],[12,["b9cuhcVRxPvZTPHcAyE7eS"]]],[22,["lightmapSettings"],[12,["f3T3OFBBJBYrGbPSQ+k7GJ"]],[11]],[30,1,["_shadowReceivingMode"],[12,["f3T3OFBBJBYrGbPSQ+k7GJ"]]],[22,["lightmapSettings"],[12,["d0A5LfhGhAfrDnBGJ3JzOe"]],[11]],[30,1,["_shadowReceivingMode"],[12,["d0A5LfhGhAfrDnBGJ3JzOe"]]],[22,["lightmapSettings"],[12,["161SEdWiFO/abXxUI8RkYk"]],[11]],[30,1,["_shadowReceivingMode"],[12,["161SEdWiFO/abXxUI8RkYk"]]]]],7]],[32,0,{},6,[94,"c46/YsCPVOJYA4mWEpNYRx",null,[],-127,[41,"67D1bBvytDyawEQ4I8fbL3",null,[[34,"EditBox",["_name"],22],[21,["_lpos"],22,[1,13.202,7.288,1.475]],[21,["_lrot"],22,[3,0,-0.42261826174069944,0,0.9063077870366499]],[21,["_euler"],22,[1,0,-50,0]]]],8]],[32,0,{},6,[35,"c46/YsCPVOJYA4mWEpNYRx",null,null,-128,[41,"7cipvEyeJCLqeGlUxiKTGE",null,[[34,"RichText",["_name"],14],[21,["_lpos"],14,[1,-9.966,8.414,0]],[21,["_lrot"],14,[3,0,0,0,1]],[21,["_euler"],14,[1,0,0,0]],[34,true,["_active"],14]]],9]],[32,0,{},6,[35,"c46/YsCPVOJYA4mWEpNYRx",null,null,-129,[41,"d698q7S5NHtoAC+B9IlbZ1",null,[[34,"Toggle",["_name"],17],[21,["_lpos"],17,[1,-2.535,7.504,0]],[21,["_lrot"],17,[3,0,0,0,1]],[21,["_euler"],17,[1,0,0,0]],[34,true,["_active"],17]]],15]],[32,0,{},6,[35,"c46/YsCPVOJYA4mWEpNYRx",null,null,-130,[41,"46lERseqFBXbtSMdsAmZ6s",null,[[34,"ToggleGroup",["_name"],18],[21,["_lpos"],18,[1,1.751,7.542,0]],[21,["_lrot"],18,[3,0,0,0,1]],[21,["_euler"],18,[1,0,0,0]],[34,true,["_active"],18]]],16]],[49,"Label",512,8388608,2,[[36,-131,[5,100,40]],[83,"Inline",20,20,1,false,-132,[4,4278190080],17]]],[49,"Label",512,33554432,8,[[36,-133,[5,100,40]],[170,"Enter VR",20,20,1,false,-134,[4,4278190080]]]],[49,"Label",512,8388608,9,[[36,-135,[5,100,40]],[83,"follow eye",20,20,1,false,-136,[4,4278190080],33]]],[114,"Main Light","c0y6F5f+pAvI805TdmxIjx",1,[[183,125000,3.2552083333333335,true,2,0.01,0.45098039215686275,10,1,50,10,-137,[184]]],[1,-2.955,3.412,5.118],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[177,0.1,14,1820327937,2,1,5],[185,10],[186,1,11],[131,"Locomotion Checker","bcS0Rho0tEPbgywPFGbiFa",1,[28]],[135,0,15],[132,"Camera",12,[-138],[1,0,0,1000]],[178,0,1073741824,961.081081081081,2000,6,41943040,45,[4,4278190080]],[60,"ChangeScene","46h6adaK5ERbH/c9S2VCZ7",1,[[187,-139]]]],0,[0,-1,26,0,-2,27,0,-3,29,0,-4,30,0,-5,31,0,-6,32,0,-7,33,0,-8,34,0,-9,35,0,-1,39,0,-2,4,0,-3,29,0,-4,30,0,-5,31,0,-6,6,0,-7,3,0,-8,43,0,-9,19,0,-10,47,0,-11,23,0,-12,12,0,0,2,0,0,2,0,7,2,0,19,23,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,36,0,0,3,0,0,3,0,0,3,0,0,3,0,19,3,0,19,3,0,19,3,0,0,3,0,0,3,0,23,13,0,0,4,0,0,4,0,0,4,0,0,4,0,21,42,0,22,28,0,0,4,0,21,41,0,22,28,0,0,4,0,-1,13,0,-1,40,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,24,0,-2,25,0,0,6,0,0,6,0,-1,32,0,-2,33,0,-3,7,0,-4,34,0,-5,35,0,0,7,0,0,7,0,24,44,0,19,16,0,0,7,0,0,7,0,0,7,0,-1,15,0,-2,16,0,0,8,0,0,8,0,7,8,0,19,23,0,0,8,0,0,8,0,-1,37,0,0,9,0,0,9,0,7,9,0,0,9,0,0,9,0,0,9,0,-1,38,0,0,10,0,-2,41,0,0,10,0,0,10,0,0,10,0,-1,26,0,0,11,0,-2,42,0,0,11,0,0,11,0,0,11,0,-1,27,0,0,12,0,25,46,0,0,12,0,0,12,0,-1,45,0,0,15,0,-2,44,0,7,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,19,0,0,19,0,26,40,0,0,19,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,12,26,0,12,27,0,12,29,0,12,30,0,12,31,0,12,32,0,12,33,0,12,34,0,12,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,-1,46,0,0,47,0,27,1,2,4,6,5,4,13,8,4,12,9,4,19,10,4,13,11,4,13,28,0,43,139],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44],[15,-1,15,-1,15,5,15,15,15,15,6,1,1,2,5,15,15,1,1,2,2,6,8,9,10,6,8,9,10,5,-1,11,5,1,1,2,6,8,9,10,5,28,29,1,2],[34,21,35,21,36,3,37,38,39,40,13,0,0,41,3,42,43,0,0,12,12,12,12,15,4,12,12,15,4,3,44,45,3,0,0,12,12,12,15,4,3,22,22,0,13]],[[[39,"EditBox"],[50,"EditBox",8388608,[-13,-14,-15,-16],[[2,-2,[0,"6e3S3MoutMvKbgkCK88oPw"],[5,160,40]],[5,1,0,-3,[0,"4cs5KyNM1CM4nL+d7Vc/Ca"],818,819],[188,6,-6,[0,"17NNqNARdO4JzerIyC/tX5"],-5,-4,820],[3,-7,[0,"deW1WLOcFKcp9j5VcFisou"]],[4,-8,[0,"e8g2m9PgBAx7ybeYs5xHF3"],[1,160,40,0.01],821],[189,-11,[0,"57fCGBPLVNK466tv+f5Kug"],-10,-9],[46,-12,[0,"98GUtOVGRN94XAl4+kYtOa"]]],[95,"c46/YsCPVOJYA4mWEpNYRx",null,null,[],-1,0],[1,0.03,0.03,0.03]],[26,"Row1",[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[[2,-17,[0,"d39j0k1uhOE4n3ohiSvrd+"],[5,100,88]]],[1,"fe5QdMlyBEooyGaCe5Qgz1",null,null,null,1,0],[1,0,168,0]],[26,"Row2",[-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41],[[13,-30,[0,"3a29rrTMVE7oRBoijfigA7"]]],[1,"70x2bXBGRCYrOVIre8F2+3",null,null,null,1,0],[1,0,56,0]],[26,"Row3",[-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53],[[13,-42,[0,"f4fEODWr1GFLF0iunbc+9Q"]]],[1,"67lzc7bbZNsoWrPUWja7xo",null,null,null,1,0],[1,0,-56,0]],[15,"Button_q",[-61,-62],[[2,-54,[0,"18RBW/MNhEfaAKJxchZttX"],[5,88,88]],[5,1,0,-55,[0,"58pjB6cOhJJoHDmAfFraW9"],21,22],[6,2,-57,[0,"d6qd+hLtdFuqIcebNAx3Pd"],[4,4292269782],-56,23,24,25,26],[3,-58,[0,"a7KpFdM19FNacWQvq8L6Vg"]],[4,-59,[0,"c3tOkoaptIRZVrb1/d/XBj"],[1,88,88,0.01],27],[7,81,-60,[0,"85HQuXlFZOsJLBJjfi5pb8"]]],[1,"45hKzhlcRCTLeWrSOrFV3J",null,null,null,1,0]],[15,"Button_w",[-70,-71],[[2,-63,[0,"76vVTepQFP4Yt4S5ZP6IdT"],[5,88,88]],[5,1,0,-64,[0,"65r/koO4FGCZP+b9cBZUlQ"],41,42],[6,2,-66,[0,"eeC5zHnPlEhJb4yjIjSLmH"],[4,4292269782],-65,43,44,45,46],[3,-67,[0,"30D0jkM+lKO7iQVQwV3Bhk"]],[4,-68,[0,"c9nWDhyt5No4vjqW+nj9A+"],[1,88,88,0.01],47],[7,87,-69,[0,"37AyO6GnVEA73HdiXXJpsN"]]],[1,"67TBfLq09FPpuBcYi0TsyX",null,null,null,1,0]],[15,"Button_e",[-79,-80],[[2,-72,[0,"2e3ielL6hObIJ2PUdMyS1N"],[5,88,88]],[5,1,0,-73,[0,"a7R9frQtpN27CVZSMl7Hr7"],61,62],[6,2,-75,[0,"9c3joOqPZFZZRDlgugVvEv"],[4,4292269782],-74,63,64,65,66],[3,-76,[0,"8fihAI+/9LTYrk+0I0IB6E"]],[4,-77,[0,"7bz+kBduVGGKf8QK5qkqoI"],[1,88,88,0.01],67],[7,69,-78,[0,"a5gNUEBIFB5JmrjpM4NlS5"]]],[1,"ab+fNJZCRKaazyaq57038y",null,null,null,1,0]],[15,"Button_r",[-88,-89],[[2,-81,[0,"180L7j1q9OqY4VVgGZIfFn"],[5,88,88]],[5,1,0,-82,[0,"b9JJfKHLJGh7ypL7QplV4s"],81,82],[6,2,-84,[0,"924ougOLpLkL+l6STRYXZ+"],[4,4292269782],-83,83,84,85,86],[3,-85,[0,"c184P1Zk9Htrcmy7tq3xDP"]],[4,-86,[0,"0aM6pw/RNKGYVpVWnSykXY"],[1,88,88,0.01],87],[7,82,-87,[0,"8fZTTLrGVM75RQ0tnSej1B"]]],[1,"bbxO9AszlDgbPO4WuN62y8",null,null,null,1,0]],[15,"Button_t",[-97,-98],[[2,-90,[0,"9drrTnmpNG24DDYp7j173f"],[5,88,88]],[5,1,0,-91,[0,"195bZaD1VE/Y2ZVOPNNyfX"],101,102],[6,2,-93,[0,"4aKXygwfFM5r8/lzbcNWoD"],[4,4292269782],-92,103,104,105,106],[3,-94,[0,"b6U1fG1vFGcLl7dX/i7Ay1"]],[4,-95,[0,"caZ58Oos9EX5BcyMAZDGQb"],[1,88,88,0.01],107],[7,84,-96,[0,"aaQhVBtvZFTJSf6pGeBYVM"]]],[1,"d73hAp/HhCUbhYlQaSlWie",null,null,null,1,0]],[15,"Button_y",[-106,-107],[[2,-99,[0,"a0qTIA44ZFIqudcvsP+1oi"],[5,88,88]],[5,1,0,-100,[0,"81Oo5INRNDdJlmMXVk7DKJ"],121,122],[6,2,-102,[0,"7ftbNMP4JPi6cC7WuRnHYH"],[4,4292269782],-101,123,124,125,126],[3,-103,[0,"bettCyHmZJkoEVW+MIkBeO"]],[4,-104,[0,"be9fNQaQtEZY0hDvOgo9z4"],[1,88,88,0.01],127],[7,89,-105,[0,"a4vKZL2vJAhab66gkifIxK"]]],[1,"0bwfELG/JK5ruWgNbZC23o",null,null,null,1,0]],[15,"Button_u",[-115,-116],[[2,-108,[0,"afXa+RUkhFyaq7JLq9p/JH"],[5,88,88]],[5,1,0,-109,[0,"4eiLr887hOFpFDHJO2Z24R"],141,142],[6,2,-111,[0,"7fGsbYPqFORo1ZnAJp2Yyj"],[4,4292269782],-110,143,144,145,146],[3,-112,[0,"63xJ3dcUNF8ZCSZ+eQErzJ"]],[4,-113,[0,"6dVLMwrGJL0IQONpefvujA"],[1,88,88,0.01],147],[7,85,-114,[0,"7bxd9DizZKuph+uVpSlorW"]]],[1,"27C65UXYxDmoMlJ9SiqeZe",null,null,null,1,0]],[15,"Button_i",[-124,-125],[[2,-117,[0,"f6H/uPf9dOfKtaAQEo+X7S"],[5,88,88]],[5,1,0,-118,[0,"eagxKZ1aJE2b1EQ/a2rC4C"],161,162],[6,2,-120,[0,"2esIEbkDNLpLX9Zbcrj/qe"],[4,4292269782],-119,163,164,165,166],[3,-121,[0,"c1jFtx4kNNS4FDzmZVgAfj"]],[4,-122,[0,"b1Kyr20XtEvbNROhsVWZNa"],[1,88,88,0.01],167],[7,73,-123,[0,"30yaZJEn5JnJTUrwEIgP53"]]],[1,"fejVuPHedGuLUk45XJF4HV",null,null,null,1,0]],[15,"Button_o",[-133,-134],[[2,-126,[0,"08v8m2SoFEVZPgglxF7Xoc"],[5,88,88]],[5,1,0,-127,[0,"e17zhQgYJNGrL6veaQdfP4"],181,182],[6,2,-129,[0,"7azl+fZwdCb6olg7VodIpw"],[4,4292269782],-128,183,184,185,186],[3,-130,[0,"85UuLT+NRPX6vf+IS7r4fF"]],[4,-131,[0,"6deWSqcK5IOaQLSDFxdrx9"],[1,88,88,0.01],187],[7,79,-132,[0,"7c/NnrJxZO0pk4n5NEUalI"]]],[1,"aefbxkbq9NwqnWd6xp/wNK",null,null,null,1,0]],[15,"Button_p",[-142,-143],[[2,-135,[0,"73JNjRO/JIQbNwriJgHr3x"],[5,88,88]],[5,1,0,-136,[0,"edKPNYqI5JN6HvQPnRpxkQ"],201,202],[6,2,-138,[0,"64qqf9AHtKUpIXZRq5Oy4q"],[4,4292269782],-137,203,204,205,206],[3,-139,[0,"edmrCpJGpKwp99uCP7tw4Z"]],[4,-140,[0,"9eHuo2tydH3JO3JNUn4Tr2"],[1,88,88,0.01],207],[7,80,-141,[0,"7fxLtkYZlHpYKjd8JxV2wZ"]]],[1,"b5mqW29ZZF47L+lbLW0buw",null,null,null,1,0]],[15,"Button_a",[-151,-152],[[2,-144,[0,"a2jN46wjpHVoEGBnwvDf/w"],[5,88,88]],[5,1,0,-145,[0,"42GQBhvtNHxL/m0wdF7r2F"],248,249],[6,2,-147,[0,"5ckbJcjddAEYO7o61Blxgu"],[4,4292269782],-146,250,251,252,253],[3,-148,[0,"d8RnpnK2ZAWY9jRKTS/D4w"]],[4,-149,[0,"5cfKSBogxHEqAdfnp5qsRD"],[1,88,88,0.01],254],[7,65,-150,[0,"ecCB2y5D5CRpwpg9yKi9fz"]]],[1,"e0iMWLj7pKApeUJq4T0A4i",null,null,null,1,0]],[15,"Button_s",[-160,-161],[[2,-153,[0,"c6c5j3MRRLxJH4YA5bvx9e"],[5,88,88]],[5,1,0,-154,[0,"03fe8byzpEi6ZrN37TFKMi"],268,269],[6,2,-156,[0,"7f/SJJ5/tOx6f7WdDK6vRR"],[4,4292269782],-155,270,271,272,273],[3,-157,[0,"a85ecQLOlDMo72Q3lZm9HM"]],[4,-158,[0,"322dDS7DFN2bSi51g1GL4B"],[1,88,88,0.01],274],[7,83,-159,[0,"00gneWzqRDra4s47bk1aSg"]]],[1,"4bj+Mjc0NOwqjZdz423v0h",null,null,null,1,0]],[15,"Button_d",[-169,-170],[[2,-162,[0,"74t15me2dG+qZqPunzN8Bf"],[5,88,88]],[5,1,0,-163,[0,"53QtE31D5AcZdzVpu/q2EW"],288,289],[6,2,-165,[0,"b5abaVHrNIn6UidXiyizb2"],[4,4292269782],-164,290,291,292,293],[3,-166,[0,"82BOwkMvJKC5+Pp1PveW1l"]],[4,-167,[0,"4d/E3NpNZERonjp3E9Kh2a"],[1,88,88,0.01],294],[7,68,-168,[0,"57b6z/jr1AM415wv25zhVH"]]],[1,"85XUXEa0xMzIBRdyUsuqJ7",null,null,null,1,0]],[15,"Button_f",[-178,-179],[[2,-171,[0,"36HH2CqH1GgpW/nJjdnWcy"],[5,88,88]],[5,1,0,-172,[0,"15+Td0n+5CkYQ9sJyU88JI"],308,309],[6,2,-174,[0,"65SfzhqM5AHI8HMTmFkI6U"],[4,4292269782],-173,310,311,312,313],[3,-175,[0,"f6Wu1BuVRC3JWsOLg+5mn7"]],[4,-176,[0,"e9BWsKZMdFGa44ABAFCr5X"],[1,88,88,0.01],314],[7,70,-177,[0,"4bo1jut7xHcZpxi2DM9nO3"]]],[1,"72uQ/3wgJPDJHmPAvlWtZB",null,null,null,1,0]],[15,"Button_g",[-187,-188],[[2,-180,[0,"22zo67v8pDU7ho0HuwUQo4"],[5,88,88]],[5,1,0,-181,[0,"50TK133MZONZIj+iRurffz"],328,329],[6,2,-183,[0,"53iiwA3k9P4L1AjKKp1kek"],[4,4292269782],-182,330,331,332,333],[3,-184,[0,"380dcAinRD3og82rH/OO3V"]],[4,-185,[0,"f9lLkezWxAxroMKX2n1cVS"],[1,88,88,0.01],334],[7,71,-186,[0,"697Mi/HJ1D7ZMy1qVCtAyY"]]],[1,"45YCkcMuJOT405pdWEvkfG",null,null,null,1,0]],[15,"Button_h",[-196,-197],[[2,-189,[0,"6ah5FIaBdC8J0I36Ev4hfW"],[5,88,88]],[5,1,0,-190,[0,"1428rNSu9OxIuDyiyweVO2"],348,349],[6,2,-192,[0,"36ax87cQlKYrQULevTgUOK"],[4,4292269782],-191,350,351,352,353],[3,-193,[0,"7d5d94QaJLb4Piq5cVSmGs"]],[4,-194,[0,"29wkApmHNIgbK9HpNewJ6o"],[1,88,88,0.01],354],[7,72,-195,[0,"08NPQYgLFCtLQvMn3QYZbP"]]],[1,"9aPaXsAWFDoLv/msm2dNl/",null,null,null,1,0]],[15,"Button_j",[-205,-206],[[2,-198,[0,"5apjbgmrRLtJLy4HZHOC/P"],[5,88,88]],[5,1,0,-199,[0,"5eJvTfaUJJJb9l33aaCaSr"],368,369],[6,2,-201,[0,"2685xznDBCWpsCdcLsDz4T"],[4,4292269782],-200,370,371,372,373],[3,-202,[0,"fes73TkHhEeZVqkEeOp9zs"]],[4,-203,[0,"be3lFQtr9JFoHCZKAa5xgV"],[1,88,88,0.01],374],[7,74,-204,[0,"bdvq04nadHD66hUVdEl4Y5"]]],[1,"03H89dE+tDjqrcnQS8SdWi",null,null,null,1,0]],[15,"Button_k",[-214,-215],[[2,-207,[0,"6amE8y6fVJXYu93a04Imww"],[5,88,88]],[5,1,0,-208,[0,"17pXUs7TRPW6+V6ViTrnP7"],388,389],[6,2,-210,[0,"049Xed6UVMSYShwkfSEXPE"],[4,4292269782],-209,390,391,392,393],[3,-211,[0,"dddyi/wHhHv5FgrcZoziLu"]],[4,-212,[0,"6bqsh098lBPang8ml9u+RX"],[1,88,88,0.01],394],[7,75,-213,[0,"1aqP4ZiftNWbAar5GD5RGr"]]],[1,"76Y0I8wj9E6IYV3226P594",null,null,null,1,0]],[15,"Button_l",[-223,-224],[[2,-216,[0,"a7H4cVwAxHCbOWYx89T7wy"],[5,88,88]],[5,1,0,-217,[0,"a6j8ubYrZImadlcyo1B24f"],408,409],[6,2,-219,[0,"61zKLv2tVPsZTTD4FXp+yr"],[4,4292269782],-218,410,411,412,413],[3,-220,[0,"75Co15hOZPaL0c9Z6qYutQ"]],[4,-221,[0,"abvu5JIa1KI5Zc5ELlARD3"],[1,88,88,0.01],414],[7,76,-222,[0,"edqx0UJeVNBZE/XaW4wpOv"]]],[1,"81a9iTx2JDgr79devXPLTR",null,null,null,1,0]],[15,"Button_z",[-232,-233],[[2,-225,[0,"32z0EZvRBPjpAL85/2y5aW"],[5,88,88]],[5,1,0,-226,[0,"9aQtchVy9BZo7kVviIBvCY"],455,456],[6,2,-228,[0,"84d1XU8ixLRpmpchvkB1SV"],[4,4292269782],-227,457,458,459,460],[3,-229,[0,"a84dLkmMxGZre1AlCfTWh7"]],[4,-230,[0,"a0/vtQNHpJfo5fVwW387bp"],[1,88,88,0.01],461],[7,90,-231,[0,"35uLDCok1KbJbYRhRPlyzl"]]],[1,"c70iywiUhMwr6VJntuP5yC",null,null,null,1,0]],[15,"Button_x",[-241,-242],[[2,-234,[0,"79BD3v6oZOv7zvL2HsVU3C"],[5,88,88]],[5,1,0,-235,[0,"2fuSvEBIVK57NGxIjqLTyq"],475,476],[6,2,-237,[0,"01r2uhkohO1KIWaHMKZsIM"],[4,4292269782],-236,477,478,479,480],[3,-238,[0,"a2TEukpGBAUod1bqH2LrER"]],[4,-239,[0,"b88MYeVMND7qeuQnjqyFwN"],[1,88,88,0.01],481],[7,88,-240,[0,"01hYr4vNVNHYWKUOmsl98k"]]],[1,"b2U50MB9NBfbrEBxAM26Td",null,null,null,1,0]],[15,"Button_c",[-250,-251],[[2,-243,[0,"ebuGmvaMNJS7Dqkt9ZRtln"],[5,88,88]],[5,1,0,-244,[0,"92iXVn469E+K1C77i9XgRS"],495,496],[6,2,-246,[0,"788/OxrYBAyZXLpdtuMss7"],[4,4292269782],-245,497,498,499,500],[3,-247,[0,"a0bmo7Cu9J6qQ1rO0GmRMl"]],[4,-248,[0,"7e/2ic5K5GB4tz71S2tt/0"],[1,88,88,0.01],501],[7,67,-249,[0,"28aX9A3zZBd6yCJ2Zxkao9"]]],[1,"a92vatNVdDdL03vsggvx0J",null,null,null,1,0]],[15,"Button_v",[-259,-260],[[2,-252,[0,"d836N/ClpJb6lCTN3mGVQa"],[5,88,88]],[5,1,0,-253,[0,"c8OzojRYlKDouJMA/5MpLp"],515,516],[6,2,-255,[0,"86CNfRS6xCn54TQ/FLVDiF"],[4,4292269782],-254,517,518,519,520],[3,-256,[0,"74vwgBvEBDFZi5cdmWFtXf"]],[4,-257,[0,"1e3c1jc3hEQpDe7i4X2Ort"],[1,88,88,0.01],521],[7,86,-258,[0,"a29/Tv1y1A9LW2zMdnWBlE"]]],[1,"03MCJnzQlH6bZ0ljKY+lah",null,null,null,1,0]],[15,"Button_b",[-268,-269],[[2,-261,[0,"64pjiBrFRP7YgOvOiBoT78"],[5,88,88]],[5,1,0,-262,[0,"33XU5iIslJRoTcSLcONhLJ"],535,536],[6,2,-264,[0,"f17rK7m/5HxqiDdcrMTc7u"],[4,4292269782],-263,537,538,539,540],[3,-265,[0,"bdhTQjBzhMWrlf/HIQ9SPs"]],[4,-266,[0,"c4KveiKS9KW6raInSNQ+To"],[1,88,88,0.01],541],[7,66,-267,[0,"fdxtYkjR5Eh7NM44Oh1Oo5"]]],[1,"07OmIkUFFNzo6pMKrw8YK0",null,null,null,1,0]],[15,"Button_n",[-277,-278],[[2,-270,[0,"9aeJeWhzJGD6Xr3HGgTYfn"],[5,88,88]],[5,1,0,-271,[0,"cbolxaLvJOz48PS8cYDajl"],555,556],[6,2,-273,[0,"47sSGGjrxC84OIrFsoOb7d"],[4,4292269782],-272,557,558,559,560],[3,-274,[0,"8bPG4SzDFA6p2N7G1nqG1d"]],[4,-275,[0,"bengPfmtpG14+i8xSnCF5E"],[1,88,88,0.01],561],[7,78,-276,[0,"47RO3swMBOzL8rfEnGh6I3"]]],[1,"8dHkf2Nv1Dt5STxSfy8geX",null,null,null,1,0]],[15,"Button_m",[-286,-287],[[2,-279,[0,"d0+jShnvVJqZXfhERJddjb"],[5,88,88]],[5,1,0,-280,[0,"35yaYJ/TxLk5QVH/M1EzNh"],575,576],[6,2,-282,[0,"38bpk3bw1LLLepeGF6QFpg"],[4,4292269782],-281,577,578,579,580],[3,-283,[0,"d4PGDUjnVOsZS5/EBk/J3H"]],[4,-284,[0,"f9+Qj1Zw5EK7/zGpYXim9s"],[1,88,88,0.01],581],[7,77,-285,[0,"03oXOsgF5PhIJCrhg5zI2M"]]],[1,"4bPVXkefxAl50m3ElM426x",null,null,null,1,0]],[16,"num_1",false,[-295],[[2,-288,[0,"1enJcUbFBE7IV2lfZL7sBK"],[5,88,88]],[5,1,0,-289,[0,"934J/nJDtMxpLOa7TrONtF"],30,31],[6,2,-291,[0,"7d2tXLd5REZ42b+adak4uc"],[4,4292269782],-290,32,33,34,35],[3,-292,[0,"5cl4qt8/VBBoc8poR+HpHP"]],[4,-293,[0,"f27nn0QcVNH4MvfCew6Ugx"],[1,88,88,0.01],36],[7,33,-294,[0,"6fs7JTDKhGJqSYrWQFxnXW"]]],[1,"68HJGBatpEgprhYsRIMl0V",null,null,null,1,0]],[16,"num_2",false,[-303],[[2,-296,[0,"878pB9utZNCIHizO9Iuebb"],[5,88,88]],[5,1,0,-297,[0,"c9pogPTSJFU6e8S4LIj0Mk"],50,51],[6,2,-299,[0,"c5oZrIXfxHIYoo7cvEaTSa"],[4,4292269782],-298,52,53,54,55],[3,-300,[0,"40WhQjEhFE+oILuVDJVvWi"]],[4,-301,[0,"a7RItvrg9Ox48fFBbr7lZa"],[1,88,88,0.01],56],[7,64,-302,[0,"a5dt1Q0LJE47kC04qClt9W"]]],[1,"d4dvWq2mxAHJEQdEKCC8kl",null,null,null,1,0]],[16,"num_3",false,[-311],[[2,-304,[0,"78bzQ26ypMe4z8CCFOpeWH"],[5,88,88]],[5,1,0,-305,[0,"d7flJSlh9Oh6ZWBDorOANo"],70,71],[6,2,-307,[0,"e0AWzKHLBB/a3nWJy15Iut"],[4,4292269782],-306,72,73,74,75],[3,-308,[0,"f2mEg0bM9Mzrcia7AcmeE0"]],[4,-309,[0,"24+DPO2C1FL707etFFeSpb"],[1,88,88,0.01],76],[7,35,-310,[0,"988vN2fe1NVLoBkQo13v2L"]]],[1,"87gQzCRklBqp9wDNAVjxhS",null,null,null,1,0]],[16,"num_4",false,[-319],[[2,-312,[0,"d2NnWKeXJAOZ1hy2euqKCU"],[5,88,88]],[5,1,0,-313,[0,"c8Z50C3+JJ96T+jld/X/qO"],90,91],[6,2,-315,[0,"15PCq6rsZEl73GHQoG3Gfe"],[4,4292269782],-314,92,93,94,95],[3,-316,[0,"a6tjB0PvdNbJVk4zq08bSk"]],[4,-317,[0,"69yIQZHaBJ2os9k6Lb4WbR"],[1,88,88,0.01],96],[7,36,-318,[0,"cbRr+8gXpMarMBXI9Aolxx"]]],[1,"35wWXG7M5CGoX2ZCIStHM5",null,null,null,1,0]],[16,"num_5",false,[-327],[[2,-320,[0,"e4P5LH059BBYWJsmRXibN8"],[5,88,88]],[5,1,0,-321,[0,"629ONXTDpHV4TvMeW2qc6b"],110,111],[6,2,-323,[0,"43x+TFDdxGnbiR+xWYyxtk"],[4,4292269782],-322,112,113,114,115],[3,-324,[0,"ebiFRpo9FFELe4Rujp5DzS"]],[4,-325,[0,"3a7z/xVjVJQJJr4Uoh/dVf"],[1,88,88,0.01],116],[7,37,-326,[0,"15pgzJhXFIz6sO3MU/HvLq"]]],[1,"c7oja+Ft9ADY2prAY4kwd5",null,null,null,1,0]],[16,"num_6",false,[-335],[[2,-328,[0,"c2lqwgn59LVKknmniQHkqR"],[5,88,88]],[5,1,0,-329,[0,"5fa2OvCXlOsoMQhN9BfX8o"],130,131],[6,2,-331,[0,"3c8MrIcw9DaZWa4+hpJxJN"],[4,4292269782],-330,132,133,134,135],[3,-332,[0,"e8lOwJrHZL/pnMfM0Ll/BF"]],[4,-333,[0,"d4hFp5/oVLQYv6NQQsraVh"],[1,88,88,0.01],136],[7,94,-334,[0,"40WHxXwgpMbafUs/jSn1mh"]]],[1,"495g3b7zhBYbySBRlU0gF/",null,null,null,1,0]],[16,"num_7",false,[-343],[[2,-336,[0,"b755KhH75HTbkRLhLaavtl"],[5,88,88]],[5,1,0,-337,[0,"d3Fv/4uNJGoKwC/7nsBZLK"],150,151],[6,2,-339,[0,"a4gioGmPREXa/hhu+QuFWt"],[4,4292269782],-338,152,153,154,155],[3,-340,[0,"f8bAnLpFBLHKsqRIsEBieP"]],[4,-341,[0,"a4suzBG7RC7IP/mpRWdfKA"],[1,88,88,0.01],156],[7,38,-342,[0,"33hdpii8RPwbUQAWz/sl8e"]]],[1,"50LJBdyTNGGboARNXlDWCK",null,null,null,1,0]],[16,"num_8",false,[-351],[[2,-344,[0,"45KxgoOwpGzae6ENObRkjx"],[5,88,88]],[5,1,0,-345,[0,"bfrhQcqUhDEb56f9Oa8eGV"],170,171],[6,2,-347,[0,"d9vGYoj6tBaKNV0J7Sael3"],[4,4292269782],-346,172,173,174,175],[3,-348,[0,"85zYaaw+VPPI0EI3k7qUEJ"]],[4,-349,[0,"e9/9qr0h1ANYhkGpFUro5m"],[1,88,88,0.01],176],[7,42,-350,[0,"3b+/+srkBLOb871pQmR9up"]]],[1,"d9g3rJf/dHF5ufWphPsPT5",null,null,null,1,0]],[16,"num_9",false,[-359],[[2,-352,[0,"df0HzjdjxMwbixGUGRpYDB"],[5,88,88]],[5,1,0,-353,[0,"6atY9mNVVOqogMzZFPOGp+"],190,191],[6,2,-355,[0,"47X/fvsiNDuYOkCqRyFdWa"],[4,4292269782],-354,192,193,194,195],[3,-356,[0,"70crH1lzJNZpwZpMjPLvBZ"]],[4,-357,[0,"91Tl0SUC5HtLRS/CQmRhhQ"],[1,88,88,0.01],196],[7,40,-358,[0,"91UkxJachDmLnOdD9jqoZq"]]],[1,"05bDAXIQhAcoDCx7c2wkDr",null,null,null,1,0]],[16,"num_0",false,[-367],[[2,-360,[0,"7d9M+8Zk9KnZBb7YKWHWnX"],[5,88,88]],[5,1,0,-361,[0,"efXBRHnF1COq459t3bf1np"],210,211],[6,2,-363,[0,"1c6FvcfJRB/aU2+jODOsyV"],[4,4292269782],-362,212,213,214,215],[3,-364,[0,"1aTPNWHnNIk5xL0YGuDxAH"]],[4,-365,[0,"d8HM0Q7+xAv7QF0MwQdMTa"],[1,88,88,0.01],216],[7,41,-366,[0,"2bnsmxDVhH953E/LX8+nkY"]]],[1,"46dr7dgRZAyrBQaxvxwNPu",null,null,null,1,0]],[16,"bt_1",false,[-375],[[2,-368,[0,"37UgjxdmZPIJQPiLpjQT6Q"],[5,88,88]],[5,1,0,-369,[0,"a7lvW84PhI0K43fusKT4eI"],257,258],[6,2,-371,[0,"54YjHEp2BAOJoJeqEL2tPf"],[4,4292269782],-370,259,260,261,262],[3,-372,[0,"7fMtDOVAJKPZ04Za6ivNjl"]],[4,-373,[0,"01UqxJptxP0JSW0xrVlmaZ"],[1,88,88,0.01],263],[7,43,-374,[0,"daSi+mhm1JtJRyPgert5Uk"]]],[1,"efl+vXSqdB+4ImS/Xt9AdJ",null,null,null,1,0]],[16,"bt_2",false,[-383],[[2,-376,[0,"a8myh9Wx9HTYiCt46b5WBr"],[5,88,88]],[5,1,0,-377,[0,"8cUceq05BFdYlsO/XqKaiP"],277,278],[6,2,-379,[0,"bdAAt7zYJJHKJairG2nvzS"],[4,4292269782],-378,279,280,281,282],[3,-380,[0,"82kUWW0ZtIb56i6yYq7i1I"]],[4,-381,[0,"2aDK9Fep5IaLwwtEIFVbZX"],[1,88,88,0.01],283],[7,45,-382,[0,"5ebSwr+llBp5ER4skiaQHS"]]],[1,"58BHjhff1PNr2z46vxnv2T",null,null,null,1,0]],[16,"bt_3",false,[-391],[[2,-384,[0,"dbT9P5fMlLeoIP7jIL4DyT"],[5,88,88]],[5,1,0,-385,[0,"7900nIGjhMkabjusqahi4U"],297,298],[6,2,-387,[0,"2bP0SKWxRNLK8+VcCwNPgk"],[4,4292269782],-386,299,300,301,302],[3,-388,[0,"30jTttIExMTY/Vry3/RAkX"]],[4,-389,[0,"1dYD1SE+hFF5FbTiGby20m"],[1,88,88,0.01],303],[7,61,-390,[0,"76W/vS/atEZbX7Rz14k6iA"]]],[1,"4fkBxYbHBCPpMkditieB/m",null,null,null,1,0]],[16,"bt_4",false,[-399],[[2,-392,[0,"8fGdgovqpFV5LsLmJyJwAb"],[5,88,88]],[5,1,0,-393,[0,"94jBsZlQZHHI5UdjhIQuIZ"],317,318],[6,2,-395,[0,"0ctF2QgddMMbWvhfTBSx2V"],[4,4292269782],-394,319,320,321,322],[3,-396,[0,"95BerCzD1LhJ7S+HCQIVzB"]],[4,-397,[0,"23t3y+8alA9qhg2+qNMgqI"],[1,88,88,0.01],323],[7,91,-398,[0,"a85uxTJ0tB2og0JhDpiY5g"]]],[1,"ceei0XfXlKBZhO2fP0ApsM",null,null,null,1,0]],[16,"bt_5",false,[-407],[[2,-400,[0,"ccCDk1kTlPm5Dxhyu8I7xx"],[5,88,88]],[5,1,0,-401,[0,"6a9vTeMWtIHLHLDjDzjCfQ"],337,338],[6,2,-403,[0,"c9eBy0G21DCaeVqg73Tg2b"],[4,4292269782],-402,339,340,341,342],[3,-404,[0,"a1iAfxHlpHTKg8Obe3fLej"]],[4,-405,[0,"9deQBW3alKub6zFf4cCiVe"],[1,88,88,0.01],343],[7,93,-406,[0,"23Mrwg24NNZ7kLh10RBvH1"]]],[1,"caB0+4TndMqpxjHikuI/pI",null,null,null,1,0]],[16,"bt_6",false,[-415],[[2,-408,[0,"f8lFtR/AFG2obGBydMTmYE"],[5,88,88]],[5,1,0,-409,[0,"86uWXOsV5K8qMWKVnPlFJE"],357,358],[6,2,-411,[0,"788Fw8vUFJMKH9IoyiKpXO"],[4,4292269782],-410,359,360,361,362],[3,-412,[0,"4aBrH4KH9HeqIgXsIjc7Za"]],[4,-413,[0,"23VUHrIjJLepxRjVQl7edu"],[1,88,88,0.01],363],[7,123,-414,[0,"98RwVpxR5N9rOj6ETXLSHO"]]],[1,"60g4M8PKBILaIcOWpLLseE",null,null,null,1,0]],[16,"bt_7",false,[-423],[[2,-416,[0,"b3uBt+p4NLbYFK00xrmueG"],[5,88,88]],[5,1,0,-417,[0,"cdX7/LY49HfIn8EsrR0YpY"],377,378],[6,2,-419,[0,"ec5Ayz4DlPp7z/cuC3RZa1"],[4,4292269782],-418,379,380,381,382],[3,-420,[0,"80AS8wSDlB8r8H60AjCZDC"]],[4,-421,[0,"2c/SEUz15Cg5Q7LpooD2U+"],[1,88,88,0.01],383],[7,125,-422,[0,"d0wHKurFJCAYZfV54WPSwp"]]],[1,"517AdTBtNCm6NL8qZ6SNDI",null,null,null,1,0]],[16,"bt_8",false,[-431],[[2,-424,[0,"18whHLiL1LCrdzdNazl+j3"],[5,88,88]],[5,1,0,-425,[0,"f2LlVMqTJATrHMA/8QTyNW"],397,398],[6,2,-427,[0,"b6+kAQV/BKL66JFPkNoxbF"],[4,4292269782],-426,399,400,401,402],[3,-428,[0,"e167Hksk9Pt4uBKHKbo3fx"]],[4,-429,[0,"7dE3LZgXRFE66G0G0o8eaH"],[1,88,88,0.01],403],[7,124,-430,[0,"2a2KpEM/tPZp+3GX5h8QBz"]]],[1,"15RPT+W1ZFfqE5NGDznMPI",null,null,null,1,0]],[16,"bt_9",false,[-439],[[2,-432,[0,"2bM1AJJsBO7ZpbIDUF6zsm"],[5,88,88]],[5,1,0,-433,[0,"46EUI95IxMTbIN8V7iarWn"],417,418],[6,2,-435,[0,"52NsdEH/1FBYJYuAViOR4G"],[4,4292269782],-434,419,420,421,422],[3,-436,[0,"ecec7cX7FPh5HiNMpIPgVK"]],[4,-437,[0,"42Y6zfsZFNJLQylyCuVBwp"],[1,88,88,0.01],423],[7,92,-438,[0,"975cS6Sm1Eaa8XPZdn5e50"]]],[1,"45lyhRj95JApydCbN0X4pW",null,null,null,1,0]],[15,"Button_shift_left",[-447],[[2,-440,[0,"26nHMkzgpFropRoqqIu9OQ"],[5,228,88]],[5,1,0,-441,[0,"cdG4xh9idLWK8RVkiuHVV/"],435,436],[6,2,-443,[0,"678kGUA0lDXJopoZzEohPK"],[4,4292269782],-442,437,438,439,440],[3,-444,[0,"a83eGl/GxJBouKrSvMbi4S"]],[4,-445,[0,"4f/PfhVS5OgZgMpywPuTDY"],[1,228,88,0.01],441],[7,20,-446,[0,"04qiDVFS9NQbq8Do1echht"]]],[1,"74WEVTuLVFybEl0I2Z6tc8",null,null,null,1,0]],[16,"abc",false,[-455],[[2,-448,[0,"00YQJGc/FDGZPNx1b0RFn7"],[5,228,88]],[5,1,0,-449,[0,"95bSXwZGRHJoxbIonqN6+H"],444,445],[6,2,-451,[0,"7eIxtRTfZAhbMQJWlkrx0S"],[4,4292269782],-450,446,447,448,449],[3,-452,[0,"edIBVgOvZHVbYyJsN/gOpM"]],[4,-453,[0,"26ClnvdB5LCaZZxnJk6faI"],[1,228,88,0.01],450],[7,113,-454,[0,"85EHCXi1tPrp08WfRS9sxe"]]],[1,"6dly9lYWBJGY7aMDILEd0a",null,null,null,1,0]],[16,"bt_1",false,[-463],[[2,-456,[0,"990Uu2QONNxbX3mOOIW9gL"],[5,88,88]],[5,1,0,-457,[0,"5fWtPBG/RBvq54HFbnndz+"],464,465],[6,2,-459,[0,"ddi0NZmzpAd6JWxF1eq1CZ"],[4,4292269782],-458,466,467,468,469],[3,-460,[0,"87AJGOzkFFt4Jl6Kx7uCx8"]],[4,-461,[0,"91W6GSUnRF1pTdBiuYJEaF"],[1,88,88,0.01],470],[7,39,-462,[0,"ca8OJf20BCkrFD6mqxaoC3"]]],[1,"f6KK3sjgxKVpihRbYym7Ba",null,null,null,1,0]],[16,"bt_2",false,[-471],[[2,-464,[0,"66SX8ZTfdJM7yzv39obEjJ"],[5,88,88]],[5,1,0,-465,[0,"64B9pyIpZAYKupFiiBinRv"],484,485],[6,2,-467,[0,"f22pGJRR5Gyref4Yv1H/uX"],[4,4292269782],-466,486,487,488,489],[3,-468,[0,"0alkKPu4ZDwrJcMikZfZ+s"]],[4,-469,[0,"5aYSTtLuBNfIGBPEH//RRS"],[1,88,88,0.01],490],[7,34,-470,[0,"abSujvdSJFm5DFRoZZmsW/"]]],[1,"fdMEsWt45IPJSqPXGbQof1",null,null,null,1,0]],[16,"bt_3",false,[-479],[[2,-472,[0,"2cqRlN/S5GgolZxkjH6bwK"],[5,88,88]],[5,1,0,-473,[0,"99etV8QtVLA6Zn2Bog9jc1"],504,505],[6,2,-475,[0,"737GYw3K5BI4qFTLDR06o5"],[4,4292269782],-474,506,507,508,509],[3,-476,[0,"0dL3zgtjlALp6uqeNBLeio"]],[4,-477,[0,"92teujdQZCL7xMvpQrmHbC"],[1,88,88,0.01],510],[7,58,-478,[0,"41KdVfp9ZNC6BEs7fmHPKd"]]],[1,"dalqMaNDxBDZQVadakgmzO",null,null,null,1,0]],[16,"bt_4",false,[-487],[[2,-480,[0,"c5PqX3f8tDypaNFft3bzwh"],[5,88,88]],[5,1,0,-481,[0,"d7E1/q/YxH1rWGSBlw/C1G"],524,525],[6,2,-483,[0,"87MDrrwGJEeJQgkMHahK3q"],[4,4292269782],-482,526,527,528,529],[3,-484,[0,"4bpnPQKDtEar0LGkkgVmB1"]],[4,-485,[0,"52dI0b319Cyp5QpJlVRDwU"],[1,88,88,0.01],530],[7,59,-486,[0,"417dUym7lKOqLkJG/mcEvQ"]]],[1,"3e5CSF3o5Lh5Y/ZhFkeOOE",null,null,null,1,0]],[16,"bt_5",false,[-495],[[2,-488,[0,"30aYqTOxNHsaU3OQX4maXt"],[5,88,88]],[5,1,0,-489,[0,"6fqgWpWkxE5ouGkh7Z70zR"],544,545],[6,2,-491,[0,"66W5QUwTZGmb0w4hl5c45R"],[4,4292269782],-490,546,547,548,549],[3,-492,[0,"bafTCAiFtDmLmUHZ6dhGHo"]],[4,-493,[0,"a8RTfo6w9NGLiBlvDs4bCV"],[1,88,88,0.01],550],[7,63,-494,[0,"edZNSd4hlC5ZaHBIS/RpF/"]]],[1,"fay9SfcEhFerYmYHsZbK3R",null,null,null,1,0]],[16,"bt_6",false,[-503],[[2,-496,[0,"ddC5VgJk5E0rb1ol0fzOsj"],[5,88,88]],[5,1,0,-497,[0,"0eBKdbk5pL9I4w6fQ3+pfY"],564,565],[6,2,-499,[0,"30TpwPV/ZCLLGa8w/Lzy1O"],[4,4292269782],-498,566,567,568,569],[3,-500,[0,"4c8C/L3x1IEa7hK9WCla1z"]],[4,-501,[0,"5ag+CR3wNJ97LtKTTL4lnv"],[1,88,88,0.01],570],[7,95,-502,[0,"2euNaY+MVJWJyBGPvApkZZ"]]],[1,"e3n3U7SNlGSLG8131J/axl",null,null,null,1,0]],[16,"bt_7",false,[-511],[[2,-504,[0,"74ySb1r7FKsJRRncrqV4z7"],[5,88,88]],[5,1,0,-505,[0,"7clCJ9UQ5FFLWHD7ytXTNT"],584,585],[6,2,-507,[0,"58nle8rSBBH5Qxu+iYdu4h"],[4,4292269782],-506,586,587,588,589],[3,-508,[0,"a3FOXV2dRLMrwxi2gOPpnu"]],[4,-509,[0,"e05zwDX45G9L6PSlDuVAxF"],[1,88,88,0.01],590],[7,60,-510,[0,"3aw7GqMs5BfbcXs+Mr9B4p"]]],[1,"33hyEQjrpFVoksmHnQGkND",null,null,null,1,0]],[15,"Button_comma",[-519],[[2,-512,[0,"50TngWXhJAzp0sZPwUirkf"],[5,88,88]],[5,1,0,-513,[0,"5fgDQ7vphJ97fE0JQuFEIj"],593,594],[6,2,-515,[0,"95o7lmJBBNkbjM/IjgCTPK"],[4,4292269782],-514,595,596,597,598],[3,-516,[0,"d4aMAm7tFAwLEks5b4m1U3"]],[4,-517,[0,"63fnrINvVLl6ogkTKsoGg6"],[1,88,88,0.01],599],[7,188,-518,[0,"e0PDCK55hKI6I2rOGdvaUE"]]],[1,"c4y+dkkmpIPI/BvJNybBCa",null,null,null,1,0]],[16,"bt_8",false,[-527],[[2,-520,[0,"65s0unwzhIr416hQMaTyt8"],[5,88,88]],[5,1,0,-521,[0,"52jryzmrNC25WOx0zvNBHp"],602,603],[6,2,-523,[0,"59hRvKBbBK0Lub1dJ6ej5y"],[4,4292269782],-522,604,605,606,607],[3,-524,[0,"7d72Hb7f9Gb6CQ/QmkQVTq"]],[4,-525,[0,"a68RtgW51ID6jriRkrGJTx"],[1,88,88,0.01],608],[7,62,-526,[0,"291V4vEp9HfJHX2Lne4jyO"]]],[1,"a9NK8YiztHjJMJ+7+tUNlw",null,null,null,1,0]],[15,"Button_dot",[-535],[[2,-528,[0,"84Vj3E+uRHQovj/NzRPcr3"],[5,88,88]],[5,1,0,-529,[0,"d7CBLwkItLM5t8A8ltSDqY"],611,612],[6,2,-531,[0,"6f9hUaeghIm6wm6p8XGRrp"],[4,4292269782],-530,613,614,615,616],[3,-532,[0,"2ftVjNyX5GvYKZClZMCN+P"]],[4,-533,[0,"01B2t/CnVGOo+m145h1R9m"],[1,88,88,0.01],617],[7,46,-534,[0,"1282jasHJDjI3dQsZLduQ4"]]],[1,"adBIvJtLVDLajzDPwDkdJx",null,null,null,1,0]],[16,"bt_9",false,[-543],[[2,-536,[0,"86/pWDyspBT7ZGGDvZMJgS"],[5,88,88]],[5,1,0,-537,[0,"c6Bpvn//5LzryDLqJ0qTFz"],620,621],[6,2,-539,[0,"3eZDbjH+JP96UvjyaDw1Nr"],[4,4292269782],-538,622,623,624,625],[3,-540,[0,"a9nFP3QwNFGb1LEEvA3LfJ"]],[4,-541,[0,"90f9fd3BZMHYEeWmkBbx3P"],[1,88,88,0.01],626],[7,47,-542,[0,"3fIJoh6ipKobFfeIMGlYYK"]]],[1,"d1By+QZ79M952I8DzZ1MKz",null,null,null,1,0]],[15,"Button_shift-right",[-551],[[2,-544,[0,"ecfWg26S9Dm78qvWQELGNM"],[5,140,88]],[5,1,0,-545,[0,"ddiXJ2OTxJFokw1S2aSjiF"],629,630],[6,2,-547,[0,"c2Uv9h0NdPj4ilJ/jVKUYf"],[4,4292269782],-546,631,632,633,634],[3,-548,[0,"86ehNiLBJF5L+toVDn8JD2"]],[4,-549,[0,"e8V594RclK4aio6Ah0BRnR"],[1,140,88,0.01],635],[7,20,-550,[0,"a3wZvqkIpBMaKOp3UCe189"]]],[1,"7dysSYjylI2pbGm0dFsk2R",null,null,null,1,0]],[16,"abc",false,[-559],[[2,-552,[0,"07C5+z32lO26MvJiCTmkob"],[5,140,88]],[5,1,0,-553,[0,"a57j8c3alDZqgNaGoiOaMr"],638,639],[6,2,-555,[0,"94eL4tbGBEOa1+R1bAwud4"],[4,4292269782],-554,640,641,642,643],[3,-556,[0,"1eVPPpPetAGIpiuTbZ4jbV"]],[4,-557,[0,"fe6W2vtVVIuL+duVwbrvqC"],[1,140,88,0.01],644],[7,113,-558,[0,"3bRmkE8kpKwqMhPqlBCyb7"]]],[1,"e0mk4Bg2xBmpnszeAUrs8O",null,null,null,1,0]],[15,"Button_symbol_left",[-567],[[2,-560,[0,"8epz92nBlO2qNujoWu6gSd"],[5,88,88]],[5,1,0,-561,[0,"d5/7xibSlISIgqHBAlSO1M"],665,666],[6,2,-563,[0,"79M/WUzpBA5blh6avj1tNa"],[4,4292269782],-562,667,668,669,670],[3,-564,[0,"17cu8ebz1GEoUQCsir2QLR"]],[4,-565,[0,"c9l/FtAA9N1K2l/L16EBT3"],[1,88,88,0.01],671],[7,112,-566,[0,"e9p+CtB2dO9bQNWWnls2nR"]]],[1,"c2j7wTghxFqJDvIH8pmO70",null,null,null,1,0]],[15,"Button_symbol_right",[-575],[[2,-568,[0,"99bEJxFuBGdKCSw7Qzhb3w"],[5,88,88]],[5,1,0,-569,[0,"dbsQqHRqNMobYSAL8XKaYW"],690,691],[6,2,-571,[0,"68h39ck8tGMp55DByyHcDA"],[4,4292269782],-570,692,693,694,695],[3,-572,[0,"bfOnGnI3pLkIvCM2nHgvYv"]],[4,-573,[0,"ddwJse3cdDKIJ5A0bjzPjr"],[1,88,88,0.01],696],[7,112,-574,[0,"ffu7JxiuZKjrLo2LQQYw2Q"]]],[1,"e49CU0VItMHpNYKftT5cmv",null,null,null,1,0]],[26,"Button_Tab",[-583],[[2,-576,[0,"276EzH4GhDOo+UmhgzjMjT"],[5,132,88]],[5,1,0,-577,[0,"dbFiA4qi5CUoNEZb/QNnDS"],10,11],[6,2,-579,[0,"951eUBKQBO+qCCi4w2YwtM"],[4,4292269782],-578,12,13,14,15],[3,-580,[0,"adf9NckTJGWqCPkon6XASi"]],[4,-581,[0,"03t9yPa65JS6EWZXQJ7DA2"],[1,132,88,0.01],16],[7,9,-582,[0,"75K2mkyrtPqqz/HzAEmtzD"]]],[1,"fbYI/1kC1LkbgeOG7E3Cux",null,null,null,1,0],[1,-594,0,0]],[14,"Button_del",2,[-591],[[2,-584,[0,"ceSAxYrZVOd7WmTGiHw3Go"],[5,132,88]],[5,1,0,-585,[0,"83js61JNhD47HC243JW/zx"],219,220],[6,2,-587,[0,"76NJ2cDylDDKHseAMvmFGf"],[4,4292269782],-586,221,222,223,224],[3,-588,[0,"026up0vTVItoaVPaOz2gg7"]],[4,-589,[0,"422wChQShL45P6CHPqQy09"],[1,132,88,0.01],225],[7,8,-590,[0,"47Z38hNO5AZYuS3eD2jmfm"]]],[1,"e16uJvVUdKKpjX/+DpijYN",null,null,null,1,0],[1,590,0,0]],[15,"switch_english",[-598],[[2,-592,[0,"baWBmX4q5FFbdGgoFsOVG8"],[5,184,88]],[5,1,0,-593,[0,"15V5Bjx79AZrkIpzbMQ4T+"],228,229],[6,2,-595,[0,"b0aRqIFChGMLjvtXtSArI2"],[4,4292269782],-594,230,231,232,233],[3,-596,[0,"09zNt+eZdETrKoP7HHXOQS"]],[4,-597,[0,"fbPQtiJkJCVKfw9GYtPJii"],[1,184,88,0.01],234]],[1,"35cOoI5TxJdp6Rqi4JONWF",null,null,null,1,0]],[16,"switch_chninese",false,[-605],[[2,-599,[0,"cdmBgIunRFy4tLxlR/hGbg"],[5,184,88]],[5,1,0,-600,[0,"f2XwiecjhCq4K6HjfkV5NU"],237,238],[6,2,-602,[0,"72FSI1OYlFeJz/tcYWlyd6"],[4,4292269782],-601,239,240,241,242],[3,-603,[0,"a13X4P3U9Mt4n62tF5ZhAF"]],[4,-604,[0,"efhK/5swpMSaBqUxTrj8i9"],[1,184,88,0.01],243]],[1,"d4GNgvfOVFQqI5ZRQH6RFH",null,null,null,1,0]],[15,"Button_enter",[-613],[[2,-606,[0,"71jhdrn3lOpLbyUSdbQXV3"],[5,184,88]],[5,1,0,-607,[0,"dcfkpeICtB3ZbzDeLt+JOa"],426,427],[6,2,-609,[0,"72CidPcN1JjpFtUneBn1FJ"],[4,4292269782],-608,428,429,430,431],[3,-610,[0,"55pbtChQNGobjrWK96oq+N"]],[4,-611,[0,"dbB4BY9JFCv5BJn5iMGOkT"],[1,184,88,0.01],432],[7,13,-612,[0,"a4TQ7uPUNNEYATPR2s0qrd"]]],[1,"470MEJIZ1BEK5oYBe0pjrN",null,null,null,1,0]],[16,"smiling_left",false,[-620],[[2,-614,[0,"68qeGKS0RI7oknO2yyTaWb"],[5,88,88]],[5,1,0,-615,[0,"acCI0FYGRFj6FYUVLnNebp"],674,675],[6,2,-617,[0,"33pLqwVzZMY53MG5YtDUcR"],[4,4292269782],-616,676,677,678,679],[3,-618,[0,"edTiGAbRtOuYNAS50tfrNg"]],[4,-619,[0,"4fCab4hbpM4IQQH/lMBDNC"],[1,88,88,0.01],680]],[1,"04MuHAAAFCna+GdahaE6X9",null,null,null,1,0]],[16,"smiling_right",false,[-627],[[2,-621,[0,"68YZj+o1NFm6E9fUgmZvVG"],[5,88,88]],[5,1,0,-622,[0,"c66Z4jXjVG2IBy0BF/OpOc"],699,700],[6,2,-624,[0,"558m5ZEBJJubNuCAUHfCgR"],[4,4292269782],-623,701,702,703,704],[3,-625,[0,"00lVsp2ChIXLK8bKmntgkh"]],[4,-626,[0,"08HSIZeRtG7ZlQVKN7TGG6"],[1,88,88,0.01],705]],[1,"29AJjScqdB+4Ewy1A9XpPQ",null,null,null,1,0]],[26,"Button_keyboard",[-635],[[2,-628,[0,"dcHl8joYpDs7VQnhx95YO6"],[5,140,88]],[5,1,0,-629,[0,"3eKJsfmhFJEos1XDOsr9yg"],708,709],[6,2,-631,[0,"07lN8xHg5Io5lk/zg+hpuF"],[4,4292269782],-630,710,711,712,713],[3,-632,[0,"5dGyVWdkZAeok4UApUGdJj"]],[4,-633,[0,"dcxmzYAc9B7YmJ9bQzZrey"],[1,140,88,0.01],714],[7,2004,-634,[0,"e9+oENHLRNuIE72Jxm9LVv"]]],[1,"60Uhdd0K5FKYvxezQNqxz4",null,null,null,1,0],[1,590,0,0]],[26,"num1",[-643],[[2,-636,[0,"9eKyThRfRJir7O96UrUJL4"],[5,88,88]],[5,1,0,-637,[0,"3aio5HqnZCU52CHyXF/0IW"],719,720],[6,2,-639,[0,"a1tzq0RUVLD5/jTjJl17YG"],[4,4292269782],-638,721,722,723,724],[3,-640,[0,"90aY5oZedINIzcViovi4zD"]],[4,-641,[0,"2f7KWqQktIf78W3DS1OciI"],[1,88,88,0.01],725],[7,49,-642,[0,"b3i7ujaSBB0rzDQMRi3iBm"]]],[1,"eas3z+AtRBJLA11/4urZu8",null,null,null,1,0],[1,-104,0,0]],[15,"num2",[-651],[[2,-644,[0,"cfxIapNnBEzptb3DZWO9pB"],[5,88,88]],[5,1,0,-645,[0,"b1peclgI1OwaUXNORCBGzu"],728,729],[6,2,-647,[0,"d27I5PmYNK1rZvEZyX6Dro"],[4,4292269782],-646,730,731,732,733],[3,-648,[0,"38gJAEAvFJ2Z7OHCgCnXpp"]],[4,-649,[0,"f120Vvg1NNwqwyxrvIinBI"],[1,88,88,0.01],734],[7,50,-650,[0,"accZRSuHhBG4wvKFrBikgW"]]],[1,"e97j+K5FRFYIBLfWNMV1D3",null,null,null,1,0]],[26,"num3",[-659],[[2,-652,[0,"54BhP9D5ZDWIEg9ywo7g+u"],[5,88,88]],[5,1,0,-653,[0,"f2ucvRXKVPnarg3ytq74wh"],737,738],[6,2,-655,[0,"09kRDgg1tE4a2Jq3vMPCZ/"],[4,4292269782],-654,739,740,741,742],[3,-656,[0,"12D4VhMOtKl4o6tc3kEGWP"]],[4,-657,[0,"76VmnK+ItNbaZfzJq2P/9H"],[1,88,88,0.01],743],[7,51,-658,[0,"1dqpMN6VlGV6z1Nv+1aEGW"]]],[1,"c49gOGSDdLyYVE0rF1jqqF",null,null,null,1,0],[1,104,0,0]],[26,"num4",[-667],[[2,-660,[0,"788u09KflEjqwZN9sFP+gE"],[5,88,88]],[5,1,0,-661,[0,"45Q0b2aF5JuZNSJ63NzG15"],746,747],[6,2,-663,[0,"24XQYEabxBJJ1shz9mJ/Hy"],[4,4292269782],-662,748,749,750,751],[3,-664,[0,"0aWoK9+DRFPqcPGKOLGiKb"]],[4,-665,[0,"7a14fUWeBPTb9l/XSGOg/i"],[1,88,88,0.01],752],[7,52,-666,[0,"7ci2kadVdOmp/nPFtMF/nG"]]],[1,"06M+/mrLFPHq+ON+/HxaSA",null,null,null,1,0],[1,-104,0,0]],[15,"num5",[-675],[[2,-668,[0,"80xOWP9W9FtaCusEKlB1dn"],[5,88,88]],[5,1,0,-669,[0,"ebV8rn14VHf6bZXF7En73j"],755,756],[6,2,-671,[0,"9dBUmF3eBFcL5d8PERQkfh"],[4,4292269782],-670,757,758,759,760],[3,-672,[0,"56wS+r+hJAAK8Y6Kusnjpf"]],[4,-673,[0,"c2RS8kswZJGZ0N8aKZ2M2Z"],[1,88,88,0.01],761],[7,53,-674,[0,"113+/qQu1D777sRvzPJ5R7"]]],[1,"3fPPki+W5Gl6FsvJ5aiFzM",null,null,null,1,0]],[26,"num6",[-683],[[2,-676,[0,"d9ZZ1jZApECplmNtBgn2C0"],[5,88,88]],[5,1,0,-677,[0,"48N2PD6kxGJKBu7Ws3n2Yk"],764,765],[6,2,-679,[0,"eda6U6fe5E0Z9GzNL2OG8R"],[4,4292269782],-678,766,767,768,769],[3,-680,[0,"5fgy/JFs1JB70l0/mSQbUd"]],[4,-681,[0,"121fuiPsNFD5Qv+zD8L2zc"],[1,88,88,0.01],770],[7,54,-682,[0,"a2RJvbWlJHA57G/xmA5B0U"]]],[1,"ffCbYK3d1MIpkFswuJ6GyZ",null,null,null,1,0],[1,104,0,0]],[26,"num7",[-691],[[2,-684,[0,"f6Mvv3FwxH8Z8M55I4LSsD"],[5,88,88]],[5,1,0,-685,[0,"7bG2q5GcNJTKJAljEQcozk"],773,774],[6,2,-687,[0,"8aPrJ8zT5NfoMoJyZoury5"],[4,4292269782],-686,775,776,777,778],[3,-688,[0,"7bBx7ekMpED5zRhdUgEhU3"]],[4,-689,[0,"6cA71dekVGkqmCuauTa9Mw"],[1,88,88,0.01],779],[7,55,-690,[0,"63jZXpsotEg7Ku6PsuhIFP"]]],[1,"1e10vKXaxO/KZBFgtATnyJ",null,null,null,1,0],[1,-104,0,0]],[15,"num8",[-699],[[2,-692,[0,"7f/Uih4BJBgIhdKeyrSiR5"],[5,88,88]],[5,1,0,-693,[0,"5a7HDxX2NCjIsGeE+MyKRJ"],782,783],[6,2,-695,[0,"8dn/432K1LDrpYq0hds50t"],[4,4292269782],-694,784,785,786,787],[3,-696,[0,"4dhH37iHpLHbiAAFHBCnVY"]],[4,-697,[0,"06n6yvzLFPkLlEagN1OaDW"],[1,88,88,0.01],788],[7,56,-698,[0,"bcM3da+RFEyaNrMoaBhfDv"]]],[1,"24KI/fpilEPpodugjByBAg",null,null,null,1,0]],[26,"num9",[-707],[[2,-700,[0,"ef+RDNaJBP54+33ugOHzVN"],[5,88,88]],[5,1,0,-701,[0,"21bydl9hBCGKMcWqyd+B4F"],791,792],[6,2,-703,[0,"91Bv6pH2VDMqi/zD5/PChH"],[4,4292269782],-702,793,794,795,796],[3,-704,[0,"447xQ2zVRM7aZyAtpyK0Nr"]],[4,-705,[0,"34JKFd+6ZDPLcrWk2nUVTT"],[1,88,88,0.01],797],[7,57,-706,[0,"ff8Efr1itHobLfSfc/6bQF"]]],[1,"5f5GnpWStI4qcRs3V8XJYn",null,null,null,1,0],[1,104,0,0]],[26,"num0",[-715],[[2,-708,[0,"3bYp0VNgJEGKz60lPCQJoH"],[5,200,88]],[5,1,0,-709,[0,"cbXLHavPRMKKPjy3bHiY8r"],800,801],[6,2,-711,[0,"6bWQ7nQEdF/b2daIz+5pC6"],[4,4292269782],-710,802,803,804,805],[3,-712,[0,"90P1iy8yhBw5l+Eoe0Eb5C"]],[4,-713,[0,"1e8vO9Y8VONYak98iMOMSu"],[1,88,88,0.01],806],[7,48,-714,[0,"012VNBbKdAmYwyh3rSeBE6"]]],[1,"99amUzDsdLlK7ZlT8POSze",null,null,null,1,0],[1,-48,0,0]],[26,"dot",[-723],[[2,-716,[0,"6baDXNnF9NIpeRdhraHM4Y"],[5,88,88]],[5,1,0,-717,[0,"74f9OgcMpK/bq6aItIpLlr"],809,810],[6,2,-719,[0,"dffNs1sKZL9ZJHEPFwfrN/"],[4,4292269782],-718,811,812,813,814],[3,-720,[0,"66JmcFnHFPG6LAXlcRHofG"]],[4,-721,[0,"e9iNHq3PlE7btekPv6k6ek"],[1,88,88,0.01],815],[7,46,-722,[0,"9fpwE/UmRKZ7DSJeUaIfPj"]]],[1,"66BV8lW0ZLPZ8GE0+pRLPc",null,null,null,1,0],[1,104,0,0]],[26,"Row4",[-725,-726,-727,-728,-729,-730],[[13,-724,[0,"315nYv1WRDTJ3LxScmJarp"]]],[1,"c532ve7CVNFrZYOqlBrfEO",null,null,null,1,0],[1,0,-168,0]],[26,"Button_voice",[-737],[[2,-731,[0,"68KwMrYNFJLqXQJNKWBxiw"],[5,88,88]],[5,1,0,-732,[0,"b5Nnu0GGxLwbQtQj1jslmW"],647,648],[6,2,-734,[0,"0bs1cgVZtOBrz/66hpEptk"],[4,4292269782],-733,649,650,651,652],[3,-735,[0,"3a2emy7lNM75a8442zAAFp"]],[4,-736,[0,"18fHWGVuFE9pnXchxJDhtx"],[1,88,88,0.01],653]],[1,"4bbIbzVtxEhrhctc/pOTqZ",null,null,null,1,0],[1,-616,0,0]],[26,"Button_expression",[-744],[[2,-738,[0,"83rwWugetKoJDlk8b93P3g"],[5,88,88]],[5,1,0,-739,[0,"82DKJJy2VJA7fdFzCdIbA/"],656,657],[6,2,-741,[0,"44Oba6Kn9MQKWlv8pVEa2a"],[4,4292269782],-740,658,659,660,661],[3,-742,[0,"e3mmDS+NVIO6TdYhTY+Wzu"]],[4,-743,[0,"4cK6LJewZDV5K72jdC9THJ"],[1,88,88,0.01],662]],[1,"59lKXyHH1M1bxHOYio5Pe3",null,null,null,1,0],[1,-512,0,0]],[115,"Button_space",[[2,-745,[0,"79c4JVu/hN1I90Jy5B5BA3"],[5,748,88]],[5,1,0,-746,[0,"d8E+4aIxJDirJjlIHLF+ry"],681,682],[6,2,-748,[0,"ac97IVUCZO65honovb1zau"],[4,4292269782],-747,683,684,685,686],[3,-749,[0,"865+M/Zr5KcZ/DJ2JM8u8d"]],[4,-750,[0,"f6L4B32SJGRbJBXcrCvov5"],[1,748,88,0.01],687],[7,32,-751,[0,"f9v3hf449KzI1uhKLc5l4V"]]],[1,"88bNjezYlDKKLKIoMShAq8",null,null,null,1,0],[1,26,0,0]],[128,"XR Keyboard",false,1,[-755,-756,-757],[[[2,-752,[0,"71lEp9LzdEnZM4c1XOUQzr"],[5,1726,552]],[46,-753,[0,"65KfxWQWFESaD3MKGVnJHQ"]],-754],4,4,1],[1,"c94/qDKTlIh4vO7jPg9vem",null,null,null,1,0],[1,1.7763568394002505e-15,-95,50],[3,-0.21643961393810288,0,0,0.9762960071199334],[1,0.24,0.24,0.24],[1,-25,0,0]],[14,"Background",90,[2,3,4,86],[[2,-758,[0,"1agyJQ17tGd55jSIhcNwrb"],[5,1368,472]],[5,1,0,-759,[0,"e1HB++sRJNuZyU5rL7JCVl"],715,716]],[1,"afjP5ZIkNOopOLr5+LUft1",null,null,null,1,0],[1,179,-40,0]],[14,"Num Background",90,[-762,-763,-764,-765],[[2,-760,[0,"caPcmvZtRPW7UjuaAeyxhx"],[5,334,472]],[5,1,0,-761,[0,"19U9U2xONAK7xXYLLYoE/x"],816,817]],[1,"dfLQcT8MZKZKgAPS5oitxj",null,null,null,1,0],[1,-684,-40,0]],[14,"input",90,[-768,-769,-770],[[2,-766,[0,"44HUqSUP5NDYf/Q4GRpvSr"],[5,1368,80]],[9,0,-767,[0,"4f8t2jBfNAM6FNoh2uvYua"],6,7]],[1,"97LvP2TnZMBZWUAp41+0s0",null,null,null,1,0],[1,179,236,0]],[116,"input",93,[-775],[[2,-771,[0,"39JjzMfGhHaKqZCqA/cknz"],[5,2048,96]],[3,-772,[0,"55toPw7EZHR49wuRpaMc+y"]],[4,-773,[0,"98S9YAhe9KxrK9HmBiLy0k"],[1,2048,96,0.01],5],[190,-774,[0,"08Iv/jLU5JhLr2zcBZxCcr"]]],[1,"06KLcE0NZGGbA7CrIKiCmG",null,null,null,1,0],[1,0.58,0.58,0.58]],[14,"button_1",2,[5,31],[[13,-776,[0,"c2RIxx27pENJ8u/y9kyviV"]],[17,-777,[0,"22hLFAYOBH8Iklpq4hoI6G"],5,31]],[1,"424LvLviVF+rWWhmgOHmi6",null,null,null,1,0],[1,-468,0,0]],[14,"button_2",2,[6,32],[[13,-778,[0,"c2XoN+AnNJ3pF0YLioV04v"]],[17,-779,[0,"c16BX6wURL1JVm5s4avdck"],6,32]],[1,"87Sp9BEgxHprFMjiOjw5Dq",null,null,null,1,0],[1,-364,0,0]],[14,"button_3",2,[7,33],[[13,-780,[0,"70pcVh9DpONbeuBidY1Sq5"]],[17,-781,[0,"808Zeg+N1AFZq/n6r95TiZ"],7,33]],[1,"4dAXnmu5lIdJE7m+Bz0oHQ",null,null,null,1,0],[1,-260,0,0]],[14,"button_4",2,[8,34],[[13,-782,[0,"82S7esJDZB5owGOQRLHTqB"]],[17,-783,[0,"361wCtulNNgqmwHD3Fenlh"],8,34]],[1,"867yy9FZBF5ZkMk7NfD0I7",null,null,null,1,0],[1,-156,0,0]],[14,"button_5",2,[9,35],[[13,-784,[0,"f94LDxO3BPn45KgnSZ/fTH"]],[17,-785,[0,"95gg7y0XpMa6fmnEfwAnjL"],9,35]],[1,"0bigXlkkNFfL6KsOm19gdH",null,null,null,1,0],[1,-52,0,0]],[14,"button_6",2,[10,36],[[13,-786,[0,"dc0sDhHXlNB7lkgIeA+8+B"]],[17,-787,[0,"f9JYxmu/ZO6aDQxWnVsCV/"],10,36]],[1,"7coCKbVf5PjKg23iG3pDSR",null,null,null,1,0],[1,52,0,0]],[14,"button_7",2,[11,37],[[13,-788,[0,"b42QPBDiJBi5CB5I3t48sx"]],[17,-789,[0,"9dxk54UmxOT56XL3Yh5SMR"],11,37]],[1,"f3Lv31Cn5KbIG3EfwHA+cP",null,null,null,1,0],[1,156,0,0]],[14,"button_8",2,[12,38],[[13,-790,[0,"e1EBGA5DNCaaDsDqx1WkGh"]],[17,-791,[0,"e75lP6SP9IFp5dLt3p7/Tw"],12,38]],[1,"e6OGGz+3NANLYexlbgdWVC",null,null,null,1,0],[1,260,0,0]],[14,"button_9",2,[13,39],[[13,-792,[0,"15PH08zaBCXqlNNks8D3fk"]],[17,-793,[0,"09ZiujmmFCC5naIWjal3Dr"],13,39]],[1,"98r+4DVkxFCr5jBdDtYE8v",null,null,null,1,0],[1,364,0,0]],[14,"button_10",2,[14,40],[[13,-794,[0,"a00PF+gzJK4ZhK1uPi6yZO"]],[17,-795,[0,"faotV53b9DX6P93oFqyVRM"],14,40]],[1,"66VosJC9tJDbpnp5wJlO1u",null,null,null,1,0],[1,464,0,0]],[14,"button_0",3,[69,70],[[13,-796,[0,"3ejiwfyA9JpIB+ey5h02pD"]],[17,-797,[0,"5cW011HvpPTZK9JoAJaYbj"],69,70]],[1,"f9CoMIjsZMCqVv71RzfjHn",null,null,null,1,0],[1,-568,0,0]],[14,"button_1",3,[15,41],[[13,-798,[0,"b1FyvXpXZGn5kvysmL1AKF"]],[17,-799,[0,"d1FMiG76xCDLyYMap4Pa8S"],15,41]],[1,"cdva+6LN9JrpxXdTudsqWF",null,null,null,1,0],[1,-416,0,0]],[14,"button_2",3,[16,42],[[13,-800,[0,"f8TB+c4PFH5Ki7HJkgOpyf"]],[17,-801,[0,"05/g06Kc1Bta4jXc7XsA0+"],16,42]],[1,"a6/VykG5dCL7TTXkhKHa9c",null,null,null,1,0],[1,-312,0,0]],[14,"button_3",3,[17,43],[[13,-802,[0,"7bwAIDfMBD6a2wOvyZj+cL"]],[17,-803,[0,"1d+YCTo0BKgITgd8t5C89M"],17,43]],[1,"6e+JwczmpN2JGqPl5opoQA",null,null,null,1,0],[1,-208,0,0]],[14,"button_4",3,[18,44],[[13,-804,[0,"d2/jC8pMZLw6L8WHKfmsak"]],[17,-805,[0,"793DQfh8VA0YgaccgahKbT"],18,44]],[1,"ecJxN6AtFI+qJ78I3ph//e",null,null,null,1,0],[1,-104,0,0]],[42,"button_5",3,[19,45],[[13,-806,[0,"e4DOH5hXhE2ZrMhhSoQRgJ"]],[17,-807,[0,"9efQ4yn+pClK5cowA8ClPp"],19,45]],[1,"37irCt2ZNN9LvlHCz83PYA",null,null,null,1,0]],[14,"button_6",3,[20,46],[[13,-808,[0,"66YGUZ1ilMIo4ODhZW3d8b"]],[17,-809,[0,"48n1S3bHVAkJhj0qAqhnxl"],20,46]],[1,"bcaWYoAkBL9o9X9vFg252V",null,null,null,1,0],[1,104,0,0]],[14,"button_7",3,[21,47],[[13,-810,[0,"38XgD0PUhM84MJIZGQKDm2"]],[17,-811,[0,"45QbsLG3dBMZwhAF/CJt2u"],21,47]],[1,"6a9zxirKJBW6mCSk95WH9c",null,null,null,1,0],[1,208,0,0]],[14,"button_8",3,[22,48],[[13,-812,[0,"5c0+lcJJhK27tbUNXp4gXs"]],[17,-813,[0,"d8dhWLyKxAPoPcZlCWYp67"],22,48]],[1,"d4ENDBRlhBpp2AqBYtXUaR",null,null,null,1,0],[1,312,0,0]],[14,"button_9",3,[23,49],[[13,-814,[0,"52HI39KFlKSat4+os+g0lI"]],[17,-815,[0,"57DCm+zBRK4oRQsANI+1xI"],23,49]],[1,"d82q2UkdlD9aW0K/YLmqpG",null,null,null,1,0],[1,416,0,0]],[14,"button_0",4,[50,51],[[13,-816,[0,"08tL5wW+5H4461ZSjlaEIA"]],[17,-817,[0,"c8udDwPv9PN6CW64JlkPjk"],50,51]],[1,"95Jiu27C5IhpYCy7JlzXXZ",null,null,null,1,0],[1,-546,0,0]],[14,"button_1",4,[24,52],[[13,-818,[0,"07nR1lGFhAQrPX49Gj397I"]],[17,-819,[0,"a7SboL8+lCqakYK5JEO9Ue"],24,52]],[1,"5fOQ6HEINH3ZqNS74CDPdt",null,null,null,1,0],[1,-372,0,0]],[14,"button_2",4,[25,53],[[13,-820,[0,"2bDPXPbX9CE6k/yPRRm9SQ"]],[17,-821,[0,"2eBQh1MnNMkZEb/sS0pdjs"],25,53]],[1,"19As5jp2tAJLFlwphKRbDa",null,null,null,1,0],[1,-268,0,0]],[14,"button_3",4,[26,54],[[13,-822,[0,"45kev8TgJJhY6dSXA2QQIr"]],[17,-823,[0,"1anaUYR99PJ5/DmF6TKyys"],26,54]],[1,"e8NDVkDL5FOpN2Oq3dVHA3",null,null,null,1,0],[1,-164,0,0]],[14,"button_4",4,[27,55],[[13,-824,[0,"c0Bgg47CBEiqrJk2pUKmTQ"]],[17,-825,[0,"0452tiwmxEA65IyN8Vi/VJ"],27,55]],[1,"cdKARjmFxLKJUPD5dLQrVY",null,null,null,1,0],[1,-60,0,0]],[14,"button_5",4,[28,56],[[13,-826,[0,"f7hrbs3SVDpLjO2B6D8Bai"]],[17,-827,[0,"16jbjnSoNK5qiFSFU0mx/Z"],28,56]],[1,"c86whqf2NBK5wJXmDq3Y85",null,null,null,1,0],[1,44,0,0]],[14,"button_6",4,[29,57],[[13,-828,[0,"cbKLP3aehBuq2JjO26bk+/"]],[17,-829,[0,"b2FaKMgGJKJJCWEKpTinWM"],29,57]],[1,"5bmX7ApDxJKr6ruIHUwad7",null,null,null,1,0],[1,148,0,0]],[14,"button_7",4,[30,58],[[13,-830,[0,"a4FpA4thZN/ZWmq9uwdSQe"]],[17,-831,[0,"88pHhKZ6BDiIDJK4KE4GU+"],30,58]],[1,"22GB3nstJDpYKNIdnqqTiS",null,null,null,1,0],[1,252,0,0]],[14,"button_8",4,[59,60],[[13,-832,[0,"06cW81GOVF0oX1B1g3eHpe"]],[17,-833,[0,"4ax82WneZC/JzJd27yjaaE"],59,60]],[1,"93Kqh1Vn5IG5+zBFNkc1iy",null,null,null,1,0],[1,356,0,0]],[14,"button_9",4,[61,62],[[13,-834,[0,"4dY9ADARBLYa6opWQ33bzU"]],[17,-835,[0,"341baiYlFFHIaSu6joHBig"],61,62]],[1,"6fMI5o17NDLJHwuJpxOH3+",null,null,null,1,0],[1,460,0,0]],[14,"button_10",4,[63,64],[[13,-836,[0,"03UA1N1lZBzIBJQslsORUg"]],[17,-837,[0,"6dmUTBuoZJJpUuH7wPHbtS"],63,64]],[1,"45LrsxJlhBWZXkfJMbcf/U",null,null,null,1,0],[1,590,0,0]],[14,"button_2",86,[65,72],[[13,-838,[0,"c8FoNF33RBwrGXOx1zNJBk"]],[17,-839,[0,"e28rwi1y1Bw7IPEkJmknxz"],65,72]],[1,"2fehP8g11KfYy7Tnt6wD/X",null,null,null,1,0],[1,-408,0,0]],[14,"button_4",86,[66,73],[[13,-840,[0,"0dumu5Ih9FS5lnS7B+2pa/"]],[17,-841,[0,"99EbvKq1ZBM5H4btTaIDZv"],66,73]],[1,"f5hGYgjQVPcZ19Vd3IdizQ",null,null,null,1,0],[1,460,0,0]],[14,"Row1",92,[75,76,77],[[13,-842,[0,"fdOyfjTGBD7LzOLYpLBSYs"]]],[1,"f1/NoZfRBBLqohO5XrqLSB",null,null,null,1,0],[1,0,168,0]],[14,"Row2",92,[78,79,80],[[13,-843,[0,"3cfZrn4g1IpKL0dQyLwIRz"]]],[1,"fc9ZICc3VPxbNCaasRIQiW",null,null,null,1,0],[1,0,56,0]],[14,"Row3",92,[81,82,83],[[13,-844,[0,"84xXxca75B4bN0pSsTotmX"]]],[1,"f7vYmdNv5O75vw7WvVSwvt",null,null,null,1,0],[1,0,-56,0]],[14,"Row4",92,[84,85],[[13,-845,[0,"5cOtaEQgBDuq8ydpQE8V89"]]],[1,"fbX76sJipBPYw3mdnSGYFQ",null,null,null,1,0],[1,0,-168,0]],[129,"TEXT_LABEL",false,8388608,1,[[[52,-846,[0,"06is3+ix5CuLfLwuGUmTTL"],[5,158,40],[0,0,1]],-847],4,1],[1,"b6TfIiVrZNMIRtT4+14iBV",null,null,null,1,0],[1,-78,20,0]],[130,"PLACEHOLDER_LABEL",8388608,1,[[[52,-848,[0,"e4aipQDypN2LYviZDqK10W"],[5,158,40],[0,0,1]],-849],4,1],[1,"4c9+gTM19ICaEwVrG9bIyb",null,null,null,1,0],[1,-78,20,0]],[24,"line_left",93,[[2,-850,[0,"94LjiRPMFDbpBeFwAZBQmo"],[5,2,56]],[9,0,-851,[0,"12htkJqrZL5Ka56fm4mBuF"],0,1]],[1,"01SnwmJMVKqK3MCNOwDFpi",null,null,null,1,0],[1,-594,0,0]],[24,"line_right",93,[[2,-852,[0,"45OevjfKtA4r8CJWx0IkZ2"],[5,2,56]],[9,0,-853,[0,"e1fHLHvhtLP47e5b33HJmT"],2,3]],[1,"14c8Jv7nNBipeEslcWtQ6O",null,null,null,1,0],[1,594,0,0]],[24,"Label",94,[[52,-854,[0,"12v3dZaXxGp4iFvCs4WH/0"],[5,0,95.76],[0,0,1]],[171,"",2,76,76,76,false,-855,[0,"a2jXwTpelAbI9FT6/lBxDg"],4]],[1,"a3Atqem2RD94QIFN2DEMqI",null,null,null,1,0],[1,-1024,48,0]],[42,"button_0",2,[67],[[13,-856,[0,"9eg7f3HnxOmaYoHo3F13yM"]]],[1,"a9ZXcfSD1PhKc55CNcfnH6",null,null,null,1,0]],[8,"symbol",67,[[2,-857,[0,"12myl4PCtAcre6g2w2tlBW"],[5,58,28]],[9,0,-858,[0,"55ykX/huRNrakR1Q1AZaPi"],8,9]],[1,"5bxLKt9DhO8aRQgyCljPWD",null,null,null,1,0]],[24,"lower",5,[[2,-859,[0,"46ac3WZ2RPTYP7RIEXRD3c"],[5,24,32]],[9,0,-860,[0,"bbxVTsVKtLxpDXeRIzFZ0q"],17,18]],[1,"6aLu3tBDxDM7fsf71MuXp/",null,null,null,1,0],[1,0,0,0.01]],[20,"capital",false,5,[[2,-861,[0,"f5/z3J9IxN4JsUMtewA/bZ"],[5,32,36]],[10,-862,[0,"ccr4i6ubxBgJxQnZ1Ooh1o"],19,20]],[1,"59UrhM03pI5YKfoQpw5t9C",null,null,null,1,0]],[24,"digit_1",31,[[2,-863,[0,"b2in2GsvFN44ji2CVvBGlF"],[5,8,32]],[10,-864,[0,"c9Xqc80SBP/J1Sf6IlhWih"],28,29]],[1,"1feRMzc5ZL7KyzeA/w2lw1",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",6,[[2,-865,[0,"e8i2y9tDlF7LCDp63ObTeU"],[5,34,24]],[9,0,-866,[0,"3757j0AHJB+JNZeKzprwyC"],37,38]],[1,"c4YkiL22dJpJf2I2u2ODIL",null,null,null,1,0]],[20,"capital",false,6,[[2,-867,[0,"7bw7uTO41EQrOXHp0TJP8X"],[5,40,32]],[10,-868,[0,"b7kQ9oTktBVpaVmnZbrzdd"],39,40]],[1,"88uUTugNZEyatYUc48bDWV",null,null,null,1,0]],[8,"digit_2",32,[[2,-869,[0,"038GN21CNOArl/vClgtUrJ"],[5,34,34]],[10,-870,[0,"f07OCzJ4FGpJn61ha+m0Gv"],48,49]],[1,"9abZihXtdHF4dW/T3/K7P3",null,null,null,1,0]],[8,"lower",7,[[2,-871,[0,"a2wFqKjY1IDagtegYQfRd+"],[5,24,26]],[9,0,-872,[0,"e3GeVOecNDu7pMHl4Bd2h8"],57,58]],[1,"b72f8S+B1OUrqhBcaUUi2j",null,null,null,1,0]],[20,"capital",false,7,[[2,-873,[0,"53TAcCUD1PEaTB/ytiZ9G8"],[5,24,32]],[10,-874,[0,"1bgvvpiQ1D97l8JzlYIi3D"],59,60]],[1,"a07iQhGgBFB7T6eCAsHISB",null,null,null,1,0]],[8,"digit_3",33,[[2,-875,[0,"0d0jWXF9dAiJ3PjoKXrLrP"],[5,24,32]],[10,-876,[0,"59tv7tnZJIaaLQYneDLW2c"],68,69]],[1,"6dd18FNXxMkK0vz/TG1V3F",null,null,null,1,0]],[8,"lower",8,[[2,-877,[0,"32kFJYKg5N/LlIfR8jqYuL"],[5,16,24]],[9,0,-878,[0,"d9GPS3JiFNA7dVvcehSJzI"],77,78]],[1,"7fypONeohIwZHqilEoqcCS",null,null,null,1,0]],[20,"capital",false,8,[[2,-879,[0,"4a8VZ8M91MDZ2SlkQWcmiZ"],[5,28,32]],[10,-880,[0,"d7RDif1BVN9KkNDMx4VHVc"],79,80]],[1,"dfVMbvJ2hDs7ZJicaYPymJ",null,null,null,1,0]],[8,"digit_4",34,[[2,-881,[0,"eevnUzUlZBr6iUHgZjgcM7"],[5,24,40]],[10,-882,[0,"6e2zf1iOZGyKYUc7oETtSB"],88,89]],[1,"4bCLiIlqtIrr0DFaSIEbx0",null,null,null,1,0]],[8,"lower",9,[[2,-883,[0,"df3QTxhXBDP7/5KYeoxZ+X"],[5,16,30]],[9,0,-884,[0,"ef4WaziMNFi69UKv5DV+Tr"],97,98]],[1,"c1J/ZoRUlD3ILYHIqlSFrb",null,null,null,1,0]],[20,"capital",false,9,[[2,-885,[0,"52aNynChBNpowmYeHz0kck"],[5,26,32]],[10,-886,[0,"2aF0ANLoNPC48WXTlmKJn+"],99,100]],[1,"f0MZRLYMVOR5Va2dMnQgYk",null,null,null,1,0]],[8,"digit_5",35,[[2,-887,[0,"cezEj5xrFMfo4FQ+BLscUU"],[5,38,34]],[10,-888,[0,"30i+drpTxGHYHkrfFwhmCS"],108,109]],[1,"336uEW3C1HXYCXaRn6XIoj",null,null,null,1,0]],[8,"lower",10,[[2,-889,[0,"78WsR7SK5GGoBc8cbO9py7"],[5,24,32]],[9,0,-890,[0,"92ScU9QRFFxqEa+nlRxO7Y"],117,118]],[1,"23+enKvAJFRoIFoU79RD90",null,null,null,1,0]],[20,"capital",false,10,[[2,-891,[0,"04Bb+kNFpKZ7zWQtUnVGFM"],[5,30,32]],[10,-892,[0,"53lRDtxNlDl7uV0kDGDX8A"],119,120]],[1,"58AfzHhfpPwaKyjH2zOo7U",null,null,null,1,0]],[8,"digit_6",36,[[2,-893,[0,"8a2shYwjhPr6UAoktZx3WZ"],[5,20,18]],[10,-894,[0,"96Zt/mBNxEBazRVChsJMLg"],128,129]],[1,"857hg4pZRHNZ71GCi7j/+r",null,null,null,1,0]],[8,"lower",11,[[2,-895,[0,"64tvDtxllMEoDlvIRBrkb2"],[5,22,24]],[9,0,-896,[0,"6df2g6BtBHj7gKSwq1vP5a"],137,138]],[1,"91+hWhlUtJyp3HZmrYtrX4",null,null,null,1,0]],[20,"capital",false,11,[[2,-897,[0,"daFsAOTipCOZBuul/4jUwJ"],[5,28,32]],[10,-898,[0,"50gluih8NIFbCS7n+kniXA"],139,140]],[1,"4cAGNrT4hN+IAh5fzMJwLA",null,null,null,1,0]],[8,"digit_7",37,[[2,-899,[0,"f957S63RFCF4Bj7zxDobYS"],[5,30,34]],[10,-900,[0,"30dd//msxES6j2Pa7Nbod+"],148,149]],[1,"02CYnnPF5AKLvffb6LurPf",null,null,null,1,0]],[8,"lower",12,[[2,-901,[0,"6dXxb/+6ZN6JTcjvTIHgBt"],[5,10,32]],[9,0,-902,[0,"c14DYhOkRHnrkfxoHY5GNp"],157,158]],[1,"0fJGedfINGeoUWKDQyHPf7",null,null,null,1,0]],[20,"capital",false,12,[[2,-903,[0,"04RPmf9jJFJp4+d/MbGfx7"],[5,8,32]],[10,-904,[0,"bfo/E+eH9APaeJ/IIKfA9F"],159,160]],[1,"45FRSC85BIQZDPR5Zw5Sam",null,null,null,1,0]],[8,"digit_8",38,[[2,-905,[0,"91itNajxJKSbrRbliKvTth"],[5,22,20]],[10,-906,[0,"3bH/cHQYdNLJFQDaxu7NYW"],168,169]],[1,"2eqOr2mbhNE7G9Cd9OInSJ",null,null,null,1,0]],[8,"lower",13,[[2,-907,[0,"06dAUfvK9CMqrYO1fgSOoq"],[5,24,26]],[9,0,-908,[0,"03ktiPvSVEVrStOBLzmhSv"],177,178]],[1,"9eJ9JafAlL2YJJyTi/OU9w",null,null,null,1,0]],[20,"capital",false,13,[[2,-909,[0,"bbCSloKqdP6opSUgNr3lvi"],[5,32,34]],[10,-910,[0,"8emv05N5dIz4BaWviY7Yx8"],179,180]],[1,"50NZH6fSBG07odVWd/b8pV",null,null,null,1,0]],[8,"digit_9",39,[[2,-911,[0,"412Ib9zZ9Fv7oy3dLjMxrP"],[5,12,42]],[10,-912,[0,"05cX6ND6BC04BtPfgHpQ86"],188,189]],[1,"2eWqrGYTBG/5Mob72beooz",null,null,null,1,0]],[8,"lower",14,[[2,-913,[0,"148mYh+tZGH4WHK1+VL/xA"],[5,24,32]],[9,0,-914,[0,"32+MFG0ShJ84EZSXOuyLTB"],197,198]],[1,"faB79XA21Pc4msmpLJkm8i",null,null,null,1,0]],[20,"capital",false,14,[[2,-915,[0,"b61rKQ9yJEx72Ut1k+SidH"],[5,26,32]],[10,-916,[0,"f3lnunX+dGSZ86c84rqy/W"],199,200]],[1,"39oBw+HKxLEoW6S+MOpVsy",null,null,null,1,0]],[8,"digit_0",40,[[2,-917,[0,"16rv6fQjxF573JBLMRxuVp"],[5,12,42]],[10,-918,[0,"c9X+WqhBhIfIhdg2dLXSRp"],208,209]],[1,"26i/3J2ydLeb/PLi8BIxHn",null,null,null,1,0]],[8,"symbol",68,[[2,-919,[0,"b17LfWJKVAi6NxtJYOPaqM"],[5,42,30]],[9,0,-920,[0,"6beRppGk5LQ5kV2E8tVgUG"],217,218]],[1,"17DQzZGM5FQKEhwMrhSAiy",null,null,null,1,0]],[8,"symbol",69,[[2,-921,[0,"98Bjz5SoBDw5TSMJodwSnp"],[5,70,34]],[9,0,-922,[0,"156MM6nWtCKbDQOCFGmZdB"],226,227]],[1,"fcqb3c5plO6YajXuEvsJXb",null,null,null,1,0]],[8,"symbol",70,[[2,-923,[0,"27Stj9pxZCp6BM9r/x/Ob8"],[5,70,34]],[10,-924,[0,"6fo3csvh9PAbPvEd0JvIYk"],235,236]],[1,"7chF+QzXZITYlU0guN8X8G",null,null,null,1,0]],[8,"lower",15,[[2,-925,[0,"ccauAEnNlAr4JuUEJoZpIQ"],[5,22,26]],[9,0,-926,[0,"06HYQTjK9I2pmMKUSEW4Tn"],244,245]],[1,"65Iyich0ZIbZ5lW+7qq2cJ",null,null,null,1,0]],[20,"capital",false,15,[[2,-927,[0,"66kF/ynf1LBLS3wNhcBHRq"],[5,30,32]],[10,-928,[0,"b5ifeEKYpB/ZAn9Q+Hdvrz"],246,247]],[1,"d7Uw1lNiFE+aPiIUUEBNmi",null,null,null,1,0]],[24,"bt_1",41,[[2,-929,[0,"dfhB5qZWtL1pvLmbU5/dbq"],[5,24,24]],[10,-930,[0,"e7ahhCo0dIIZ1ENsoEuNpI"],255,256]],[1,"3bu+5zaeVODpu2kv5+ScCf",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",16,[[2,-931,[0,"eb+0WNE41ICqJq6MD2QjEM"],[5,24,32]],[9,0,-932,[0,"1bzIdO/KxJLoczDyzwQXNx"],264,265]],[1,"46QUEMOgRJ17TkOfWuhy50",null,null,null,1,0]],[20,"capital",false,16,[[2,-933,[0,"bb4qfMZ5FNar8oKzbTG8ZL"],[5,26,34]],[10,-934,[0,"c3Duu7/ERFrq0YiXZJ3ff+"],266,267]],[1,"ddJUIqwvFHhIxg802FGI/G",null,null,null,1,0]],[24,"bt_2",42,[[2,-935,[0,"affO8PS65K2LxWht17Pefs"],[5,24,8]],[10,-936,[0,"42YSHXzTVCo5uuMZVWc9Jo"],275,276]],[1,"37BuM45GhOYoZjuEZn8wE0",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",17,[[2,-937,[0,"d2G1RD60RC276lPrAH4tiJ"],[5,24,34]],[9,0,-938,[0,"39yRRAElFHp5JQtuE/X/Hk"],284,285]],[1,"03+4zeMoRDu7O3Sm1yqUF0",null,null,null,1,0]],[20,"capital",false,17,[[2,-939,[0,"7fUpgttThIA4NGi/5P2E99"],[5,28,32]],[10,-940,[0,"9aJev2UmVEja3jdJC+y5d1"],286,287]],[1,"4cwdInjepIsb9KKOAEXaGb",null,null,null,1,0]],[24,"bt_3",43,[[2,-941,[0,"bbEjLygG1D4LGbjRN+Ynj6"],[5,24,16]],[10,-942,[0,"ba5DwKhQxHx5/Ph72/U5MR"],295,296]],[1,"75FGy9NfxMSZi+lpNr3ec0",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",18,[[2,-943,[0,"de/qqizNhCV6Ev8kqnLUio"],[5,18,32]],[9,0,-944,[0,"6eFRsIi29KBbMulP3/ZUhK"],304,305]],[1,"98j+o6T+1PhLaO3KemTsh7",null,null,null,1,0]],[20,"capital",false,18,[[2,-945,[0,"888OnCw4FNFLra8BtXCHC4"],[5,24,32]],[10,-946,[0,"4eijRiHnhBjqQKqYnDLDus"],306,307]],[1,"a4iNEs7DlMjKAbRdRLS5//",null,null,null,1,0]],[24,"bt_4",44,[[2,-947,[0,"cas8vaDDBGt4KvT8zAatSc"],[5,14,42]],[10,-948,[0,"11CtYvJbJD/KhOr0rL8PtY"],315,316]],[1,"336J+DLWxBf6OLDu/RaTSh",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",19,[[2,-949,[0,"285u8n18FOO77Vs/42iKy1"],[5,24,34]],[9,0,-950,[0,"2ebv++OyhPZ5FAFVzqoPaS"],324,325]],[1,"e0Fy4f9GRO5rv7WuFDrKzw",null,null,null,1,0]],[20,"capital",false,19,[[2,-951,[0,"fdCnb6twJLy59kccYokPHf"],[5,30,34]],[10,-952,[0,"c8sy4wSSJCN4DqGF2o9N0x"],326,327]],[1,"794bbalURPD5WBFH6X+JHG",null,null,null,1,0]],[24,"bt_5",45,[[2,-953,[0,"8b5giBIHxKDINPvDlennDa"],[5,14,42]],[10,-954,[0,"6fgWlERKtIYIBe/CXAuKHo"],335,336]],[1,"44FaBgoKZBRageAFe8JWpq",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",20,[[2,-955,[0,"b6s9vO3Z9DdL2eQvkzdi0O"],[5,22,32]],[9,0,-956,[0,"a7cG7u9v1N57rQkyqNMeGu"],344,345]],[1,"b4UHCNk5JJdqRTbFnUVF57",null,null,null,1,0]],[20,"capital",false,20,[[2,-957,[0,"35OZupzfJMlrtj/2UN4nOi"],[5,28,32]],[10,-958,[0,"cbbIzyU2hJsajZqqjE8N6H"],346,347]],[1,"00EoIKdlJCUJ7Kef8DElTu",null,null,null,1,0]],[24,"bt_6",46,[[2,-959,[0,"57xR1Bh+RGr74SVIS8A5B/"],[5,16,42]],[10,-960,[0,"eePfDJE8NGJJOibjY6PPwI"],355,356]],[1,"850UY4OehNLa9gK8zFPOz4",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",21,[[2,-961,[0,"afhBd+WglKHrwLGzhaC1my"],[5,12,40]],[9,0,-962,[0,"b6GFgvTVRMk57TAeqkE9K8"],364,365]],[1,"fd1EZR7zJKepYc8897HeZ7",null,null,null,1,0]],[20,"capital",false,21,[[2,-963,[0,"25pLHYsABDCoOOyBy85MCi"],[5,22,32]],[10,-964,[0,"03qSMpMwtBAb3CgkggyX78"],366,367]],[1,"77VhsF0VZFmYTQVYO4x6rN",null,null,null,1,0]],[24,"bt_7",47,[[2,-965,[0,"7cgr0bJ/FNiLLoI6lMM/Ms"],[5,16,42]],[10,-966,[0,"67tFdkEhVLDYiM/ZjIPHt7"],375,376]],[1,"c11XvBw/RLJ54BN9mdQk4q",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",22,[[2,-967,[0,"cbbLzZpf9Gwr1TfQkBmtak"],[5,22,32]],[9,0,-968,[0,"c91lVZz2NANoYwt0P7inYp"],384,385]],[1,"bcmDT01edJVo3+pJYs2s3u",null,null,null,1,0]],[20,"capital",false,22,[[2,-969,[0,"86dchsk6hMqr5VZGgoRRRU"],[5,30,32]],[10,-970,[0,"192Drgl1hB5aQNjiwf0OGz"],386,387]],[1,"1c37uowMVHGoEbuw6g576y",null,null,null,1,0]],[24,"bt_8",48,[[2,-971,[0,"8eZan8PPtOfqG6OwXKhljz"],[5,6,44]],[10,-972,[0,"8br/W6tDtNGJjK8zFzVySN"],395,396]],[1,"941V43uyVKppkq+5os2124",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",23,[[2,-973,[0,"a4MgIuNp5Exp6lpESFm0BY"],[5,8,32]],[9,0,-974,[0,"ccVy7Try1D+YDVflewLwC3"],404,405]],[1,"f3T2g1DQJIrL9zcV0RvUe+",null,null,null,1,0]],[20,"capital",false,23,[[2,-975,[0,"92M1CrC/lC8JgHnt+AAtIE"],[5,24,32]],[10,-976,[0,"6a/x1vhKlME4T2tBwrXuKQ"],406,407]],[1,"77vYN1ASlI56IL9FElp7Z6",null,null,null,1,0]],[24,"bt_9",49,[[2,-977,[0,"b03N2EkN1Jmr7xnN8ZYyBG"],[5,20,40]],[10,-978,[0,"6b7foh0NtGGb/YgjDYAFax"],415,416]],[1,"39xN2TldBJMbEhV1pwaI+H",null,null,null,1,0],[1,0,0,0.01]],[14,"button_10",3,[71],[[13,-979,[0,"e6ap3nQ31H3pZnyluUKgjS"]]],[1,"8eBSik9oRBF5dgEVrZgnFP",null,null,null,1,0],[1,568,0,0]],[8,"symbol",71,[[2,-980,[0,"3bgLJxPcVDYpKKcVAxpjNh"],[5,78,26]],[9,0,-981,[0,"03C7RaYQdIjZ+wp98PBJfW"],424,425]],[1,"49M+wEihRBsICdUVT28ynE",null,null,null,1,0]],[8,"symbol",50,[[2,-982,[0,"3chhYHceZI9IOb709dNBjm"],[5,38,36]],[5,1,0,-983,[0,"dcC6FxcoNKprB2q+pZXcSS"],433,434]],[1,"42QWIRyDRCLLh763ZqJPjW",null,null,null,1,0]],[8,"symbol",51,[[2,-984,[0,"a1G4OGVDtME6gYEsn/JLyR"],[5,68,28]],[68,1,-985,[0,"f5XQUdaJFCSqrtG6K9++a3"],442,443]],[1,"a7RHcxAopJWKNwJCHg702I",null,null,null,1,0]],[8,"lower",24,[[2,-986,[0,"7a0IJypxtJEZmaQ+Mbnd7w"],[5,22,24]],[9,0,-987,[0,"44g97D211Bk6GWfnYir/8k"],451,452]],[1,"40Q7Ksae1LZKYLI9/6LpUw",null,null,null,1,0]],[20,"capital",false,24,[[2,-988,[0,"a1UF7pV21BXKiG/IOWo/WR"],[5,26,32]],[10,-989,[0,"59JZSGvylLl4vbuW7KNk5E"],453,454]],[1,"ebwVYc3BlPqKFWwQz5//uc",null,null,null,1,0]],[24,"bt_1",52,[[2,-990,[0,"demEIUmD1AJ7wMGqkHgTY0"],[5,88,88]],[54,2,false,-991,[0,"7bfFGxtBpPfoQdJtUgrxkr"],462,463]],[1,"41zkEowX1Ifardtw6/N7S5",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",25,[[2,-992,[0,"0d8cLYUYNFZLi0qQCcFIKd"],[5,24,24]],[9,0,-993,[0,"19h+GNalNP/5PGnTY+I0mY"],471,472]],[1,"207TSLUwBHerogNsh2ZcRh",null,null,null,1,0]],[20,"capital",false,25,[[2,-994,[0,"48EygcPSJIYb2En1VqzseT"],[5,28,32]],[10,-995,[0,"85zTFY7s1B2bJ6hONJoicE"],473,474]],[1,"45qeBm1UdF6InT0/uyUx7R",null,null,null,1,0]],[24,"bt_2",53,[[2,-996,[0,"efDu1SQ6ZOUYSlBYd/7fYF"],[5,88,88]],[54,2,false,-997,[0,"4dPwSwFYdPrajnz67YeG7v"],482,483]],[1,"d1LNhcj/5J/q2J4v8uro/V",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",26,[[2,-998,[0,"55p+TuO0VDO4N/LJyu7vol"],[5,22,26]],[9,0,-999,[0,"f6HFtnUjdFh4MrOsdr97XU"],491,492]],[1,"179bvIujtBwYLRu7C8Xj2l",null,null,null,1,0]],[20,"capital",false,26,[[2,-1000,[0,"d89snSDS5OYr89e/SgNHyR"],[5,30,34]],[10,-1001,[0,"94g3DcW1ZGM5O76ysubKNA"],493,494]],[1,"111Q62GTBF47OfPvYJKma9",null,null,null,1,0]],[24,"bt_3",54,[[2,-1002,[0,"f0yLaEMU1J7KHXY1HJLmWR"],[5,8,24]],[10,-1003,[0,"01xweu7NZBxZpMH6C/pV0L"],502,503]],[1,"22FN6joIhOuqcmKE6Pd0Eg",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",27,[[2,-1004,[0,"13D9AwxuhLJKDTcz7HpCZo"],[5,22,24]],[9,0,-1005,[0,"03YHTElftNcJuo0zVSuH14"],511,512]],[1,"e89tJo35tHG6MfUqVuZVED",null,null,null,1,0]],[20,"capital",false,27,[[2,-1006,[0,"03XDEVPu1B2YLg9iobDAKI"],[5,28,32]],[10,-1007,[0,"ebBWH9entCza312AldoN5q"],513,514]],[1,"17wGH/KENMeIwsO5URQPfG",null,null,null,1,0]],[24,"bt_4",55,[[2,-1008,[0,"33BsXKiO1HWJAlJdkvkN4Q"],[5,10,30]],[10,-1009,[0,"95+xJ/vjlMSbINb4raBigT"],522,523]],[1,"27uJNvkphNN501CRldiLtX",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",28,[[2,-1010,[0,"e0Om1MU6VCzqKdDuRQLcP6"],[5,24,34]],[9,0,-1011,[0,"54Jp9bfxxCobGS85E+yYiK"],531,532]],[1,"b5/mPS9I9A94MB1MgkrSHg",null,null,null,1,0]],[20,"capital",false,28,[[2,-1012,[0,"25YkmYE2lGvKpaQpX1kSsi"],[5,26,32]],[10,-1013,[0,"b2yDblGN5AqbbEePVASCpE"],533,534]],[1,"1eg8jRBF5FiZkebiFecZ1A",null,null,null,1,0]],[24,"bt_5",56,[[2,-1014,[0,"e9VoYwkzFBcba4ZiRExUu9"],[5,22,32]],[10,-1015,[0,"7bhdXSiltHQZP+Ss606nCU"],542,543]],[1,"82IcOhr1tKA4nT4gAJ04vv",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",29,[[2,-1016,[0,"60+D6pfuxA2L2q1xNdyhEk"],[5,22,24]],[9,0,-1017,[0,"af61rOcURMlLr/uBky4DCp"],551,552]],[1,"65A74Hk9RO+J0jmWCrwmd5",null,null,null,1,0]],[20,"capital",false,29,[[2,-1018,[0,"1fOxo4ju5C/aazb4rVZw1+"],[5,28,32]],[10,-1019,[0,"56Lz6abLRL76gMPsvPDlkI"],553,554]],[1,"e9l8L6sSxMt5N+7ZlbMkue",null,null,null,1,0]],[24,"bt_6",57,[[2,-1020,[0,"63UWnIluRPBb3iNkl7dRU9"],[5,88,88]],[54,2,false,-1021,[0,"d4QZhAl/hPlKzbtNCCwr+N"],562,563]],[1,"5e2c6NdVBOoJ4WxMzkvlCl",null,null,null,1,0],[1,0,0,0.01]],[8,"lower",30,[[2,-1022,[0,"15hXGWiO9AJZ4v0zF5ppSn"],[5,34,24]],[9,0,-1023,[0,"f9k4qkRv5Jv6WJPBoz9LTR"],571,572]],[1,"45/BzdNt1FBJJbMb2Sc60K",null,null,null,1,0]],[20,"capital",false,30,[[2,-1024,[0,"aaFSAqltNOfrm3yBFcHH4X"],[5,34,32]],[10,-1025,[0,"ea4fY77nFByK3croz47RhG"],573,574]],[1,"e7lzqAVZ9CLrRn/5lhCWex",null,null,null,1,0]],[24,"bt_7",58,[[2,-1026,[0,"01oDGju61CV45AOx5crUfR"],[5,24,24]],[10,-1027,[0,"85fYvf27BCULGWM+KRxxAD"],582,583]],[1,"86piieVj9CYZG3rGEqLnKP",null,null,null,1,0],[1,0,0,0.01]],[8,"comma",59,[[2,-1028,[0,"86gAEVdENAoam5MEEP9Qxn"],[5,10,16]],[9,0,-1029,[0,"87zhl36NBMvoGy2WfiMJrw"],591,592]],[1,"56g5/R/X1Hw5bC3UtPCOaQ",null,null,null,1,0]],[24,"bt_8",60,[[2,-1030,[0,"72b59hgoZGCKskvX/X3lJX"],[5,24,24]],[10,-1031,[0,"a0TVzuWQpIRYzHZrrIyBKf"],600,601]],[1,"26UDbJWnhFQq4hgUpqWfm8",null,null,null,1,0],[1,0,0,0.01]],[8,"dot",61,[[2,-1032,[0,"59KK0NGMZLjIajUdbfBARm"],[5,10,10]],[9,0,-1033,[0,"7cdDkozuZIG5waLUd9tEDc"],609,610]],[1,"06qbDXgPpLKLPmcpsmD+QY",null,null,null,1,0]],[24,"bt_9",62,[[2,-1034,[0,"6ciXOkLHlClItEWrQfAhA5"],[5,20,40]],[10,-1035,[0,"55PuOaqI9PVoRumDz2To2w"],618,619]],[1,"68PJ2AWnhOaKfXTg96tUxo",null,null,null,1,0],[1,0,0,0.01]],[8,"shift",63,[[2,-1036,[0,"a4wiGaTqlBd606/PaJLdxT"],[5,38,36]],[9,0,-1037,[0,"09qE9ZnohKBKQHoZZyZfMJ"],627,628]],[1,"3bHxZD99xGz6pO5MPc0dKe",null,null,null,1,0]],[8,"symbol",64,[[2,-1038,[0,"739Bxj/rdNuJ5yD8TAnMd5"],[5,68,28]],[68,1,-1039,[0,"27xhnvniBIrKEaMe1H+xzd"],636,637]],[1,"3aGKBaFB1JNYc9F7MADslW",null,null,null,1,0]],[42,"button_0",86,[87],[[13,-1040,[0,"88tCNNbj1OdZuTbB+c0qKO"]]],[1,"cc8H9b2/JIbbed/35PnBNy",null,null,null,1,0]],[8,"symbol",87,[[2,-1041,[0,"e3oCLFJ3ZHbqQomx0Km9J5"],[5,30,42]],[9,0,-1042,[0,"15ROg5SEVK1aPXsPwWFM1Y"],645,646]],[1,"9d2jyEwJxAP7ZuEK5Cpxw9",null,null,null,1,0]],[42,"button_1",86,[88],[[13,-1043,[0,"25UxRQ39NHRpcy1sVwAMcD"]]],[1,"79yzERONFK9JA39YskmuE9",null,null,null,1,0]],[8,"symbol",88,[[2,-1044,[0,"0cxYDl8SBLg6iDD1ffw2Pq"],[5,46,46]],[9,0,-1045,[0,"ffzmacw0BKj6ArUcf61wHP"],654,655]],[1,"050DiV1zZDcoB/YaMLhUpQ",null,null,null,1,0]],[8,"symbol",65,[[2,-1046,[0,"e3C3W9BjREA46STK3PG1oX"],[5,32,34]],[9,0,-1047,[0,"956+90lCZGnai13JIZbAXX"],663,664]],[1,"a6wffhb6RC7K87BicTaVQA",null,null,null,1,0]],[8,"symbol",72,[[2,-1048,[0,"b6MeMdW5tKCYQKGTPc2Yde"],[5,48,30]],[10,-1049,[0,"54hzcysnNFRIyarv/zZwcB"],672,673]],[1,"29tEYiOiZCg5unVFjmlOqb",null,null,null,1,0]],[42,"button_3",86,[89],[[13,-1050,[0,"8cztzP5bxJmZxn++yacmm/"]]],[1,"ecK2w8zj1IT689ADaLHO9g",null,null,null,1,0]],[8,"symbol",66,[[2,-1051,[0,"f5XJ7tYJ5JpKtD6eeyOblS"],[5,32,34]],[9,0,-1052,[0,"e5e2q8yx1AeYGhnqXFnj0O"],688,689]],[1,"41CyiGEDFDTaOvc8qFYpea",null,null,null,1,0]],[8,"symbol",73,[[2,-1053,[0,"4brvQggm5EDbNjo1h/LqWA"],[5,48,30]],[10,-1054,[0,"2eVTv7meJNVLhWfQXw+Ev8"],697,698]],[1,"96cBgjrlBAJbhxo2v//t75",null,null,null,1,0]],[42,"button_5",86,[74],[[13,-1055,[0,"46oRGzLgVM4Yrj2ddxEAnv"]]],[1,"e0iuAOhoJGMKqrLIeo6/Gv",null,null,null,1,0]],[8,"symbol",74,[[2,-1056,[0,"77XGoReG9Ox76hvUxVURCK"],[5,44,42]],[9,0,-1057,[0,"16t4VVF6NAqqONMOEsWUQ9"],706,707]],[1,"95PJgXDw5Bbq3s1XzJcfbU",null,null,null,1,0]],[8,"digit_1",75,[[2,-1058,[0,"06tytwKSlFOLGf9BSLakSu"],[5,14,32]],[9,0,-1059,[0,"a7t78bIehBjqw9Kt4ZzRSg"],717,718]],[1,"5fjITHq71Bl7ewOR/q7xPd",null,null,null,1,0]],[8,"digit_2",76,[[2,-1060,[0,"1bQdQAERFHl4LeitdWTtz+"],[5,22,32]],[9,0,-1061,[0,"acFBkqejZIoaE1LwVG3Jji"],726,727]],[1,"b1QfkrbqhCcKQyTVTi5R9Y",null,null,null,1,0]],[8,"digit_3",77,[[2,-1062,[0,"eaKouaJslDlpPsmWY2KRQj"],[5,24,34]],[9,0,-1063,[0,"aeqUiVakZKmpH0cWq1Jwnu"],735,736]],[1,"efPySrePxMP62cV0lYMcx4",null,null,null,1,0]],[8,"digit_4",78,[[2,-1064,[0,"02iLhkPH9G1pF0o1Vv56Gj"],[5,26,32]],[9,0,-1065,[0,"bdxOOfZqtJar3Y0WZVW/Of"],744,745]],[1,"37W33b/npAgZQvWIXRWeBX",null,null,null,1,0]],[8,"digit_5",79,[[2,-1066,[0,"b8qZgHToFCbKM0fITJUFyq"],[5,24,32]],[9,0,-1067,[0,"f12PFBmJVKorV0leTc/bKd"],753,754]],[1,"997Gi25DpEfYAeY2B7GB7z",null,null,null,1,0]],[8,"digit_6",80,[[2,-1068,[0,"43US6MwXVN/45tFfX3CQ+J"],[5,24,34]],[9,0,-1069,[0,"48hOHLh3FN+qPaTifz/zFD"],762,763]],[1,"3cz4epA1hOkLIL52NjxNT+",null,null,null,1,0]],[8,"digit_7",81,[[2,-1070,[0,"05NxtHl6lJN6cpJtu6Bx+5"],[5,22,32]],[9,0,-1071,[0,"87Wor1+SFLC7BCA1Qo2ghL"],771,772]],[1,"0beijDvstF5JGFybaMvCu/",null,null,null,1,0]],[8,"digit_8",82,[[2,-1072,[0,"65yKxavddB2pZrHC+RJT5/"],[5,24,34]],[9,0,-1073,[0,"a3JKgHXeFEhqxsrNby9QlT"],780,781]],[1,"49/YfTxjxPx46qspyBlBqu",null,null,null,1,0]],[8,"digit_9",83,[[2,-1074,[0,"5cs45RQWxGPobpI9Hhqm0I"],[5,24,34]],[9,0,-1075,[0,"92BnNVhmRCvLCAsZU5p2Me"],789,790]],[1,"3dXzFsYxFDfJL2Pk+7QXKM",null,null,null,1,0]],[8,"digit_0",84,[[2,-1076,[0,"48pxM1LqFMtpeQxZ3OCWoV"],[5,24,34]],[9,0,-1077,[0,"5bWZmwnzVLALoBnHcvoyfs"],798,799]],[1,"94RZh0pRpPHakT+TQS7ePP",null,null,null,1,0]],[8,"dot",85,[[2,-1078,[0,"03Fi40bI5AZrsPu0Jg46uB"],[5,10,10]],[9,0,-1079,[0,"612/DoCVpIgpivuIZmcESB"],807,808]],[1,"faTJNRvodFfZNqwDxlqPE0",null,null,null,1,0]],[172,"",0,20,1,false,132,[0,"dc+0GUUOlGXbvQfoNPObkk"]],[173,"Enter text here...",0,20,20,1,false,133,[0,"00V5HrNs1CDKWJBtHlYFfj"]],[117,"Suspend Transform",1,[1,"25ps5MGahI76lqxSDv09XB",null,null,null,1,0]],[191,90,[0,"c8rR3IenFH05knVmCzeKI5"]]],0,[0,12,1,0,0,1,0,0,1,0,30,253,0,31,252,0,0,1,0,0,1,0,0,1,0,32,255,0,33,254,0,0,1,0,0,1,0,-1,132,0,-2,133,0,-3,254,0,-4,90,0,0,2,0,-1,137,0,-2,95,0,-3,96,0,-4,97,0,-5,98,0,-6,99,0,-7,100,0,-8,101,0,-9,102,0,-10,103,0,-11,104,0,-12,68,0,0,3,0,-1,105,0,-2,106,0,-3,107,0,-4,108,0,-5,109,0,-6,110,0,-7,111,0,-8,112,0,-9,113,0,-10,114,0,-11,199,0,0,4,0,-1,115,0,-2,116,0,-3,117,0,-4,118,0,-5,119,0,-6,120,0,-7,121,0,-8,122,0,-9,123,0,-10,124,0,-11,125,0,0,5,0,0,5,0,7,5,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,139,0,-2,140,0,0,6,0,0,6,0,7,6,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,142,0,-2,143,0,0,7,0,0,7,0,7,7,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,145,0,-2,146,0,0,8,0,0,8,0,7,8,0,0,8,0,0,8,0,0,8,0,0,8,0,-1,148,0,-2,149,0,0,9,0,0,9,0,7,9,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,151,0,-2,152,0,0,10,0,0,10,0,7,10,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,154,0,-2,155,0,0,11,0,0,11,0,7,11,0,0,11,0,0,11,0,0,11,0,0,11,0,-1,157,0,-2,158,0,0,12,0,0,12,0,7,12,0,0,12,0,0,12,0,0,12,0,0,12,0,-1,160,0,-2,161,0,0,13,0,0,13,0,7,13,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,163,0,-2,164,0,0,14,0,0,14,0,7,14,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,166,0,-2,167,0,0,15,0,0,15,0,7,15,0,0,15,0,0,15,0,0,15,0,0,15,0,-1,172,0,-2,173,0,0,16,0,0,16,0,7,16,0,0,16,0,0,16,0,0,16,0,0,16,0,-1,175,0,-2,176,0,0,17,0,0,17,0,7,17,0,0,17,0,0,17,0,0,17,0,0,17,0,-1,178,0,-2,179,0,0,18,0,0,18,0,7,18,0,0,18,0,0,18,0,0,18,0,0,18,0,-1,181,0,-2,182,0,0,19,0,0,19,0,7,19,0,0,19,0,0,19,0,0,19,0,0,19,0,-1,184,0,-2,185,0,0,20,0,0,20,0,7,20,0,0,20,0,0,20,0,0,20,0,0,20,0,-1,187,0,-2,188,0,0,21,0,0,21,0,7,21,0,0,21,0,0,21,0,0,21,0,0,21,0,-1,190,0,-2,191,0,0,22,0,0,22,0,7,22,0,0,22,0,0,22,0,0,22,0,0,22,0,-1,193,0,-2,194,0,0,23,0,0,23,0,7,23,0,0,23,0,0,23,0,0,23,0,0,23,0,-1,196,0,-2,197,0,0,24,0,0,24,0,7,24,0,0,24,0,0,24,0,0,24,0,0,24,0,-1,203,0,-2,204,0,0,25,0,0,25,0,7,25,0,0,25,0,0,25,0,0,25,0,0,25,0,-1,206,0,-2,207,0,0,26,0,0,26,0,7,26,0,0,26,0,0,26,0,0,26,0,0,26,0,-1,209,0,-2,210,0,0,27,0,0,27,0,7,27,0,0,27,0,0,27,0,0,27,0,0,27,0,-1,212,0,-2,213,0,0,28,0,0,28,0,7,28,0,0,28,0,0,28,0,0,28,0,0,28,0,-1,215,0,-2,216,0,0,29,0,0,29,0,7,29,0,0,29,0,0,29,0,0,29,0,0,29,0,-1,218,0,-2,219,0,0,30,0,0,30,0,7,30,0,0,30,0,0,30,0,0,30,0,0,30,0,-1,221,0,-2,222,0,0,31,0,0,31,0,7,31,0,0,31,0,0,31,0,0,31,0,0,31,0,-1,141,0,0,32,0,0,32,0,7,32,0,0,32,0,0,32,0,0,32,0,0,32,0,-1,144,0,0,33,0,0,33,0,7,33,0,0,33,0,0,33,0,0,33,0,0,33,0,-1,147,0,0,34,0,0,34,0,7,34,0,0,34,0,0,34,0,0,34,0,0,34,0,-1,150,0,0,35,0,0,35,0,7,35,0,0,35,0,0,35,0,0,35,0,0,35,0,-1,153,0,0,36,0,0,36,0,7,36,0,0,36,0,0,36,0,0,36,0,0,36,0,-1,156,0,0,37,0,0,37,0,7,37,0,0,37,0,0,37,0,0,37,0,0,37,0,-1,159,0,0,38,0,0,38,0,7,38,0,0,38,0,0,38,0,0,38,0,0,38,0,-1,162,0,0,39,0,0,39,0,7,39,0,0,39,0,0,39,0,0,39,0,0,39,0,-1,165,0,0,40,0,0,40,0,7,40,0,0,40,0,0,40,0,0,40,0,0,40,0,-1,168,0,0,41,0,0,41,0,7,41,0,0,41,0,0,41,0,0,41,0,0,41,0,-1,174,0,0,42,0,0,42,0,7,42,0,0,42,0,0,42,0,0,42,0,0,42,0,-1,177,0,0,43,0,0,43,0,7,43,0,0,43,0,0,43,0,0,43,0,0,43,0,-1,180,0,0,44,0,0,44,0,7,44,0,0,44,0,0,44,0,0,44,0,0,44,0,-1,183,0,0,45,0,0,45,0,7,45,0,0,45,0,0,45,0,0,45,0,0,45,0,-1,186,0,0,46,0,0,46,0,7,46,0,0,46,0,0,46,0,0,46,0,0,46,0,-1,189,0,0,47,0,0,47,0,7,47,0,0,47,0,0,47,0,0,47,0,0,47,0,-1,192,0,0,48,0,0,48,0,7,48,0,0,48,0,0,48,0,0,48,0,0,48,0,-1,195,0,0,49,0,0,49,0,7,49,0,0,49,0,0,49,0,0,49,0,0,49,0,-1,198,0,0,50,0,0,50,0,7,50,0,0,50,0,0,50,0,0,50,0,0,50,0,-1,201,0,0,51,0,0,51,0,7,51,0,0,51,0,0,51,0,0,51,0,0,51,0,-1,202,0,0,52,0,0,52,0,7,52,0,0,52,0,0,52,0,0,52,0,0,52,0,-1,205,0,0,53,0,0,53,0,7,53,0,0,53,0,0,53,0,0,53,0,0,53,0,-1,208,0,0,54,0,0,54,0,7,54,0,0,54,0,0,54,0,0,54,0,0,54,0,-1,211,0,0,55,0,0,55,0,7,55,0,0,55,0,0,55,0,0,55,0,0,55,0,-1,214,0,0,56,0,0,56,0,7,56,0,0,56,0,0,56,0,0,56,0,0,56,0,-1,217,0,0,57,0,0,57,0,7,57,0,0,57,0,0,57,0,0,57,0,0,57,0,-1,220,0,0,58,0,0,58,0,7,58,0,0,58,0,0,58,0,0,58,0,0,58,0,-1,223,0,0,59,0,0,59,0,7,59,0,0,59,0,0,59,0,0,59,0,0,59,0,-1,224,0,0,60,0,0,60,0,7,60,0,0,60,0,0,60,0,0,60,0,0,60,0,-1,225,0,0,61,0,0,61,0,7,61,0,0,61,0,0,61,0,0,61,0,0,61,0,-1,226,0,0,62,0,0,62,0,7,62,0,0,62,0,0,62,0,0,62,0,0,62,0,-1,227,0,0,63,0,0,63,0,7,63,0,0,63,0,0,63,0,0,63,0,0,63,0,-1,228,0,0,64,0,0,64,0,7,64,0,0,64,0,0,64,0,0,64,0,0,64,0,-1,229,0,0,65,0,0,65,0,7,65,0,0,65,0,0,65,0,0,65,0,0,65,0,-1,234,0,0,66,0,0,66,0,7,66,0,0,66,0,0,66,0,0,66,0,0,66,0,-1,237,0,0,67,0,0,67,0,7,67,0,0,67,0,0,67,0,0,67,0,0,67,0,-1,138,0,0,68,0,0,68,0,7,68,0,0,68,0,0,68,0,0,68,0,0,68,0,-1,169,0,0,69,0,0,69,0,7,69,0,0,69,0,0,69,0,0,69,0,-1,170,0,0,70,0,0,70,0,7,70,0,0,70,0,0,70,0,0,70,0,-1,171,0,0,71,0,0,71,0,7,71,0,0,71,0,0,71,0,0,71,0,0,71,0,-1,200,0,0,72,0,0,72,0,7,72,0,0,72,0,0,72,0,0,72,0,-1,235,0,0,73,0,0,73,0,7,73,0,0,73,0,0,73,0,0,73,0,-1,238,0,0,74,0,0,74,0,7,74,0,0,74,0,0,74,0,0,74,0,0,74,0,-1,240,0,0,75,0,0,75,0,7,75,0,0,75,0,0,75,0,0,75,0,0,75,0,-1,241,0,0,76,0,0,76,0,7,76,0,0,76,0,0,76,0,0,76,0,0,76,0,-1,242,0,0,77,0,0,77,0,7,77,0,0,77,0,0,77,0,0,77,0,0,77,0,-1,243,0,0,78,0,0,78,0,7,78,0,0,78,0,0,78,0,0,78,0,0,78,0,-1,244,0,0,79,0,0,79,0,7,79,0,0,79,0,0,79,0,0,79,0,0,79,0,-1,245,0,0,80,0,0,80,0,7,80,0,0,80,0,0,80,0,0,80,0,0,80,0,-1,246,0,0,81,0,0,81,0,7,81,0,0,81,0,0,81,0,0,81,0,0,81,0,-1,247,0,0,82,0,0,82,0,7,82,0,0,82,0,0,82,0,0,82,0,0,82,0,-1,248,0,0,83,0,0,83,0,7,83,0,0,83,0,0,83,0,0,83,0,0,83,0,-1,249,0,0,84,0,0,84,0,7,84,0,0,84,0,0,84,0,0,84,0,0,84,0,-1,250,0,0,85,0,0,85,0,7,85,0,0,85,0,0,85,0,0,85,0,0,85,0,-1,251,0,0,86,0,-1,230,0,-2,232,0,-3,126,0,-4,236,0,-5,127,0,-6,239,0,0,87,0,0,87,0,7,87,0,0,87,0,0,87,0,0,87,0,-1,231,0,0,88,0,0,88,0,7,88,0,0,88,0,0,88,0,0,88,0,-1,233,0,0,89,0,0,89,0,7,89,0,0,89,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,-3,255,0,-1,93,0,-2,91,0,-3,92,0,0,91,0,0,91,0,0,92,0,0,92,0,-1,128,0,-2,129,0,-3,130,0,-4,131,0,0,93,0,0,93,0,-1,134,0,-2,135,0,-3,94,0,0,94,0,0,94,0,0,94,0,0,94,0,-1,136,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,128,0,0,129,0,0,130,0,0,131,0,0,132,0,-2,252,0,0,133,0,-2,253,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,0,153,0,0,153,0,0,154,0,0,154,0,0,155,0,0,155,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,0,160,0,0,161,0,0,161,0,0,162,0,0,162,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,0,167,0,0,167,0,0,168,0,0,168,0,0,169,0,0,169,0,0,170,0,0,170,0,0,171,0,0,171,0,0,172,0,0,172,0,0,173,0,0,173,0,0,174,0,0,174,0,0,175,0,0,175,0,0,176,0,0,176,0,0,177,0,0,177,0,0,178,0,0,178,0,0,179,0,0,179,0,0,180,0,0,180,0,0,181,0,0,181,0,0,182,0,0,182,0,0,183,0,0,183,0,0,184,0,0,184,0,0,185,0,0,185,0,0,186,0,0,186,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,0,190,0,0,190,0,0,191,0,0,191,0,0,192,0,0,192,0,0,193,0,0,193,0,0,194,0,0,194,0,0,195,0,0,195,0,0,196,0,0,196,0,0,197,0,0,197,0,0,198,0,0,198,0,0,199,0,0,200,0,0,200,0,0,201,0,0,201,0,0,202,0,0,202,0,0,203,0,0,203,0,0,204,0,0,204,0,0,205,0,0,205,0,0,206,0,0,206,0,0,207,0,0,207,0,0,208,0,0,208,0,0,209,0,0,209,0,0,210,0,0,210,0,0,211,0,0,211,0,0,212,0,0,212,0,0,213,0,0,213,0,0,214,0,0,214,0,0,215,0,0,215,0,0,216,0,0,216,0,0,217,0,0,217,0,0,218,0,0,218,0,0,219,0,0,219,0,0,220,0,0,220,0,0,221,0,0,221,0,0,222,0,0,222,0,0,223,0,0,223,0,0,224,0,0,224,0,0,225,0,0,225,0,0,226,0,0,226,0,0,227,0,0,227,0,0,228,0,0,228,0,0,229,0,0,229,0,0,230,0,0,231,0,0,231,0,0,232,0,0,233,0,0,233,0,0,234,0,0,234,0,0,235,0,0,235,0,0,236,0,0,237,0,0,237,0,0,238,0,0,238,0,0,239,0,0,240,0,0,240,0,0,241,0,0,241,0,0,242,0,0,242,0,0,243,0,0,243,0,0,244,0,0,244,0,0,245,0,0,245,0,0,246,0,0,246,0,0,247,0,0,247,0,0,248,0,0,248,0,0,249,0,0,249,0,0,250,0,0,250,0,0,251,0,0,251,0,16,1,2,4,91,3,4,91,4,4,91,5,4,95,6,4,96,7,4,97,8,4,98,9,4,99,10,4,100,11,4,101,12,4,102,13,4,103,14,4,104,15,4,106,16,4,107,17,4,108,18,4,109,19,4,110,20,4,111,21,4,112,22,4,113,23,4,114,24,4,116,25,4,117,26,4,118,27,4,119,28,4,120,29,4,121,30,4,122,31,4,95,32,4,96,33,4,97,34,4,98,35,4,99,36,4,100,37,4,101,38,4,102,39,4,103,40,4,104,41,4,106,42,4,107,43,4,108,44,4,109,45,4,110,46,4,111,47,4,112,48,4,113,49,4,114,50,4,115,51,4,115,52,4,116,53,4,117,54,4,118,55,4,119,56,4,120,57,4,121,58,4,122,59,4,123,60,4,123,61,4,124,62,4,124,63,4,125,64,4,125,65,4,126,66,4,127,67,4,137,69,4,105,70,4,105,71,4,199,72,4,126,73,4,127,74,4,239,75,4,128,76,4,128,77,4,128,78,4,129,79,4,129,80,4,129,81,4,130,82,4,130,83,4,130,84,4,131,85,4,131,86,4,91,87,4,230,88,4,232,89,4,236,1079],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,253],[1,2,1,2,1,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,6,8,9,10,5,1,2,1,2,34,5,1,1],[0,23,0,23,0,3,0,46,0,47,0,7,7,5,6,4,3,0,48,0,49,0,1,1,5,6,4,3,0,50,0,1,1,5,6,4,3,0,51,0,52,0,1,1,5,6,4,3,0,53,0,1,1,5,6,4,3,0,54,0,55,0,1,1,5,6,4,3,0,56,0,1,1,5,6,4,3,0,57,0,58,0,1,1,5,6,4,3,0,59,0,1,1,5,6,4,3,0,60,0,61,0,1,1,5,6,4,3,0,62,0,1,1,5,6,4,3,0,63,0,64,0,1,1,5,6,4,3,0,65,0,1,1,5,6,4,3,0,66,0,67,0,1,1,5,6,4,3,0,68,0,1,1,5,6,4,3,0,69,0,70,0,1,1,5,6,4,3,0,71,0,1,1,5,6,4,3,0,72,0,73,0,1,1,5,6,4,3,0,74,0,1,1,5,6,4,3,0,75,0,76,0,1,1,5,6,4,3,0,77,0,1,1,5,6,4,3,0,78,0,7,7,5,6,4,3,0,79,0,7,7,5,6,4,3,0,80,0,7,7,5,6,4,3,0,81,0,82,0,1,1,5,6,4,3,0,83,0,1,1,5,6,4,3,0,84,0,85,0,1,1,5,6,4,3,0,86,0,1,1,5,6,4,3,0,87,0,88,0,1,1,5,6,4,3,0,89,0,1,1,5,6,4,3,0,90,0,91,0,1,1,5,6,4,3,0,92,0,1,1,5,6,4,3,0,93,0,94,0,1,1,5,6,4,3,0,95,0,1,1,5,6,4,3,0,96,0,97,0,1,1,5,6,4,3,0,98,0,1,1,5,6,4,3,0,99,0,100,0,1,1,5,6,4,3,0,101,0,1,1,5,6,4,3,0,102,0,103,0,1,1,5,6,4,3,0,104,0,1,1,5,6,4,3,0,105,0,106,0,1,1,5,6,4,3,0,107,0,1,1,5,6,4,3,0,108,0,7,7,5,6,4,3,0,24,0,7,7,5,6,4,3,0,25,0,7,7,5,6,4,3,0,109,0,110,0,1,1,5,6,4,3,0,111,0,1,1,5,6,4,3,0,112,0,113,0,1,1,5,6,4,3,0,114,0,1,1,5,6,4,3,0,115,0,116,0,1,1,5,6,4,3,0,117,0,1,1,5,6,4,3,0,118,0,119,0,1,1,5,6,4,3,0,120,0,1,1,5,6,4,3,0,121,0,122,0,1,1,5,6,4,3,0,123,0,1,1,5,6,4,3,0,124,0,125,0,1,1,5,6,4,3,0,126,0,1,1,5,6,4,3,0,127,0,128,0,1,1,5,6,4,3,0,129,0,1,1,5,6,4,3,0,130,0,1,1,5,6,4,3,0,131,0,1,1,5,6,4,3,0,26,0,1,1,5,6,4,3,0,132,0,1,1,5,6,4,3,0,24,0,7,7,5,6,4,3,0,25,0,7,7,5,6,4,3,0,133,0,7,7,5,6,4,3,0,134,0,7,7,5,6,4,3,0,27,0,7,7,5,6,4,3,0,28,0,7,7,5,6,4,3,0,1,1,5,6,4,3,0,27,0,7,7,5,6,4,3,0,28,0,7,7,5,6,4,3,0,135,0,7,7,5,6,4,3,0,29,0,136,0,1,1,5,6,4,3,0,137,0,1,1,5,6,4,3,0,138,0,1,1,5,6,4,3,0,139,0,1,1,5,6,4,3,0,140,0,1,1,5,6,4,3,0,141,0,1,1,5,6,4,3,0,142,0,1,1,5,6,4,3,0,143,0,1,1,5,6,4,3,0,144,0,1,1,5,6,4,3,0,145,0,1,1,5,6,4,3,0,26,0,1,1,5,6,4,3,0,29,0,30,30,3,0,0]],[[[25,".bin",3495632489,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22336,"length":3516,"count":1758,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22336,"count":349,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0263243913650513,-0.3362765312194824,-0.03969179466366768],"maxPosition",8,[1,1.0416858196258545,0.37944579124450684,2.4551167488098145]]],-1],0,0,[],[],[]],[[[25,".bin",3036632834,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22272,"length":3516,"count":1758,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22272,"count":348,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0627228021621704,-0.22964781522750854,-0.03969179466366768],"maxPosition",8,[1,1.0608391761779785,0.271166056394577,2.4551167488098145]]],-1],0,0,[],[],[]],[[[25,".bin",254309135,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4752,"length":1008,"count":504,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4752,"count":99,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.0139009952545166,-2.0199241638183594,-0.5083037614822388],"maxPosition",8,[1,2.0139009952545166,2.0199241638183594,0.41632819175720215]]],-1],0,0,[],[],[]],[[[25,".bin",29018075,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17024,"length":2616,"count":1308,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17024,"count":266,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8331011533737183,-0.3728335201740265,-0.03329771012067795],"maxPosition",8,[1,0.7926641702651978,0.46718841791152954,2.0596137046813965]]],-1],0,0,[],[],[]],[[[25,".bin",1251657800,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":44032,"length":5268,"count":2634,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":44032,"count":688,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-26.697162628173828,-5.055922985076904,-21.154483795166016],"maxPosition",8,[1,60.5887565612793,11.239510536193848,12.134369850158691]]],-1],0,0,[],[],[]],[[[25,".bin",2591114660,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17024,"length":2616,"count":1308,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17024,"count":266,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7926226854324341,-0.7388861179351807,-0.05313277989625931],"maxPosition",8,[1,0.3647039830684662,0.5992574691772461,2.038058042526245]]],-1],0,0,[],[],[]],[[[25,".bin",3382949082,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22144,"length":3516,"count":1758,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22144,"count":346,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9536016583442688,-0.38312095403671265,-0.05688628926873207],"maxPosition",8,[1,0.487619012594223,0.4689179062843323,1.8973422050476074]]],-1],0,0,[],[],[]],[[[25,".bin",4260990112,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22144,"length":3516,"count":1758,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22144,"count":346,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.091290831565857,-0.41489967703819275,-0.07584762573242188],"maxPosition",8,[1,0.9092828035354614,0.5096479654312134,2.450913906097412]]],-1],0,0,[],[],[]],[[[25,".bin",3840728426,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17216,"length":2622,"count":1311,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17216,"count":269,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7611004710197449,-0.18266357481479645,-0.06545485556125641],"maxPosition",8,[1,0.961718738079071,0.5065948367118835,2.02461838722229]]],-1],0,0,[],[],[]],[[[25,".bin",1400315511,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17216,"length":2622,"count":1311,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17216,"count":269,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.49995025992393494,-0.4541564881801605,-0.09076808393001556],"maxPosition",8,[1,0.9192519783973694,0.6330084204673767,2.026685953140259]]],-1],0,0,[],[],[]],[[{"name":"default_toggle_normal","rect":{"x":0,"y":0,"width":28,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-14,-14,0,14,-14,0,-14,14,0,14,14,0],"indexes":[0,1,2,2,1,3],"uv":[0,28,28,28,0,0,28,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-14,"y":-14,"z":0},"maxPos":{"x":14,"y":14,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[146]],[[[25,".bin",2531713262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[{"name":"default_toggle_checkmark","rect":{"x":4,"y":5,"width":20,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-10,-9,0,10,-9,0,-10,9,0,10,9,0],"indexes":[0,1,2,2,1,3],"uv":[4,23,24,23,4,5,24,5],"nuv":[0.14285714285714285,0.17857142857142858,0.8571428571428571,0.17857142857142858,0.14285714285714285,0.8214285714285714,0.8571428571428571,0.8214285714285714],"minPos":{"x":-10,"y":-9,"z":0},"maxPos":{"x":10,"y":9,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[147]],[[[39,"Controller Left"],[12,["52y2GEYrpcWatty++3XzTc"]],[43,"Controller Left",[-3],[59,"c46/YsCPVOJYA4mWEpNYRx",null,null,-2,0,[-1]]],[32,0,null,2,[35,"52y2GEYrpcWatty++3XzTc",null,null,-4,[85,"0f1mJoOqlIJJPq05APHX6w",2,[[34,"ppController_NEO3_L",["_name"],1],[21,["_lpos"],1,[1,0,0,0]],[21,["_lrot"],1,[3,0,0,0,1]],[21,["_euler"],1,[1,0,0,0]],[21,["_lscale"],1,[1,0.01,0.01,0.01]]]],0]]],0,[0,-1,3,0,12,2,0,-1,3,0,12,3,0,16,2,4],[0],[15],[148]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[149]],[[{"name":"default_scrollbar_bg","rect":{"x":0,"y":0,"width":30,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-15,-7.5,0,15,-7.5,0,-15,7.5,0,15,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,30,15,0,0,30,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15,"y":-7.5,"z":0},"maxPos":{"x":15,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[150]],[[{"name":"default_radio_button_on","rect":{"x":1,"y":1,"width":30,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-15,-15,0,15,-15,0,-15,15,0,15,15,0],"indexes":[0,1,2,2,1,3],"uv":[1,31,31,31,1,1,31,1],"nuv":[0.03125,0.03125,0.96875,0.03125,0.03125,0.96875,0.96875,0.96875],"minPos":{"x":-15,"y":-15,"z":0},"maxPos":{"x":15,"y":15,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[151]],[[[39,"Toggle"],[50,"Toggle",8388608,[-9],[[2,-2,[0,"c26N0voYtFRZj+SE3GIQra"],[5,28,28]],[10,-3,[0,"609r2k3qZJGqtT4Bw42M0J"],0,1],[192,-5,[0,"e99Gxh7YRNYqleXDO1reYa"],-4,2],[3,-6,[0,"ddQj6A/kNKVLyj8X0d15eo"]],[4,-7,[0,"68dPCZjqJA75dz9IsciE88"],[1,28,28,0.01],3],[46,-8,[0,"48lklVrc5N063hTWrKxEys"]]],[1,"c46/YsCPVOJYA4mWEpNYRx",null,null,null,-1,0],[1,0.03,0.03,0.03]],[64,"Checkmark",8388608,1,[[[2,-10,[0,"fbJHDD6NVDY4RKqG78JaWH"],[5,26,26]],-11],4,1],[1,"15r0tyiGRI6b4+zaAgZLFP",null,null,null,1,0]],[69,0,2,[0,"74xocHgMRJjLBDNWAgC6/P"]]],0,[0,12,1,0,0,1,0,0,1,0,20,3,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,-2,3,0,16,1,11],[0,0,0,0,3,3],[1,2,6,5,1,2],[0,31,31,3,0,152]],[[[39,"Controller Right"],[12,["f9TD6pPEtaVq85CDpQYi3U"]],[43,"Controller Right",[-3],[59,"c46/YsCPVOJYA4mWEpNYRx",null,null,-2,0,[-1]]],[32,0,null,2,[35,"f9TD6pPEtaVq85CDpQYi3U",null,null,-4,[85,"72OPD6nGNHhZuYli/Qq6Hz",2,[[34,"ppController_NEO3_R",["_name"],1],[21,["_lpos"],1,[1,0,0,0]],[21,["_lrot"],1,[3,0,0,0,1]],[21,["_euler"],1,[1,0,0,0]],[21,["_lscale"],1,[1,0.01,0.01,0.01]]]],0]]],0,[0,-1,3,0,12,2,0,-1,3,0,12,3,0,16,2,4],[0],[15],[153]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[154]],[[[39,"ToggleGroup"],[50,"ToggleGroup",8388608,[-5,-6,-7],[[194,-2,[0,"0auEt90rdAHJ4amRk34Rdy"]],[13,-3,[0,"f2PKM9plRC7Ja4Mz+CxlUU"]],[46,-4,[0,"7bPCOb7xNI/pwTjao7a+uE"]]],[1,"c46/YsCPVOJYA4mWEpNYRx",null,null,null,-1,0],[1,0.03,0.03,0.03]],[62,"Toggle1",8388608,1,[-15],[[2,-8,[0,"71R+Ohcy9G34Dbva6PsWi9"],[5,32,32]],[9,0,-9,[0,"dcY8eebohAtYFsf6Zppcoq"],0,1],[193,-12,[0,"9bb0au5jVMsJHiAWHDZs4a"],[4,4292269782],-11,-10,2],[3,-13,[0,"349THksFBMd4j2J+YK2uFZ"]],[4,-14,[0,"d1tWqZYBdMC7d19D6iYDm1"],[1,32,32,0.01],3]],[1,"f2wcFMrjZE4L2I/UBtLdsS",null,null,null,1,0],[1,-62,0,0]],[118,"Toggle2",8388608,1,[-23],[[2,-16,[0,"31kDy5WkNIYKxD4tHJxqh5"],[5,32,32]],[9,0,-17,[0,"57JZ6UZLxFL7xfT7mqkKBW"],4,5],[87,false,-20,[0,"1b6aX5SntC1aID2wIU46S2"],[4,4292269782],-19,-18,6],[3,-21,[0,"4efQl9ThZFa4jOUq5tjIE3"]],[4,-22,[0,"9c6WJY9r9L6bHigcdsByWu"],[1,32,32,0.01],7]],[1,"c8CzUuJLNEoZ9PqulmLIco",null,null,null,1,0]],[62,"Toggle3",8388608,1,[-31],[[2,-24,[0,"d0McDSxwlM35Vva7RWgt9X"],[5,32,32]],[9,0,-25,[0,"43kanlghFGZZLeQ5pNpMgP"],8,9],[87,false,-28,[0,"fbdoMd0o1FxK42jayA5uKo"],[4,4292269782],-27,-26,10],[3,-29,[0,"21J9rIQyNFBb/TU7lxl5Q4"]],[4,-30,[0,"3f+15b5TdJOLLDy1evMlvx"],[1,32,32,0.01],11]],[1,"52RDZtlypJNpQwjH3r3/24",null,null,null,1,0],[1,62,0,0]],[64,"Checkmark",8388608,2,[[[2,-32,[0,"61S/e1W7NNW4XLoHnlcU6n"],[5,32,32]],-33],4,1],[1,"3bBWbR3EFORaeYuCT9Fs9a",null,null,null,1,0]],[65,"Checkmark",false,8388608,3,[[[67,"Checkmark<UITransformComponent>",-34,[0,"02EQQUOttJ5orYt7HdcRry"],[5,32,32]],-35],4,1],[1,"3bJj6/jwpB3Lgx5EdPme+I",null,null,null,1,0]],[65,"Checkmark",false,8388608,4,[[[67,"Checkmark<UITransformComponent>",-36,[0,"c9of9VfztONKXbjUk2XlCz"],[5,32,32]],-37],4,1],[1,"0fEoJtAlNAvpX3oPhGgxdo",null,null,null,1,0]],[69,0,5,[0,"31wxKtIz1Lf6NyFp32TxSf"]],[70,"Checkmark<SpriteComponent>",0,6,[0,"27dV4atqlJX4RsyOqQsKB4"]],[70,"Checkmark<SpriteComponent>",0,7,[0,"35CEf4LkRKbaR7NQ17Lq1t"]]],0,[0,12,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,20,8,0,7,2,0,0,2,0,0,2,0,0,2,0,-1,5,0,0,3,0,0,3,0,20,9,0,7,3,0,0,3,0,0,3,0,0,3,0,-1,6,0,0,4,0,0,4,0,20,10,0,7,4,0,0,4,0,0,4,0,0,4,0,-1,7,0,0,5,0,-2,8,0,0,6,0,-2,9,0,0,7,0,-2,10,0,16,1,37],[0,0,0,0,0,0,0,0,0,0,0,0,8,8,9,9,10,10],[1,2,6,5,1,2,6,5,1,2,6,5,1,2,1,2,1,2],[0,13,13,3,0,13,13,3,0,13,13,3,0,16,0,16,0,16]],[[{"base":"2,2,0,0,2,1","rgbe":false,"mipmaps":[{"front":"5a8gG1WVFOLKgfrEqtkTLL@b47c0@e9a6d","back":"5a8gG1WVFOLKgfrEqtkTLL@b47c0@40c10","left":"5a8gG1WVFOLKgfrEqtkTLL@b47c0@8fd34","right":"5a8gG1WVFOLKgfrEqtkTLL@b47c0@74afd","top":"5a8gG1WVFOLKgfrEqtkTLL@b47c0@bb97f","bottom":"5a8gG1WVFOLKgfrEqtkTLL@b47c0@7d38f"}]}],[29],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[4],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[4],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[4],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[4],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[4],0,[],[],[]],[[{"fmt":"1","w":0,"h":0},-1],[4],0,[],[],[]],[[[39,"grassGoup"],[43,"grassGoup",[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13],[1,"e5Peksu5tL9peMeABb8/JC",null,null,null,-1,0]],[119,"grass",1,[-15],[[58,true,-14,[0,"11JgtTUn5OJKE3LJ8pTj/2"],[3],4]],[1,"87M1Av0v5LhZ3LsJOTzwr3",null,null,null,1,0],[1,-0.852,0.892,-1.49],[1,1.8,1.8,1.8]],[27,"RootNode",2,[-16,-17,-18],[1,"54SHCY049LyqH1HRGY3ZVR",null,null,null,1,0]],[33,"grass",1,[-20],[[58,true,-19,[0,"abXR2STONCQrmlGd7QjDWb"],[8],9]],[1,"8avX4W7ZtLOLCZ8n5QtiPm",null,null,null,1,0],[1,1.271,0.836,-2.68],[3,0,-0.09886819763876702,0,0.9951005373808527],[1,1.4,1.4,1.4],[1,0,-11.348,0]],[27,"RootNode",4,[-21,-22,-23],[1,"bdiB2XMldLgpbPP0u9vyiH",null,null,null,1,0]],[33,"grass",1,[-25],[[37,"grass<SkeletalAnimation>",true,-24,[0,"3eRlu7+XFMf4IKjhzVuyYo"],[13],14]],[1,"5fAmHUz0xO9YFym/gsZawP",null,null,null,1,0],[1,0.816,0.874,-2.029],[3,0.009594606467145706,-0.09840154486124139,-0.09656895017241425,0.9904037143297977],[1,1.8,1.8,1.8],[1,0,-11.348,-11.138]],[27,"RootNode",6,[-26,-27,-28],[1,"0cYonIu91LHamoapMUydbc",null,null,null,1,0]],[33,"grass",1,[-30],[[37,"grass<SkeletalAnimation>",true,-29,[0,"22rvun9aNNBbAK//dWXzkX"],[18],19]],[1,"9bIVhdYYpFl7JZmL4oubNS",null,null,null,1,0],[1,1.505,0.835,-2.352],[3,0.009051343059323664,0.011005731118140823,-0.042668681053864996,0.9989876529409666],[1,1.8,1.8,1.8],[1,1.094,1.309,-4.879]],[27,"RootNode",8,[-31,-32,-33],[1,"2at9CGY1VK9qtNpM8kC/KU",null,null,null,1,0]],[33,"grass",1,[-35],[[37,"grass<SkeletalAnimation>",true,-34,[0,"0f8P8jwTVOzaIGGhmhMYJ6"],[23],24]],[1,"2d66RAsipF1brG2RGpHJY1",null,null,null,1,0],[1,2.591,0.697,-3.192],[3,-0.009569056200142995,-0.27238145223532967,-0.02174826425431747,0.961895935454317],[1,1.4,1.4,1.4],[1,-1.735,-31.653,-2.099]],[27,"RootNode",10,[-36,-37,-38],[1,"75DE0pyqBGsIOI2RSOFxap",null,null,null,1,0]],[33,"grass",1,[-40],[[37,"grass<SkeletalAnimation>",true,-39,[0,"b6LjWqcFFEYa267NpDVpBB"],[28],29]],[1,"ffwse8PqZBf4sIEkNdsA+i",null,null,null,1,0],[1,-2.85,0.766,-2.616],[3,-0.007707220961668685,-0.0985673335815995,0.07757256533280044,0.9920723646001587],[1,1.8,1.8,1.8],[1,0,-11.348,8.942]],[27,"RootNode",12,[-41,-42,-43],[1,"12tzV7tYdKJJxbVmqiEpry",null,null,null,1,0]],[33,"grass",1,[-45],[[37,"grass<SkeletalAnimation>",true,-44,[0,"a5eATDuwJGuL6l09vX0n3S"],[33],34]],[1,"adNP+ELEhC4awfcKkY8jYJ",null,null,null,1,0],[1,-3.252,0.663,-3.355],[3,-0.005303598000440666,-0.09872584440048117,0.053380291603709065,0.9936677633716235],[1,1.6,1.6,1.6],[1,9.996766443584073e-17,-11.348,6.150000000000002]],[27,"RootNode",14,[-46,-47,-48],[1,"0eVA3+ezRBf4EQOOoMIo4S",null,null,null,1,0]],[33,"grass",1,[-50],[[37,"grass<SkeletalAnimation>",true,-49,[0,"8fKHzMP19M76liKGOWy5fp"],[38],39]],[1,"33gYFxG8dO2r8iKjzjEx4z",null,null,null,1,0],[1,-4.716,0.534,-2.539],[3,-0.011417842217574529,0.10201162854238845,0.09441482697624534,0.9902267926936081],[1,1.2999999999999998,1.3,1.3],[1,-2.442,11.991,10.641]],[27,"RootNode",16,[-51,-52,-53],[1,"53OGGCuwFNs4KQ0nQRdow5",null,null,null,1,0]],[33,"grass",1,[-55],[[37,"grass<SkeletalAnimation>",true,-54,[0,"63dAWSpBBOqo5RjIXi5sEW"],[43],44]],[1,"27mCip0lFNkL+6Dj/Bpwj4",null,null,null,1,0],[1,-3.151,0.706,-2.905],[3,-0.01606605470413201,0.10576273729137807,0.0511818299419083,0.9929433748057723],[1,1.6,1.6,1.6],[1,-2.461,12.281,5.638]],[27,"RootNode",18,[-56,-57,-58],[1,"560/1xR41BPKG+lcc5935I",null,null,null,1,0]],[33,"grass",1,[-60],[[37,"grass<SkeletalAnimation>",true,-59,[0,"5c8UINxBNN1bAOwYYO6ZIW"],[48],49]],[1,"50aim7sdtB2rmsHB4KRkd5",null,null,null,1,0],[1,2.179,0.714,-3.159],[3,0.0002046174412504865,-0.2725489284000769,-0.05622568582446521,0.9604976376926917],[1,1.4,1.4,1.4],[1,-1.744,-31.778,-6.207]],[27,"RootNode",20,[-61,-62,-63],[1,"25mf8t9bhJIo3E0lcGCo1H",null,null,null,1,0]],[33,"grass",1,[-65],[[37,"grass<SkeletalAnimation>",true,-64,[0,"2dbXeRDsVAWK67o3tGgUEl"],[53],54]],[1,"70DWXrCRRL4pWATtzgi7DN",null,null,null,1,0],[1,5.041,0.406,-3.58],[3,0.026333680128465056,-0.27127042474669716,-0.14805365417229147,0.9506834433368816],[1,1.4,1.4,1.4],[1,-1.815,-32.126,-17.205]],[27,"RootNode",22,[-66,-67,-68],[1,"9dXaYb8ytBBb2yYH4yN6Vh",null,null,null,1,0]],[33,"grass",1,[-70],[[37,"grass<SkeletalAnimation>",true,-69,[0,"42733HPMdIEqobiaBVXbRJ"],[58],59]],[1,"7aOtJ3fThN27Zj4fmkg0ut",null,null,null,1,0],[1,4.153,0.548,-3.566],[3,0.01263456693718553,-0.27225485806840527,-0.09997674733537244,0.9569338064718487],[1,1.4,1.4,1.4],[1,-1.769,-31.94,-11.433]],[27,"RootNode",24,[-71,-72,-73],[1,"fa4L3FVuFMwYhNq67HoU7c",null,null,null,1,0]],[28,"grass",3,[[29,-74,[0,"a6J1jU/r1BPKNIcVMEREit"],[0],[11],2,1,2]],[1,"5fs1r6h0xEiJFeWVPk8SNl",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",3,[-75],[1,"daWdShf/9NHLgm8BB+DJZm",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",27,[[19,"Bone003",-76,[1,"8e/dPEvbdIMo48q55vpZZ3",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"beKna0bXZNtrHWMkpFZoVU",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",3,[-77],[1,"94aP4+w7dE/qUrh7Cfcv3Y",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",29,[[19,"Bone006",-78,[1,"96ATlvvpZKqpZWVYxnyW6U",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"8fu8biB4BPFKtDBKsYv4K/",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",5,[[29,-79,[0,"28WH2cvhNDFbN3it+8Q+XK"],[5],[11],4,6,7]],[1,"74Q+wg/aVBj5Bkvd+Cqz4L",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",5,[-80],[1,"4fGc2baulLjbJeePpPYcqt",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",32,[[19,"Bone003",-81,[1,"af9wSIs/ZHx5FXOjfa1Jum",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"25LOOT8GBDpr0h1KIC5gCx",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",5,[-82],[1,"b8DSzxi5tJyKiMnjvG0NLg",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",34,[[19,"Bone006",-83,[1,"65QAhjUVBAtLwEci9t05Ey",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"e75gT5ogJMOoh/2sggS7OQ",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",7,[[29,-84,[0,"87exLhmM1P35jx6GLN7j5f"],[10],[11],6,11,12]],[1,"60njdFxDhJWowG9HZr9kRy",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",7,[-85],[1,"dfSzBMugdCkL5lyChYPcpt",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",37,[[19,"Bone003",-86,[1,"91jR835RZHKbRhzSn1x2pJ",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"3bw6IJ5hBJ0aqjcninjsA3",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",7,[-87],[1,"36km6+kJtJZ4iiy8pwU3RO",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",39,[[19,"Bone006",-88,[1,"977HJ5Wy5HiapZRnYB3I8X",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"3da6ppQblGu7DGQDIjczFt",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",9,[[29,-89,[0,"dduLonFhNK+q908BUlLM7f"],[15],[11],8,16,17]],[1,"f2zxp5nX1CJq18JC2EndYO",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",9,[-90],[1,"3c+BtM6atJC4XerbYlNlM0",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",42,[[19,"Bone003",-91,[1,"baL59AVvRKlKmpQqSjNAYI",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"89NJAVd1tBZ6C0iX/YbeY2",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",9,[-92],[1,"9byDe6eNtGPIztX4VSZKlQ",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",44,[[19,"Bone006",-93,[1,"6fAgsRfRRHeoZrCvNeGhDK",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"8exO45eF5F2KzRxFbNE1M/",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",11,[[29,-94,[0,"af0f1GeGlKf5MvKMEuH8MJ"],[20],[11],10,21,22]],[1,"a2WxB7prNBKZLuuRtE7RC2",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",11,[-95],[1,"d9cSWZZzxJ0JJz3NZ3KYKr",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",47,[[19,"Bone003",-96,[1,"65JgfqDUlBhq62ZblXl99a",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"613BOOO+hIlqnTjr1LZ7yD",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",11,[-97],[1,"daMGy+QoZIMbYWUh1/PBDR",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",49,[[19,"Bone006",-98,[1,"4bzVNkn1hF04sTb5BrBwWZ",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"aea82LsKdAiqVuBFPi2Vfz",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",13,[[29,-99,[0,"e9BPt5G81CloUmA5IJNHIQ"],[25],[11],12,26,27]],[1,"32O+zfC79Ly5/JDvR+zPy3",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",13,[-100],[1,"2csxgVNAlDEIWU7lnXQfKS",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",52,[[19,"Bone003",-101,[1,"f31n3srf1OQ6ztTn+Z0+bi",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"39pnXuaeZGe5VqFTUXoXAo",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",13,[-102],[1,"e1Z+TO4odC37Bc8FKLNniF",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",54,[[19,"Bone006",-103,[1,"c8HIUzEBxJx72ffmHr7Yzh",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"82tqRzYDNKi6iXruWWHldm",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",15,[[29,-104,[0,"7dt8ZZ5EBNDIxOgpt1XbGu"],[30],[11],14,31,32]],[1,"3c/GljN9JNKpGUQDJiCaAz",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",15,[-105],[1,"17tlC2EGZMWoKAixVNAp0A",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",57,[[19,"Bone003",-106,[1,"9fnTS8hnVIWqrzTdhgEpre",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"77DlSvZMVCFLNlyGWiwIha",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",15,[-107],[1,"d1EnMgh6RE7o+kI5cUNlG0",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",59,[[19,"Bone006",-108,[1,"8cUixi2TpMHINjSklAPeYi",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"b7XmnH2bBCVpvgTAKnVXA2",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",17,[[29,-109,[0,"c4Nekl9YtKUKupS0ASX7It"],[35],[11],16,36,37]],[1,"43yCcO1I5D6qP+LJIIGKjX",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",17,[-110],[1,"0aJTcuk/5M56nEkb+D7tN9",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",62,[[19,"Bone003",-111,[1,"d5T2sohQVAEa4ljoSzlMKU",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"93hV+qqgFP44pIvuByy6RE",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",17,[-112],[1,"6etpava3ZGlovr3HG7SpRo",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",64,[[19,"Bone006",-113,[1,"6c2sTe+khLGYrsZVSADL4H",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"ecsSU+lvpNf7DhOOeFG7w2",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",19,[[29,-114,[0,"b9cuhcVRxPvZTPHcAyE7eS"],[40],[11],18,41,42]],[1,"87cW2HzEtNk4+RMW95NbLB",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",19,[-115],[1,"16ssZzbLdO76GQg4Dvdp/y",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",67,[[19,"Bone003",-116,[1,"5bcVkwfGRPza49BU4T6rqn",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"fcqb+cLDVJ3KNvBTyJYBwm",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",19,[-117],[1,"0eRKfLOh9OdLsOOjTosv1c",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",69,[[19,"Bone006",-118,[1,"0b/yPLcR1FiZPqyfaG8HBZ",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"0fPapM97RGmYmlB69FuuSF",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",21,[[29,-119,[0,"f3T3OFBBJBYrGbPSQ+k7GJ"],[45],[11],20,46,47]],[1,"08LJZ1ezRCiqnszI5cXQTx",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",21,[-120],[1,"c9g0zchT9L8IQmY+99TABR",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",72,[[19,"Bone003",-121,[1,"d8OdalQsZKwLFf2mFuR1VJ",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"ecFy8CTgxCib8Fky/YcoUL",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",21,[-122],[1,"91+xPZxDtGRp/x7cNrBUhM",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",74,[[19,"Bone006",-123,[1,"66R8TA3S1NT4HLywjDiP1Q",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"963dgjTmdES7q6KBvCTllJ",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",23,[[29,-124,[0,"d0A5LfhGhAfrDnBGJ3JzOe"],[50],[11],22,51,52]],[1,"203+J3Vb1LP7KUgkjLvNtX",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",23,[-125],[1,"9eOEdVVahA+rbDiF4AJNNX",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",77,[[19,"Bone003",-126,[1,"3aJII/zG9KaYapX0uizphW",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"48r+NZR1BD7Y5qEv/ruQsO",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",23,[-127],[1,"469eCD0ttKHZacZ3xtfeuD",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",79,[[19,"Bone006",-128,[1,"1fFpy0ihVOYbzhBLRLkL1Y",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"d9iCqzyppAILXebiHSqtDk",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[28,"grass",25,[[29,-129,[0,"161SEdWiFO/abXxUI8RkYk"],[55],[11],24,56,57]],[1,"80TsYKkUVBAIbPGc2Ao+X4",null,null,null,1,0],[3,0.37992816729770207,0.5963678291908521,0.5963678291908521,-0.37992816729770207],[1,0.614784121513367,0.614784121513367,0.614784121513367],[1,-90,-115.0000056286655,0]],[23,"Bone001",25,[-130],[1,"54j/6cneBCF4PpXQIO+ZrT",null,null,null,1,0],[1,-0.0461842827498913,0.0000118009265861474,-0.0284814611077309],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone002",82,[[19,"Bone003",-131,[1,"6aDs2ciZhDh6tahiNmO4QO",null,null,null,1,0],[1,0.0397140197455883,-1.19209286886246e-9,7.15255721317476e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"1er+9JvftCj5j548DE5PNk",null,null,null,1,0],[1,0.0404664427042007,-3.57627860658738e-9,0],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]],[23,"Bone004",25,[-132],[1,"c8ON8aNTZH1YV9KZsolNGO",null,null,null,1,0],[1,0.0710692703723907,0.0000118009265861474,0.0136896027252078],[3,-0.0000017283479103639154,-0.000001696768662714476,0.7049074170330618,0.7092993256770451],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-0.0005507418826256091,0.00027320859410338513,89.64412979694991]],[18,"Bone005",84,[[19,"Bone006",-133,[1,"1eZ45FwjhMoY5AmDd/ApaW",null,null,null,1,0],[1,0.039714016020298,0,7.74860353658369e-9],[3,1.4018830392883508e-10,-1.4662893682703937e-13,-0.0010459420626472054,0.9999994530024512],[1,1.606440509162768e-8,-1.4726229276075984e-18,-0.11985615346346049]]],[1,"7fkJUsKFZMHbutZKiHcKAf",null,null,null,1,0],[1,0.0404664427042007,-4.76837147544984e-9,5.9604643443123e-10],[3,0.000002421418716486127,1.5182564735607207e-8,0.006269989150778519,0.9999803434219023],[1,0.000277479600078167,-3.18993241527229e-13,0.7184925395739944]]],0,[0,12,1,0,-1,2,0,-2,4,0,-3,6,0,-4,8,0,-5,10,0,-6,12,0,-7,14,0,-8,16,0,-9,18,0,-10,20,0,-11,22,0,-12,24,0,0,2,0,-1,3,0,-1,26,0,-2,27,0,-3,29,0,0,4,0,-1,5,0,-1,31,0,-2,32,0,-3,34,0,0,6,0,-1,7,0,-1,36,0,-2,37,0,-3,39,0,0,8,0,-1,9,0,-1,41,0,-2,42,0,-3,44,0,0,10,0,-1,11,0,-1,46,0,-2,47,0,-3,49,0,0,12,0,-1,13,0,-1,51,0,-2,52,0,-3,54,0,0,14,0,-1,15,0,-1,56,0,-2,57,0,-3,59,0,0,16,0,-1,17,0,-1,61,0,-2,62,0,-3,64,0,0,18,0,-1,19,0,-1,66,0,-2,67,0,-3,69,0,0,20,0,-1,21,0,-1,71,0,-2,72,0,-3,74,0,0,22,0,-1,23,0,-1,76,0,-2,77,0,-3,79,0,0,24,0,-1,25,0,-1,81,0,-2,82,0,-3,84,0,0,26,0,-1,28,0,4,28,0,-1,30,0,4,30,0,0,31,0,-1,33,0,4,33,0,-1,35,0,4,35,0,0,36,0,-1,38,0,4,38,0,-1,40,0,4,40,0,0,41,0,-1,43,0,4,43,0,-1,45,0,4,45,0,0,46,0,-1,48,0,4,48,0,-1,50,0,4,50,0,0,51,0,-1,53,0,4,53,0,-1,55,0,4,55,0,0,56,0,-1,58,0,4,58,0,-1,60,0,4,60,0,0,61,0,-1,63,0,4,63,0,-1,65,0,4,65,0,0,66,0,-1,68,0,4,68,0,-1,70,0,4,70,0,0,71,0,-1,73,0,4,73,0,-1,75,0,4,75,0,0,76,0,-1,78,0,4,78,0,-1,80,0,4,80,0,0,81,0,-1,83,0,4,83,0,-1,85,0,4,85,0,16,1,133],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14,-1,11,13,-1,14],[9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8,9,10,11,8,8]],[[[88,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[18,17],[32,17]],[[[86],[43,"ppController_NEO3_R",[-2],[1,"f9TD6pPEtaVq85CDpQYi3U",null,null,null,-1,0]],[27,"ppController_NEO3_R",1,[-3],[1,"f26Sqljf5alZdxeOvNBBSy",null,null,null,1,0]],[8,"ppController_NEO3_R_1",2,[[48,-4,[0,"d3RsCI5ddSLKaNhgzfrLy2"],[0],[11],1]],[1,"43ilRMeOdWjqb/Rq7uD8YI",null,null,null,1,0]]],0,[0,12,1,0,-1,2,0,-1,3,0,0,3,0,16,1,4],[0,0],[-1,11],[155,156]],[[[25,".bin",207851589,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":120960,"length":20856,"count":10428,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":120960,"count":2520,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.6775031089782715,-4.630033016204834,-8.221780776977539],"maxPosition",8,[1,4.655786037445068,9.338662147521973,8.229376792907715]]],-1],0,0,[],[],[]],[[[45,"seafloor",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true}],[[[{"metallic":0.400000005960464,"roughness":0.70710676908493,"alphaThreshold":0},"albedoScale",8,[1,1,1,1],"mainTexture",6,0]],11]]],0,0,[0,0],[18,17],[157,18]],[[[39,"RichText"],[120,"RichText",8388608,[[2,-2,[0,"41X6sNOX9Asa8pt5euv67+"],[5,153.38,50.4]],[197,-3,[0,"07iIU9XAlNAbS1USleTTvG"]],[46,-4,[0,"72H9MmzUBJIqTM5ENi2X3o"]]],[1,"c46/YsCPVOJYA4mWEpNYRx",null,null,null,-1,0],[1,0.03,0.03,0.03]]],0,[0,12,1,0,0,1,0,0,1,0,0,1,0,16,1,4],[],[],[]],[[[45,"tree",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{"USE_BASE_COLOR_MAP":true}],[[{},[{},"specular",8,[4,16777215],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[18,17],[158,19]],[[[45,"soldier",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{"USE_BASE_COLOR_MAP":true}],[[{},[{},"specular",8,[4,16777215],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[18,17],[159,19]],[[[45,"shield",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_ALBEDO_MAP":true},{"USE_ALBEDO_MAP":true},{"USE_ALBEDO_MAP":true}],[[[{"alphaThreshold":0,"roughness":0.70710676908493,"metallic":0.400000005960464},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[18,17],[160,18]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[161]],[[[45,"stone",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_OUTLINE_PASS":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{"USE_BASE_COLOR_MAP":true,"BASE_COLOR_MAP_AS_SHADE_MAP_1":true,"BASE_COLOR_MAP_AS_SHADE_MAP_2":true},{"USE_BASE_COLOR_MAP":true}],[[{},[{},"specular",8,[4,16777215],"mainTexture",6,0],{},{}],0,11,0,0]]],0,0,[0,0],[18,17],[162,19]],[[[90,"legacy/toon",[{"hash":4245385097,"name":"legacy/toon|legacy/main-functions/outline-vs:vert|legacy/main-functions/outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_mainLitColor;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_POSITION_SCALING","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"}]},{"hash":2091346831,"name":"legacy/toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","stageFlags":16,"tags":{"builtin":"local"},"members":[{"name":"cc_lightPos","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true},{"name":"cc_lightColor","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightSizeRangeAngle","typename":"vec4","type":16,"count":0,"isArray":true},{"name":"cc_lightDir","typename":"vec4","type":16,"count":0,"isArray":true}],"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBiasAndProbeId.x + cc_shadowWHPBInfo.w, a_localShadowBiasAndProbeId.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      mediump vec4 cc_shadowNFLSInfo;\n      mediump vec4 cc_shadowWHPBInfo;\n      mediump vec4 cc_shadowLPNNInfo;\n      lowp vec4 cc_shadowColor;\n      mediump vec4 cc_planarNDInfo;\n    };\n    #if CC_SUPPORT_CASCADED_SHADOW_MAP\n      layout(std140) uniform CCCSM {\n        highp vec4 cc_csmViewDir0[4];\n        highp vec4 cc_csmViewDir1[4];\n        highp vec4 cc_csmViewDir2[4];\n        highp vec4 cc_csmAtlas[4];\n        highp mat4 cc_matCSMViewProj[4];\n        highp vec4 cc_csmProjDepthInfo[4];\n        highp vec4 cc_csmProjInfo[4];\n        highp vec4 cc_csmSplitsInfo;\n      };\n    #endif\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotShadowMap;\n      float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        #if CC_SHADOWMAP_FORMAT == 1\n          return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n        #endif\n      }\n      float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n          block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n          block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n        #endif\n        float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n        float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n        float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n        float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n          block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n          block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n          block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n          block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n          block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n          block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n          block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n        #endif\n        float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n      float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 twoTap = oneTap * 2.0;\n        vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n        vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n        vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n        vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n        vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n        vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n        vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n        vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n        vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n        vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n        vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n        vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n        vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n        vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n        vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n        vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n        vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n        vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n        vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n        vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n        vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n        vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n        vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n        vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n        vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n        float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n          block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n          block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n          block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n          block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n          block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n          block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n          block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n          block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n          block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n          block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n          block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n          block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n          block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n          block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n          block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n          block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n          block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n          block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n          block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n          block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n          block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n          block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n          block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n          block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n        #endif\n        vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n        vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n        vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n        vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n        vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n        float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n        vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n        vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n        vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n        vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n        float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n        vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n        vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n        vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n        vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n        float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n        vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n        vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n        vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n        vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n        float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n        float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n        return fAvg;\n      }\n      bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n      {\n      \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n      \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n      \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n      \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n      \t\treturn false;\n      \t}\n      \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n      \treturn true;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n      {\n        vec4 newShadowPos = shadowPos;\n        if (normalBias > EPSILON_LOWP)\n        {\n          vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n          if (viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n      {\n      \tvec4 newShadowPos = shadowPos;\n      \tif (normalBias > EPSILON_LOWP)\n      \t{\n      \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n      \t\tif (viewNormal.z < 0.1)\n      \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      \t}\n      \treturn newShadowPos;\n      }\n      float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n      {\n      \treturn (NDCDepth - projBiasZ) / projScaleZ;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n      {\n      \tfloat coeffA = projScaleZ;\n      \tfloat coeffB = projBiasZ;\n      \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n      \tviewSpacePos_z += viewspaceDepthBias;\n      \tvec4 result = shadowPos;\n      \tresult.z = viewSpacePos_z * coeffA + coeffB;\n      \treturn result;\n      }\n      float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCShadowFactorBase(out vec4 shadowPosWithDepthBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n        pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n        float realtimeShadow = 1.0;\n        #if CC_DIR_SHADOW_PCF_TYPE == 3\n          realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 2\n          realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 1\n          realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 0\n          realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n        #endif\n        shadowPosWithDepthBias = pos;\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n      #if CC_SUPPORT_CASCADED_SHADOW_MAP\n        bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n          highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n          highp float minRange = cc_csmSplitsInfo.x;\n          highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n          ratio = 0.0;\n          if (clipPos.x <= minRange) {\n            ratio = clipPos.x * thresholdInvert;\n            return true;\n          }\n          if (clipPos.x >= maxRange) {\n            ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n            return true;\n          }\n          if (clipPos.y <= minRange) {\n            ratio = clipPos.y  * thresholdInvert;\n            return true;\n          }\n          if (clipPos.y >= maxRange) {\n            ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n            return true;\n          }\n          return false;\n        }\n        bool CCHasCSMLevel(int level, vec3 worldPos) {\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          bool hasLevel = false;\n          for (int i = 0; i < 4; i++) {\n            if (i == level) {\n              vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n              if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                  clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                  clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n                hasLevel = true;\n              }\n            }\n          }\n          return hasLevel;\n        }\n        void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n            }\n          }\n        }\n        int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n        {\n          int level = -1;\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n              #if CC_CASCADED_LAYERS_TRANSITION\n                isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n              #endif\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n              level = i;\n            }\n          }\n          return level;\n        }\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n        {\n          bool isTransitionArea = false;\n          highp float transitionRatio = 0.0;\n          return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n        }\n        float CCCSMFactorBase(out vec4 csmPos, out vec4 csmPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n        {\n          bool isTransitionArea = false;\n          highp float ratio = 0.0;\n          csmPos = vec4(1.0);\n          vec4 shadowProjDepthInfo, shadowProjInfo;\n          vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n          int level = -1;\n          #if CC_CASCADED_LAYERS_TRANSITION\n            level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          #else\n            level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          #endif\n          if (level < 0) { return 1.0; }\n          vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n          pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n          csmPosWithBias = pos;\n          float realtimeShadow = 1.0;\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n          #endif\n          #if CC_CASCADED_LAYERS_TRANSITION\n            vec4 nextCSMPos = vec4(1.0);\n            vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n            vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n            float nextRealtimeShadow = 1.0;\n            CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n            bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n            if (hasNextLevel && isTransitionArea) {\n              vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n              nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n              #if CC_DIR_SHADOW_PCF_TYPE == 3\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 2\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 1\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 0\n                nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n              #endif\n              return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n            }\n            return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n          #else\n            return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n          #endif\n        }\n      #else\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n          return -1;\n        }\n        float CCCSMFactorBase(out vec4 csmPos, out vec4 csmPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n          csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n          return CCShadowFactorBase(csmPosWithBias, csmPos, N, shadowBias);\n        }\n      #endif\n      float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n        vec4 shadowPosWithDepthBias;\n        return CCShadowFactorBase(shadowPosWithDepthBias, shadowPos, N, shadowBias);\n      }\n      float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n        vec4 csmPos, csmPosWithBias;\n        return CCCSMFactorBase(csmPos, csmPosWithBias, worldPos, N, shadowBias);\n      }\n    #endif\n        #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight + EPSILON_LOWP, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      #endif\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n      #endif\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 localBaseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    localBaseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = localBaseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * (v_tangent.w > 0.0 ? 1.0 : -1.0);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    #define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBiasAndProbeId.x + cc_shadowWHPBInfo.w, a_localShadowBiasAndProbeId.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n  float shadowCover;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n    #if CC_SUPPORT_CASCADED_SHADOW_MAP\n      uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n  uniform highp vec4 cc_csmSplitsInfo;\n    #endif\n    #if CC_RECEIVE_SHADOW\n      uniform highp sampler2D cc_shadowMap;\n      uniform highp sampler2D cc_spotShadowMap;\n      float NativePCFShadowFactorHard (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        #if CC_SHADOWMAP_FORMAT == 1\n          return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n        #endif\n      }\n      float NativePCFShadowFactorSoft (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n        #endif\n        float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n        float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n        float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n        float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n          block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n          block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n          block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n          block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n          block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n        #endif\n        float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n        float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n      float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, highp sampler2D shadowMap, vec2 shadowMapResolution)\n      {\n        vec2 oneTap = 1.0 / shadowMapResolution;\n        vec2 twoTap = oneTap * 2.0;\n        vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n        vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n        vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n        vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n        vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n        vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n        vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n        vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n        vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n        vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n        vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n        vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n        vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n        vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n        vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n        vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n        vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n        vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n        vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n        vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n        vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n        vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n        vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n        vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n        vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n        float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n        #if CC_SHADOWMAP_FORMAT == 1\n          block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        #else\n          block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n          block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n          block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n          block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n          block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n          block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n          block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n          block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n          block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n          block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n          block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n          block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n          block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n          block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n          block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n          block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n          block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n          block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n          block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n          block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n          block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n          block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n          block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n          block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n          block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n        #endif\n        vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n        vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n        vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n        vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n        vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n        float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n        vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n        vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n        vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n        vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n        float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n        vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n        vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n        vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n        vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n        float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n        vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n        vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n        vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n        vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n        float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n        float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n        return fAvg;\n      }\n      bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n      {\n      \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n      \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n      \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n      \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n      \t\treturn false;\n      \t}\n      \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n      \treturn true;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n      {\n        vec4 newShadowPos = shadowPos;\n        if (normalBias > EPSILON_LOWP)\n        {\n          vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n          if (viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n      {\n      \tvec4 newShadowPos = shadowPos;\n      \tif (normalBias > EPSILON_LOWP)\n      \t{\n      \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n      \t\tif (viewNormal.z < 0.1)\n      \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      \t}\n      \treturn newShadowPos;\n      }\n      float GetViewSpaceDepthFromNDCDepth_Orthgraphic(float NDCDepth, float projScaleZ, float projBiasZ)\n      {\n      \treturn (NDCDepth - projBiasZ) / projScaleZ;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n      {\n      \tfloat coeffA = projScaleZ;\n      \tfloat coeffB = projBiasZ;\n      \tfloat viewSpacePos_z = GetViewSpaceDepthFromNDCDepth_Orthgraphic(shadowPos.z, projScaleZ, projBiasZ);\n      \tviewSpacePos_z += viewspaceDepthBias;\n      \tvec4 result = shadowPos;\n      \tresult.z = viewSpacePos_z * coeffA + coeffB;\n      \treturn result;\n      }\n      float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n    \t  vec3 shadowNDCPos;\n    \t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n    \t\t  return 1.0;\n    \t  }\n        return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n      }\n      float CCShadowFactorBase(out vec4 shadowPosWithDepthBias, vec4 shadowPos, vec3 N, vec2 shadowBias)\n      {\n        vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n        pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n        float realtimeShadow = 1.0;\n        #if CC_DIR_SHADOW_PCF_TYPE == 3\n          realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 2\n          realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 1\n          realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n        #endif\n        #if CC_DIR_SHADOW_PCF_TYPE == 0\n          realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n        #endif\n        shadowPosWithDepthBias = pos;\n        return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n      }\n      #if CC_SUPPORT_CASCADED_SHADOW_MAP\n        bool CCGetCSMLevelWithTransition(out highp float ratio, vec3 clipPos) {\n          highp float maxRange = 1.0 - cc_csmSplitsInfo.x;\n          highp float minRange = cc_csmSplitsInfo.x;\n          highp float thresholdInvert = 1.0 / cc_csmSplitsInfo.x;\n          ratio = 0.0;\n          if (clipPos.x <= minRange) {\n            ratio = clipPos.x * thresholdInvert;\n            return true;\n          }\n          if (clipPos.x >= maxRange) {\n            ratio = 1.0 - (clipPos.x - maxRange) * thresholdInvert;\n            return true;\n          }\n          if (clipPos.y <= minRange) {\n            ratio = clipPos.y  * thresholdInvert;\n            return true;\n          }\n          if (clipPos.y >= maxRange) {\n            ratio = 1.0 - (clipPos.y - maxRange) * thresholdInvert;\n            return true;\n          }\n          return false;\n        }\n        bool CCHasCSMLevel(int level, vec3 worldPos) {\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          bool hasLevel = false;\n          for (int i = 0; i < 4; i++) {\n            if (i == level) {\n              vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n              if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                  clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                  clipPos.z >= 0.0 && clipPos.z <= 1.0) {\n                hasLevel = true;\n              }\n            }\n          }\n          return hasLevel;\n        }\n        void CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos, int level) {\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && i == level) {\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n            }\n          }\n        }\n        int CCGetCSMLevel(out bool isTransitionArea, out highp float transitionRatio, out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n        {\n          int level = -1;\n          highp float layerThreshold = cc_csmViewDir0[0].w;\n          for (int i = 0; i < 4; i++) {\n            vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n            vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n            if (clipPos.x >= layerThreshold && clipPos.x <= (1.0 - layerThreshold) &&\n                clipPos.y >= layerThreshold && clipPos.y <= (1.0 - layerThreshold) &&\n                clipPos.z >= 0.0 && clipPos.z <= 1.0 && level < 0) {\n              #if CC_CASCADED_LAYERS_TRANSITION\n                isTransitionArea = CCGetCSMLevelWithTransition(transitionRatio, clipPos);\n              #endif\n              csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n              csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n              shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n              shadowProjInfo = cc_csmProjInfo[i];\n              shadowViewDir0 = cc_csmViewDir0[i].xyz;\n              shadowViewDir1 = cc_csmViewDir1[i].xyz;\n              shadowViewDir2 = cc_csmViewDir2[i].xyz;\n              level = i;\n            }\n          }\n          return level;\n        }\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos)\n        {\n          bool isTransitionArea = false;\n          highp float transitionRatio = 0.0;\n          return CCGetCSMLevel(isTransitionArea, transitionRatio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n        }\n        float CCCSMFactorBase(out vec4 csmPos, out vec4 csmPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias)\n        {\n          bool isTransitionArea = false;\n          highp float ratio = 0.0;\n          csmPos = vec4(1.0);\n          vec4 shadowProjDepthInfo, shadowProjInfo;\n          vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n          int level = -1;\n          #if CC_CASCADED_LAYERS_TRANSITION\n            level = CCGetCSMLevel(isTransitionArea, ratio, csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          #else\n            level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n          #endif\n          if (level < 0) { return 1.0; }\n          vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n          pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n          csmPosWithBias = pos;\n          float realtimeShadow = 1.0;\n          #if CC_DIR_SHADOW_PCF_TYPE == 3\n            realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 2\n            realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 1\n            realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n          #endif\n          #if CC_DIR_SHADOW_PCF_TYPE == 0\n            realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n          #endif\n          #if CC_CASCADED_LAYERS_TRANSITION\n            vec4 nextCSMPos = vec4(1.0);\n            vec4 nextShadowProjDepthInfo, nextShadowProjInfo;\n            vec3 nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2;\n            float nextRealtimeShadow = 1.0;\n            CCGetCSMLevel(nextCSMPos, nextShadowProjDepthInfo, nextShadowProjInfo, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, worldPos, level + 1);\n            bool hasNextLevel = CCHasCSMLevel(level + 1, worldPos);\n            if (hasNextLevel && isTransitionArea) {\n              vec4 nexPos = ApplyShadowDepthBias_FaceNormal(nextCSMPos, N, shadowBias.y, nextShadowViewDir0, nextShadowViewDir1, nextShadowViewDir2, nextShadowProjInfo.xy);\n              nexPos = ApplyShadowDepthBias_Orthographic(nexPos, shadowBias.x, nextShadowProjDepthInfo.x, nextShadowProjDepthInfo.y);\n              #if CC_DIR_SHADOW_PCF_TYPE == 3\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft5X(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 2\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft3X(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 1\n                nextRealtimeShadow = CCGetDirLightShadowFactorSoft(nexPos);\n              #endif\n              #if CC_DIR_SHADOW_PCF_TYPE == 0\n                nextRealtimeShadow = CCGetDirLightShadowFactorHard(nexPos);\n              #endif\n              return mix(mix(nextRealtimeShadow, realtimeShadow, ratio), 1.0, cc_shadowNFLSInfo.w);\n            }\n            return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n          #else\n            return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n          #endif\n        }\n      #else\n        int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n          return -1;\n        }\n        float CCCSMFactorBase(out vec4 csmPos, out vec4 csmPosWithBias, vec3 worldPos, vec3 N, vec2 shadowBias) {\n          csmPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n          return CCShadowFactorBase(csmPosWithBias, csmPos, N, shadowBias);\n        }\n      #endif\n      float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias) {\n        vec4 shadowPosWithDepthBias;\n        return CCShadowFactorBase(shadowPosWithDepthBias, shadowPos, N, shadowBias);\n      }\n      float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n        vec4 csmPos, csmPosWithBias;\n        return CCCSMFactorBase(csmPos, csmPosWithBias, worldPos, N, shadowBias);\n      }\n    #endif\n        #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight + EPSILON_LOWP, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if(s.shadowCover < NL && cc_mainLitDir.w > 0.0) {\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      #endif\n      #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n        shadow = CCShadowFactorBase(v_shadowPos, N, s.shadowBias);\n      #endif\n    }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 miscParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying mediump vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 localBaseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    localBaseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = localBaseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * (v_tangent.w > 0.0 ? 1.0 : -1.0);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n  s.shadowCover = miscParams.x;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":139,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":109}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_CASCADED_LAYERS_TRANSITION","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"},{"name":"CC_USE_FLOAT_OUTPUT","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_TONE_MAPPING_TYPE","type":"number","range":[0,3]},{"name":"HDR_TONE_MAPPING_ACES","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_1ST_SHADE_MAP","type":"boolean"},{"name":"USE_2ND_SHADE_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean"},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean"}]},{"hash":2985585302,"name":"legacy/toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"miscParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","stageFlags":16,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":16,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.zw;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 miscParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_ALPHA_TEST\n    #if USE_BASE_COLOR_MAP\n      baseColor *= texture(baseColorMap, v_uv);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.zw;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define UnpackBitFromFloat(value, bit) (mod(floor(value / pow(10.0, float(bit))), 10.0) > 0.0)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_ALPHA_TEST\n    #if USE_BASE_COLOR_MAP\n      baseColor *= texture2D(baseColorMap, v_uv);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":109}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_BASE_COLOR_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"passes":[{"program":"legacy/toon|legacy/main-functions/outline-vs:vert|legacy/main-functions/outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"value":[10,0,0,0]}}},{"program":"legacy/toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"forward-add","propertyIndex":1,"program":"legacy/toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"linear":true,"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"linear":true,"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"linear":true,"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"shadowCover":{"type":13,"value":[0.5],"handleInfo":["miscParams",0,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrength":{"slide":true,"step":0.001,"type":13,"value":[1],"range":[0,5],"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"miscParams":{"type":16,"value":[0.5,0,0,0]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}},{"phase":"shadow-caster","propertyIndex":1,"program":"legacy/toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1]},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1]},"specular":{"type":16,"value":[1,1,1,0.3]},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1]},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"shadeParams":{"type":16,"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white"}}}]}]]],0,0,[],[],[]],[[[47,"Skin-0",753820634,["RootNode/Bone004/Bone005/Bone006","RootNode/Bone004/Bone005","RootNode/Bone004","RootNode/Bone001/Bone002/Bone003","RootNode/Bone001/Bone002","RootNode/Bone001"],[[[7,0.0004333891556598246,0.10229005664587021,0.21936364471912384,0,-0.0009294628980569541,-0.21936167776584625,0.10229097306728363,0,0.24203883111476898,-0.0010255376109853387,2.406476085070608e-8,0,-0.08006425946950912,0.028319520875811577,-0.005389618221670389,1],[7,0.0006473671528510749,0.10228893905878067,0.21936364471912384,0,-0.001388339907862246,-0.21935929358005524,0.10229097306728363,0,0.24203617870807648,-0.0015318524092435837,2.4064471304541257e-8,0,-0.04029082506895065,0.0284869447350502,-0.005389610305428505,1],[7,-0.0006353461649268866,0.10228794068098068,0.21936413645744324,0,0.0013624817365780473,-0.21935993432998657,0.10228990018367767,0,0.2420363426208496,0.0015033365925773978,1.664581716909197e-8,0,-0.0001784319174475968,0.02797948755323887,-0.0053894720040261745,1],[7,0.0004333891556598246,0.10229005664587021,0.21936364471912384,0,-0.0009294628980569541,-0.21936167776584625,0.10229097306728363,0,0.24203883111476898,-0.0010255376109853387,2.406476085070608e-8,0,-0.08025984466075897,-0.017842883244156837,0.01121316384524107,1],[7,0.0006473671528510749,0.10228893905878067,0.21936364471912384,0,-0.001388339907862246,-0.21935929358005524,0.10229097306728363,0,0.24203617870807648,-0.0015318524092435837,2.4064471304541257e-8,0,-0.040582988411188126,-0.017674952745437622,0.011213171295821667,1],[7,-0.0006353461649268866,0.10228794068098068,0.21936413645744324,0,0.0013624817365780473,-0.21935993432998657,0.10228990018367767,0,0.2420363426208496,0.0015033365925773978,1.664581716909197e-8,0,0.00010828844096977264,-0.01818251982331276,0.011213085614144802,1]],8,8,8,8,8,8]]],0,0,[],[],[]],[[[25,".bin",891374575,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":8080,"length":462,"count":231,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":8080,"count":101,"stride":80},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5]]},"minPosition",8,[1,-0.23816974461078644,-0.3651643395423889,-0.02080436609685421],"maxPosition",8,[1,0.2359408587217331,0.26479941606521606,0.6728445887565613]]],-1],0,0,[],[],[]],[[[89,"xr-default-line-material",[{}],[{"rasterizerState":{},"depthStencilState":{"depthWrite":true},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[17],[163]],[[[45,"grass",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":0},"mainTexture",6,0]],11]]],0,0,[0,0],[18,17],[164,17]],[[{"name":"default_editbox_bg","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[165]],[[[86],[43,"ppController_NEO3_L",[-2],[1,"52y2GEYrpcWatty++3XzTc",null,null,null,-1,0]],[27,"ppController_NEO3_L",1,[-3],[1,"712iZca7xYW72Ca3UkJrH1",null,null,null,1,0]],[8,"ppController_NEO3_L_1",2,[[48,-4,[0,"a52WZjKKBQt71QBfF6lsy9"],[0],[11],1]],[1,"96X5cq9CFfq7mCsGjEH2Kn",null,null,null,1,0]]],0,[0,12,1,0,-1,2,0,-1,3,0,0,3,0,16,1,4],[0,0],[-1,11],[166,167]],[[[88,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[18,17],[32,17]],[[[25,".bin",1885889888,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":120960,"length":20856,"count":10428,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":120960,"count":2520,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.655786037445068,-4.630022048950195,-8.221785545349121],"maxPosition",8,[1,4.6775031089782715,9.338656425476074,8.22938060760498]]],-1],0,0,[],[],[]],[[[39,"islands"],[43,"islands",[-2],[1,"26LvC5hbxAuJZ9Jl2SB/IV",null,null,null,-1,0]],[27,"RootNode",1,[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12],[1,"068WXOAs1HrIDx+RBQ6XoV",null,null,null,1,0]],[28,"plane01",2,[[48,-13,[0,"ddvMFij+ZIL5lu+/NQX8Nf"],[0],[11],1]],[1,"70dgNwYARPfbvgVcNs+gIQ",null,null,null,1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,4.25968408584595,4.25968408584595,2.35247683525085],[1,-90.00000000000003,0,0]],[121,"stone1",2,[[40,1,-14,[0,"e3XMjUJKFLH41z39JaWzyB"],[2],[11],3]],[1,"fd517lz3tOuqVWGd5300X6",null,null,null,1,0],[1,-1.68451106548309,0.804959058761597,-2.55509376525879],[1,0.111417099833488,0.111417099833488,0.111417099833488],[1,0.000009334667642611398,0,0]],[38,"tree1",2,[[48,-15,[0,"a5Viy6l3VLDpf6gY5yZF+v"],[4],[11],5]],[1,"1evO3wfhhGVomhJPkvbiM/",null,null,null,1,0],[1,2.69967889785767,0.392187118530273,-3.67192149162292],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[38,"tree1(__autogen 3)",2,[[40,1,-16,[0,"e4If/bQrJCsb9D9JopZa2h"],[6],[11],7]],[1,"91DpAWXZ9CFJ+Wk1gnOU27",null,null,null,1,0],[1,4.34285020828247,0.273025780916214,-4.5796275138855],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[38,"tree1(__autogen 4)",2,[[40,1,-17,[0,"d7Vkz0NV5Mn4RUce28JVTp"],[8],[11],9]],[1,"03YnQPZo5Nc7TYZfZ1EVIK",null,null,null,1,0],[1,-2.78155946731567,0.366120487451553,-5.44366216659546],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[38,"tree1(__autogen 5)",2,[[40,1,-18,[0,"3eVATgLQJKDbqOvE33W2uc"],[10],[11],11]],[1,"aehmnp6BdEt5duOREy07Ic",null,null,null,1,0],[1,-3.78196001052856,0.328564822673798,-3.62895131111145],[3,-0.7071067811865447,-6.18172403853676e-8,-6.18172403853676e-8,0.7071067811865447],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-89.99999999999999,-0.000010017912624975451,0]],[38,"tree1(__autogen 6)",2,[[40,1,-19,[0,"2akU/MgO5Ovo6QcS0c/I7e"],[12],[11],13]],[1,"1dXVprqA1AkpKbrdcroE4U",null,null,null,1,0],[1,-6.02857780456543,0.0573978498578072,-3.32550001144409],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[38,"tree1(__autogen 7)",2,[[40,1,-20,[0,"54xaKIQbtPLK5r21VY0qmM"],[14],[11],15]],[1,"c2n9MRvPxJRbv1PP2mhkZO",null,null,null,1,0],[1,-0.547172009944916,0.595235526561737,-3.40697646141052],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[38,"tree1(__autogen 8)",2,[[40,1,-21,[0,"23UFBqszxJ/6Otof04QwYT"],[16],[11],17]],[1,"e7VpTFkQ1Ev40vpNxYe7EG",null,null,null,1,0],[1,-6.58904409408569,0.117208734154701,-1.02060234546661],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-90.00000000000003,0,0]],[38,"tree1(__autogen 9)",2,[[40,1,-22,[0,"c7PE6gNTdDw45ytwlOEWR3"],[18],[11],19]],[1,"a1wQefYUNInYWhsOmPzInv",null,null,null,1,0],[1,5.92053079605103,0.1805190294981,-2.71322011947632],[3,-0.7071067811865447,-6.18172403853676e-8,-6.18172403853676e-8,0.7071067811865447],[1,2.53999996185303,2.53999996185303,2.53999996185303],[1,-89.99999999999999,-0.000010017912624975451,0]]],0,[0,12,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,16,1,22],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,11,-1,11,-1,11,-1,11,-1,11,-1,11,-1,11,-1,11,-1,11,-1,11],[168,169,170,171,14,172,14,173,14,174,14,175,14,176,14,177,14,178,14,179]],[[[39,"soldier"],[26,"soldier",[-3],[[58,true,-2,[0,"04W3Kzvb9BZbZUGFZzfzi5"],[12],13]],[1,"6dMvPN2t1B66O9Zc3HG8dr",null,null,null,-1,0],[1,0,0.956,1.402]],[27,"RootNode",1,[-4,-5,-6,-7,-8],[1,"a5uiqiY3JH2IVaNOBBe7fQ",null,null,null,1,0]],[122,"Bip001 Spine",[-9,-10,-11],[1,"deedfocu1E0amfQjzHnnD8",null,null,null,1,0],[1,0.0765029862523079,-0.000119566058856435,1.06260117149759e-7],[3,-0.000002080475910607327,-6.936759723456761e-7,0.0003981589901667568,0.9999999207323014],[1,-0.00023837338537102568,-0.00007939450691674313,0.045625660794268635]],[123,"Bip001 Neck",[-12,-13,-14],[1,"de+U9IqPVD+qUUY0y7H/86",null,null,null,1,0],[1,0.15020164847374,-0.0000435724105045665,-1.20852522433879e-10]],[133,"Bip001",2,[[[19,"Bip001 Footsteps",-15,[1,"24sP2WouNOyq9Pp+iqRgiX",null,null,null,1,0],[1,-5.16987871290063e-28,0,-0.734457075595856],[3,-6.921034890422563e-34,6.921044533149828e-34,0.7071063043492202,0.7071072580235535],[1,0,-1.1216009582263186e-31,90]],-16],4,1],[1,"15XJ/3651AFKLyr6XRj3d7",null,null,null,1,0],[1,0,0.738336980342865,-3.74271143591121e-12],[3,-0.5000003576277411,-0.4999996423720031,-0.4999996423720031,0.5000003576277411],[1,-90,-89.99991803772988,0]],[28,"soldier",2,[[195,1,-17,[0,"78XZsd31xPjIsSP2888FcN"],[0],[11],1,1,2]],[1,"824q3ldSpHoYl9xi6zWeg4",null,null,null,1,0],[3,0.9999999999999953,0,0,-9.735359185469814e-8],[1,87.7489852905273,87.7489852905273,87.7489852905273],[1,-179.99998884410013,0,0]],[124,"Bip001 Pelvis",5,[3],[1,"9brOPlFAxPnLhkrpP6KbLQ",null,null,null,1,0],[3,-0.4999999925491744,-0.4999999925491744,-0.4999993070957696,0.5000007078049007],[1,-89.9999197452773,-89.9999197452773,-0.0000017074910412130916]],[31,"Bip001 L Thigh",3,[-18],[1,"4aENadJ59Io4SS6BMn9Aw4",null,null,null,1,0],[1,-0.0765029117465019,0.000180334449396469,0.0665242150425911],[3,-0.015412850192755845,0.9969698713847834,0.002043751751963479,-0.07621904406852757],[1,-0.098918034361683,-171.25793904676914,-1.7789668366715101]],[31,"Bip001 L Calf",8,[-19],[1,"71+6ovA8dDUowhlyNGBIbM",null,null,null,1,0],[1,0.368020862340927,-2.38418573772492e-9,1.90734859017994e-8],[3,-3.77253945323161e-21,-4.658679694134547e-18,-0.0008097870399876981,0.999999672122421],[1,-8.646032309262241e-19,-5.338462443351186e-16,-0.09279476953314847]],[31,"Bip001 L Foot",9,[-20],[1,"71/rP0sWxM1bfHuNwls2lv",null,null,null,1,0],[1,0.29802131652832,-2.38418573772492e-9,0],[3,0.0020737143220202685,-0.07621822672483194,0.016616994877612996,0.9969505289155877],[1,0.3822464844159605,-8.749946017824339,1.8805865416881686]],[18,"Bip001 L Toe0",10,[[125,"Bip001 L Toe0Nub",-21,[1,"b7ARhVJWFJP4yiboWbM1Xs",null,null,null,1,0],[1,0.00997863244265318,-2.98023217215615e-10,3.55271359939116e-17],[3,9.55341250274695e-16,-2.4399608215727e-23,1,1.83758927467374e-15],[1,-1,-1,-1],[1,180,-179.9999999999999,2.1057221983462293e-13]]],[1,"b7IX4wc+BII5SOxaDKm4bu",null,null,null,1,0],[1,0.0765028968453407,0.0984558463096619,1.90734859017994e-8],[3,-1.5454308319985125e-8,-1.5454308319985125e-8,0.7071067811865472,0.7071067811865472],[1,0,-0.0000025044778683729224,90]],[31,"Bip001 R Thigh",3,[-22],[1,"baRkxlpMJMup2UzoK3llZt",null,null,null,1,0],[1,-0.0765029117465019,0.000180703471414745,-0.0665242150425911],[3,-0.0154126518850906,0.9969698755273314,-0.0020409899233692465,0.07621910398987286],[1,0.09860398393799301,171.25792731952373,-1.7789200579558455]],[31,"Bip001 R Calf",12,[-23],[1,"8a4oYAyD9MkZi9aL5G15gW",null,null,null,1,0],[1,0.36802089214325,0,-3.55271359939116e-17],[3,2.226103102352033e-19,7.125063520427799e-18,-0.0008097898921612967,0.9999996721201113],[1,2.6170459347986135e-17,8.164935972515574e-16,-0.09279509636827488]],[31,"Bip001 R Foot",13,[-24],[1,"cdWn1utjJOUaNdTLXxb/CR",null,null,null,1,0],[1,0.29802131652832,0,-3.81469718035987e-8],[3,-0.002073778117879438,0.07621821928385913,0.016617013506159614,0.9969505290412618],[1,-0.38225392566993516,8.749945293799216,1.8805881155171484]],[18,"Bip001 R Toe0",14,[[63,"Bip001 R Toe0Nub",-25,[1,"77BI3YwgNJqKMpf0rJhZ9s",null,null,null,1,0],[1,0.00997863244265318,-2.98023217215615e-10,7.10542719878232e-17]]],[1,"26R5ll6SNGP5ArlFhrFOzH",null,null,null,1,0],[1,0.0765028968453407,0.0984558537602425,1.90734859017994e-8],[3,-1.5454308319985125e-8,-1.5454308319985125e-8,0.7071067811865472,0.7071067811865472],[1,0,-0.0000025044778683729224,90]],[126,"Bip001 Spine1",3,[4],[1,"78+5xpqyNL2aHMIBr4YHvg",null,null,null,1,0],[1,0.150201484560966,-0.000119601711048745,-3.31727090241429e-10]],[31,"Bip001 L Clavicle",4,[-26],[1,"c67UVUfoFCNLAcx8dX7SW1",null,null,null,1,0],[1,0,0.0000435078145528678,0.0232834853231907],[3,0.6087613827170933,-0.0002434881366867595,0.7933532758994495,0.0003150325566206266],[1,179.9558877717535,-104.99999523006848,0.01165464185401893]],[31,"Bip001 L UpperArm",17,[-27],[1,"66qUHYCHZNMoAvIMM8jTZn",null,null,null,1,0],[1,0.272405058145523,4.54747340722069e-15,0],[3,0.004462069723208538,0.4381802273458216,-0.0019434620153348766,0.8988739629404916],[1,0.5572016837940187,51.97620557313351,0.02386521946895269]],[31,"Bip001 L Forearm",18,[-28],[1,"503RTkgyFOwZRj7QxbXFGT",null,null,null,1,0],[1,0.263291478157043,0,0],[3,-2.7197715504795845e-20,-3.0893820368327117e-17,-0.0008803606294924629,0.9999996124825059],[1,-6.233264281423144e-18,-3.5401778996822195e-15,-0.10088191006996569]],[18,"Bip001 L Hand",19,[[19,"sword01",-29,[1,"98Mxm4C+NAIp1/ms1CXDWg",null,null,null,1,0],[1,0.0919111594557762,0.0340489186346531,-0.14926840364933],[3,0.6409670678902519,-0.3070256396863465,-0.5278458569202463,-0.4650540030872693],[1,-112.37885078724646,75.2002383569922,5.587571211625747]]],[1,"7cWlWOkFtKX6ILXuZfhYqO",null,null,null,1,0],[1,0.199572831392288,-5.9604643443123e-10,1.42108543975646e-16],[3,-0.7068252124052271,1.0458620867947887e-8,1.0614867442646885e-8,0.7073882378922519],[1,-89.95437890588059,0.0000017075473071153707,1.3340228971442967e-8]],[31,"Bip001 R Clavicle",4,[-30],[1,"9fRB6KFOpAz6pb5W8NAqZg",null,null,null,1,0],[1,0,0.0000436370064562652,-0.0232834853231907],[3,-0.6087613827171046,0.00024128768333211222,0.793353275899464,0.0003167210153793466],[1,-179.95597003338875,104.99999512047448,0.011961643569376679]],[31,"Bip001 R UpperArm",21,[-31],[1,"a72KzY4dJDrb/Ifgjl7CSF",null,null,null,1,0],[1,0.272405058145523,6.82120985672115e-14,-1.42108543975646e-16],[3,-0.030114175418424236,-0.43755956999841955,0.05059855375302801,0.897259463867486],[1,-0.5631334715243025,-51.96038786477057,6.727854372934277]],[31,"Bip001 R Forearm",22,[-32],[1,"5eAc4VAlRExZ6nABKN5Ihq",null,null,null,1,0],[1,0.263291418552399,0,-7.62939436071974e-8],[3,-8.302567498559346e-18,-5.588016764292516e-17,-0.13176086831298384,0.9912815309393233],[1,-1.8510999406615195e-15,-6.705762043264369e-15,-15.14271605062808]],[18,"Bip001 R Hand",23,[[19,"shield01",-33,[1,"4f4kzbhYBIMIVjz0nZTcvw",null,null,null,1,0],[1,0.124533005058765,-0.00692871073260903,0.0576667860150337],[3,0.5417342069004817,-0.1379658103002438,0.11668003843623054,0.8208990515846776],[1,67.2841187503732,-20.685866498064005,2.411917394086867]]],[1,"19JEI2tAtAo5mcAZ7XSRWH",null,null,null,1,0],[1,0.199572905898094,8.88178399847791e-18,0],[3,0.7068252124052272,-1.9327187937127104e-17,1.9311804031753923e-17,0.707388237892252],[1,89.95437890588059,-3.1308585900006548e-15,-7.956237644289779e-23]],[18,"Bip001 Head",4,[[63,"Bip001 HeadNub",-34,[1,"ebvw49UjBMKoIvQOBhsyUF",null,null,null,1,0],[1,0.475234657526016,-1.45519149031062e-13,2.99510855318999e-20]]],[1,"4ckJuubwNG3KpsMgkuxo12",null,null,null,1,0],[1,0.0547203049063683,-1.38777874976217e-19,2.71050537062924e-22],[3,-7.265599787883251e-14,1.1042733174299354e-9,-0.0003988305609355657,0.9999999204670887],[1,4.214242912539149e-11,1.2654042790710837e-7,-0.04570261697650697]],[28,"shield",2,[[29,-35,[0,"ffoVYmt2NOmIBz5DHpacF8"],[3],[11],1,4,5]],[1,"2fgzyRcBxNmZKzBdJpnT0Q",null,null,null,1,0],[3,0.9999999999999878,0,0,-1.569582366300871e-7],[1,87.7489852905273,87.7489852905273,87.7489852905273],[1,-179.99998201391097,0,0]],[28,"sword",2,[[29,-36,[0,"9aCVBuMeZPv6so1VxT6c40"],[6],[11],1,7,8]],[1,"d0xEUY/HZBVZJ0EMEz3doQ",null,null,null,1,0],[3,0.9999999999999878,0,0,-1.569582366300871e-7],[1,87.7489852905273,87.7489852905273,87.7489852905273],[1,-179.99998201391097,0,0]],[38,"shield01",2,[[29,-37,[0,"ca1srfPsJJgKKJww9GO/JE"],[9],[11],1,10,11]],[1,"464KPea2NOibwROP5moUvA",null,null,null,1,0],[1,-0.00499999988824129,0,0.00499999988824129],[3,0.9999999999999878,0,0,-1.569582366300871e-7],[1,87.7489852905273,87.7489852905273,87.7489852905273],[1,-179.99998201391097,0,0]]],0,[0,12,1,0,0,1,0,-1,2,0,-1,6,0,-2,5,0,-3,26,0,-4,27,0,-5,28,0,-1,8,0,-2,12,0,-3,16,0,-1,17,0,-2,21,0,-3,25,0,4,5,0,-2,7,0,0,6,0,-1,9,0,-1,10,0,-1,11,0,4,11,0,-1,13,0,-1,14,0,-1,15,0,4,15,0,-1,18,0,-1,19,0,-1,20,0,4,20,0,-1,22,0,-1,23,0,-1,24,0,4,24,0,4,25,0,0,26,0,0,27,0,0,28,0,16,1,3,4,7,4,4,16,37],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,11,13,-1,11,13,-1,11,13,-1,11,13,-1,14],[20,180,181,20,182,183,20,184,185,186,187,188,33,33]],[[[196,"default-material",[{"roughness":0.8,"metallic":0.6}],[{}]]],0,0,[0],[17],[18]],[[[25,".bin",2341262723,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":70128,"length":6960,"count":3480,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":70128,"count":974,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]},"minPosition",8,[1,-0.006235902663320303,-0.022199034690856934,-0.00308204535394907],"maxPosition",8,[1,0.006235902663320303,0.0000021968080545775592,0.0029080540407449007]]],-1],0,0,[],[],[]],[[[47,"Skin-0",2507836796,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","RootNode/Bip001/Bip001 Pelvis","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","RootNode/Bip001","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 HeadNub","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/shield01"],[[[7,13.330132484436035,0.5659459233283997,-86.72872161865234,0,86.68508911132812,2.7542707920074463,13.341398239135742,0,2.808293342590332,-87.70392608642578,-0.14067713916301727,0,0.719279408454895,0.022746119648218155,0.1780078411102295,1],[7,-13.330143928527832,-0.5657054781913757,-86.72872924804688,0,86.68508911132812,2.7542707920074463,-13.34140396118164,0,2.8082568645477295,-87.70392608642578,0.14043928682804108,0,0.7192792892456055,0.022746119648218155,-0.17800788581371307,1],[7,0.00012169029650976881,0.0002419860102236271,87.74899291992188,0,-87.74898529052734,-0.00001708502350084018,0.00012169034744147211,0,0.000017085358194890432,-87.74899291992188,0.0002419859665678814,0,-0.738336980342865,6.5663993339959426e-12,0.0000010239258472211077,1],[7,9.57883514729474e-8,-0.00012308494478929788,87.74899291992188,0,-87.74895477294922,0.06985900551080704,1.9377911542051152e-7,0,-0.06985900551080704,-87.74896240234375,-0.00012308482837397605,0,-0.8148396015167236,0.0007684377487748861,2.1313388831600832e-9,1],[7,-13.329378128051758,-0.5835267305374146,-86.72872924804688,0,86.68132781982422,2.870192527770996,-13.341405868530273,0,2.9255402088165283,-87.7000961303711,0.14043459296226501,0,0.3512277603149414,0.023215843364596367,-0.17800790071487427,1],[7,0.00012029569188598543,87.74899291992188,-5.373075573876507e-15,0,-0.000017085358194890432,2.3417063427233487e-11,-87.74898529052734,0,-87.74899291992188,0.00012029569188598543,0.000017085358194890432,0,3.742711869592075e-12,-5.034101432245029e-17,-0.738336980342865,1],[7,13.329362869262695,0.5837728977203369,-86.72872161865234,0,86.68132781982422,2.870190143585205,13.341397285461426,0,2.9255752563476562,-87.7000961303711,-0.14067858457565308,0,0.3512278199195862,0.023215826600790024,0.1780078411102295,1],[7,0.000003835630195681006,0.00012029569188598543,-87.74899291992188,0,87.74898529052734,-0.000017085363651858643,0.0000038356070035661105,0,-0.000017085358194890432,-87.74899291992188,-0.00012029569188598543,0,0.08038292825222015,0.021714111790060997,-0.16770152747631073,1],[7,0.0001178546590381302,-0.00012308491568546742,87.74899291992188,0,-87.74898529052734,-0.000017085523722926155,0.00011785465176217258,0,0.000017085358194890432,-87.74899291992188,-0.00012308494478929788,0,-1.6451982259750366,5.87142210406455e-7,0.0000022096469365351368,1],[7,0.0001178546590381302,-0.00012308491568546742,87.74899291992188,0,-87.74898529052734,-0.000017085523722926155,0.00011785465176217258,0,0.000017085358194890432,-87.74899291992188,-0.00012308494478929788,0,-1.1699634790420532,-5.1139195988980646e-8,0.0000015713648053861107,1],[7,-84.7590103149414,-0.00011930296022910625,22.711111068725586,0,22.711111068725586,0.000016954663806245662,84.7590103149414,0,-0.00011962600547121838,87.74899291992188,0.00001450093350285897,0,0.26615607738494873,4.7347434417588374e-8,1.0832682847976685,1],[7,84.7590103149414,-0.00012128843081882223,22.711111068725586,0,22.711111068725586,0.000016954663806245662,-84.7590103149414,0,0.00011276743316557258,87.74899291992188,0.00004776870264322497,0,0.26615607738494873,4.734742375944734e-8,-1.0832682847976685,1],[7,9.57883514729474e-8,-0.00012308494478929788,87.74899291992188,0,-87.74895477294922,0.06985900551080704,1.9377911542051152e-7,0,-0.06985900551080704,-87.74896240234375,-0.00012308482837397605,0,-0.9650411605834961,0.0008880393579602242,2.4630661954461175e-9,1],[7,9.57883514729474e-8,-0.00012308494478929788,87.74899291992188,0,-87.74895477294922,0.06985900551080704,1.9377911542051152e-7,0,-0.06985900551080704,-87.74896240234375,-0.00012308482837397605,0,-1.1152427196502686,0.0009316118084825575,2.583918634613269e-9,1],[7,0.000003835630195681006,0.00012029569188598543,-87.74899291992188,0,87.74898529052734,-0.000017085363651858643,0.0000038356070035661105,0,-0.000017085358194890432,-87.74899291992188,-0.00012029569188598543,0,0.08038290590047836,0.0217141043394804,0.16770148277282715,1],[7,34.319801330566406,0.7709546685218811,80.75544738769531,0,80.75911712646484,-0.3673746883869171,-34.31785202026367,0,0.0365816168487072,87.74483489990234,-0.853227436542511,0,0.8495007157325745,-0.006890855263918638,-0.672168493270874,1],[7,-34.105628967285156,3.229346752166748,80.7852783203125,0,80.19358825683594,-9.797160148620605,34.247459411621094,0,10.280043601989746,87.1405258178711,0.8565954566001892,0,0.8434666395187378,-0.10610441118478775,0.6714277267456055,1],[7,34.318382263183594,0.8313809037208557,80.75544738769531,0,80.75962829589844,-0.22517983615398407,-34.317848205566406,0,-0.11791250109672546,87.7447509765625,-0.8532273173332214,0,0.5862204432487488,-0.005858692806214094,-0.6721684336662292,1],[7,34.318382263183594,-80.75476837158203,0.8956841230392456,0,80.75962829589844,34.31765365600586,-0.25250619649887085,0,-0.11791250109672546,0.9230960011482239,87.74404907226562,0,0.38664767146110535,0.6721636056900024,-0.0063939220272004604,1],[7,-33.76499557495117,-5.791998386383057,80.7852783203125,0,79.96836853027344,11.491525650024414,34.24745178222656,0,-12.840116500854492,86.80025482177734,0.8565958738327026,0,0.5877475142478943,0.04913555085659027,0.6714276671409607,1],[7,-33.76499557495117,80.7806396484375,5.856326103210449,0,79.96836853027344,34.256595611572266,-11.464248657226562,0,-12.840116500854492,0.9257150888442993,-86.7995376586914,0,0.3881746232509613,0.671466588973999,-0.04860087111592293,1],[7,-26.09381103515625,47.70235824584961,-68.8729248046875,0,72.14217376708984,-23.88349151611328,-43.87446212768555,0,-42.596981048583984,-69.67027282714844,-32.11593246459961,0,0.23747046291828156,0.08072908967733383,-0.6914553046226501,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[25,".bin",2184526039,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":648,"length":48,"count":24,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":648,"count":9,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009095229208469391,-0.00829001609236002,-0.0038153051864355803],"maxPosition",8,[1,-0.002438712865114212,-0.0038237078115344048,0.0021244001109153032]]],-1],0,0,[],[],[]],[[[25,".bin",2718085466,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2016,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":2016,"count":28,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,0.004531483631581068,-0.006827499717473984,-0.009057947434484959],"maxPosition",8,[1,0.00610683299601078,-0.003189224749803543,0.0015691547887399793]]],-1],0,0,[],[],[]],[[[47,"Skin-2",1928083474,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/sword01"],[[[7,-0.000007191588792920811,-0.00005849258377566002,-87.7490005493164,0,24.115726470947266,-84.3700942993164,0.0000542638408660423,0,-84.37010192871094,-24.115724563598633,0.000022989974240772426,0,-0.00041664036689326167,-0.5413689017295837,0.47052377462387085,1]],8]]],0,0,[],[],[]],[[[47,"Skin-3",3487038830,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/shield01"],[[[7,-26.09381103515625,47.70235824584961,-68.8729248046875,0,72.14216613769531,-23.883501052856445,-43.87446594238281,0,-42.59699249267578,-69.6702651977539,-32.11592483520508,0,0.24138452112674713,0.08198083937168121,-0.6857008934020996,1]],8]]],0,0,[],[],[]],[[[25,".bin",428950450,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6480,"length":480,"count":240,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6480,"count":90,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009095229208469391,-0.00861329771578312,-0.0038153051864355803],"maxPosition",8,[1,-0.0022758706472814083,-0.0038237078115344048,0.002340445527806878]]],-1],0,0,[],[],[]],[[[47,"Skin-1",1546018204,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/shield01"],[[[7,-26.09381103515625,47.70235824584961,-68.8729248046875,0,72.14216613769531,-23.883501052856445,-43.87446594238281,0,-42.59699249267578,-69.6702651977539,-32.11592483520508,0,0.23747046291828156,0.08072908967733383,-0.6914553046226501,1]],8]]],0,0,[],[],[]],[[[90,"particles/builtin-particle-xr-trail",[{"hash":3954992679,"name":"particles/builtin-particle-xr-trail|builtin/internal/particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n  #define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n  #define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n  #define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n  #define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n  #define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n  #define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n  #define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n  #define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n  #define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n  #define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n  #define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n  #define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n  #define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n    #define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  uniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_surfaceTransform;\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n  #define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n  #define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n  #define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n  #define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n  #define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n  #define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n  #define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n  #define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n  #define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n  #define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n  #define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n  #define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n  #define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n  #define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n  #define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n  #define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n  #define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n    #define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  #define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":58,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"}]}],[{"name":"add","passes":[{"program":"particles/builtin-particle-xr-trail|builtin/internal/particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"xr_keyboard","spriteFrames":["abc","e3+chOu/ZGHaj1Gj2tfKWj@99d82","activate","e3+chOu/ZGHaj1Gj2tfKWj@dbd72","all_bg","e3+chOu/ZGHaj1Gj2tfKWj@bdd2f","and","e3+chOu/ZGHaj1Gj2tfKWj@b3398","angle_bracket_left","e3+chOu/ZGHaj1Gj2tfKWj@4c102","angle_bracket_right","e3+chOu/ZGHaj1Gj2tfKWj@940b8","asterisk","e3+chOu/ZGHaj1Gj2tfKWj@53a48","at","e3+chOu/ZGHaj1Gj2tfKWj@78a41","backslash","e3+chOu/ZGHaj1Gj2tfKWj@cda20","brace_left","e3+chOu/ZGHaj1Gj2tfKWj@1a38b","brace_right","e3+chOu/ZGHaj1Gj2tfKWj@f5b8d","capital_a","e3+chOu/ZGHaj1Gj2tfKWj@cad1b","capital_b","e3+chOu/ZGHaj1Gj2tfKWj@52b93","capital_c","e3+chOu/ZGHaj1Gj2tfKWj@5dd95","capital_d","e3+chOu/ZGHaj1Gj2tfKWj@1f437","capital_e","e3+chOu/ZGHaj1Gj2tfKWj@cfabe","capital_f","e3+chOu/ZGHaj1Gj2tfKWj@9883f","capital_g","e3+chOu/ZGHaj1Gj2tfKWj@e18fe","capital_h","e3+chOu/ZGHaj1Gj2tfKWj@15c73","capital_i","e3+chOu/ZGHaj1Gj2tfKWj@b607c","capital_j","e3+chOu/ZGHaj1Gj2tfKWj@63b1b","capital_k","e3+chOu/ZGHaj1Gj2tfKWj@2766a","capital_l","e3+chOu/ZGHaj1Gj2tfKWj@0a8f6","capital_m","e3+chOu/ZGHaj1Gj2tfKWj@f53ce","capital_n","e3+chOu/ZGHaj1Gj2tfKWj@7ecf5","capital_o","e3+chOu/ZGHaj1Gj2tfKWj@ecd7f","capital_p","e3+chOu/ZGHaj1Gj2tfKWj@55d2b","capital_q","e3+chOu/ZGHaj1Gj2tfKWj@a5c44","capital_r","e3+chOu/ZGHaj1Gj2tfKWj@4438d","capital_s","e3+chOu/ZGHaj1Gj2tfKWj@c10f3","capital_t","e3+chOu/ZGHaj1Gj2tfKWj@55ce9","capital_u","e3+chOu/ZGHaj1Gj2tfKWj@43697","capital_v","e3+chOu/ZGHaj1Gj2tfKWj@adea0","capital_w","e3+chOu/ZGHaj1Gj2tfKWj@805e8","capital_x","e3+chOu/ZGHaj1Gj2tfKWj@0ac97","capital_y","e3+chOu/ZGHaj1Gj2tfKWj@235c3","capital_z","e3+chOu/ZGHaj1Gj2tfKWj@1df15","caps_left","e3+chOu/ZGHaj1Gj2tfKWj@d3b5d","caps_lock","e3+chOu/ZGHaj1Gj2tfKWj@54e67","caps_right","e3+chOu/ZGHaj1Gj2tfKWj@e717e","colon","e3+chOu/ZGHaj1Gj2tfKWj@c9ec5","comma","e3+chOu/ZGHaj1Gj2tfKWj@bc022","del","e3+chOu/ZGHaj1Gj2tfKWj@d8473","dollar","e3+chOu/ZGHaj1Gj2tfKWj@3a434","dot","e3+chOu/ZGHaj1Gj2tfKWj@6c1a2","double_quotes","e3+chOu/ZGHaj1Gj2tfKWj@499aa","ellipsis","e3+chOu/ZGHaj1Gj2tfKWj@b394b","enter","e3+chOu/ZGHaj1Gj2tfKWj@e61a0","equal","e3+chOu/ZGHaj1Gj2tfKWj@46a0f","exclamation","e3+chOu/ZGHaj1Gj2tfKWj@11706","expression","e3+chOu/ZGHaj1Gj2tfKWj@6d823","factorial","e3+chOu/ZGHaj1Gj2tfKWj@c3dee","hash_key","e3+chOu/ZGHaj1Gj2tfKWj@1c4f9","hover","e3+chOu/ZGHaj1Gj2tfKWj@e5852","input_bg","e3+chOu/ZGHaj1Gj2tfKWj@8e645","input_line","e3+chOu/ZGHaj1Gj2tfKWj@e95dd","keyboard","e3+chOu/ZGHaj1Gj2tfKWj@3dc17","lower_a","e3+chOu/ZGHaj1Gj2tfKWj@333fe","lower_b","e3+chOu/ZGHaj1Gj2tfKWj@e9132","lower_c","e3+chOu/ZGHaj1Gj2tfKWj@95579","lower_d","e3+chOu/ZGHaj1Gj2tfKWj@bfaeb","lower_e","e3+chOu/ZGHaj1Gj2tfKWj@cd071","lower_f","e3+chOu/ZGHaj1Gj2tfKWj@ad0cf","lower_g","e3+chOu/ZGHaj1Gj2tfKWj@8b244","lower_h","e3+chOu/ZGHaj1Gj2tfKWj@643ee","lower_i","e3+chOu/ZGHaj1Gj2tfKWj@3bf28","lower_j","e3+chOu/ZGHaj1Gj2tfKWj@fbe43","lower_k","e3+chOu/ZGHaj1Gj2tfKWj@ddb23","lower_l","e3+chOu/ZGHaj1Gj2tfKWj@35616","lower_m","e3+chOu/ZGHaj1Gj2tfKWj@d68c1","lower_n","e3+chOu/ZGHaj1Gj2tfKWj@3dcbe","lower_o","e3+chOu/ZGHaj1Gj2tfKWj@f00c5","lower_p","e3+chOu/ZGHaj1Gj2tfKWj@0c5d5","lower_q","e3+chOu/ZGHaj1Gj2tfKWj@6fc09","lower_r","e3+chOu/ZGHaj1Gj2tfKWj@786a5","lower_s","e3+chOu/ZGHaj1Gj2tfKWj@e8ed1","lower_t","e3+chOu/ZGHaj1Gj2tfKWj@fea4c","lower_u","e3+chOu/ZGHaj1Gj2tfKWj@cf338","lower_v","e3+chOu/ZGHaj1Gj2tfKWj@91ae2","lower_w","e3+chOu/ZGHaj1Gj2tfKWj@c234f","lower_x","e3+chOu/ZGHaj1Gj2tfKWj@a7ff0","lower_y","e3+chOu/ZGHaj1Gj2tfKWj@56220","lower_z","e3+chOu/ZGHaj1Gj2tfKWj@51fc3","mathematical_notation_left","e3+chOu/ZGHaj1Gj2tfKWj@e7de7","mathematical_notation_right","e3+chOu/ZGHaj1Gj2tfKWj@64987","minus","e3+chOu/ZGHaj1Gj2tfKWj@d50c7","num_0","e3+chOu/ZGHaj1Gj2tfKWj@ebbeb","num_1","e3+chOu/ZGHaj1Gj2tfKWj@49a26","num_2","e3+chOu/ZGHaj1Gj2tfKWj@d07de","num_3","e3+chOu/ZGHaj1Gj2tfKWj@de3c3","num_4","e3+chOu/ZGHaj1Gj2tfKWj@63063","num_5","e3+chOu/ZGHaj1Gj2tfKWj@7a0f5","num_6","e3+chOu/ZGHaj1Gj2tfKWj@e603f","num_7","e3+chOu/ZGHaj1Gj2tfKWj@35deb","num_8","e3+chOu/ZGHaj1Gj2tfKWj@7724d","num_9","e3+chOu/ZGHaj1Gj2tfKWj@9db6b","off_latin","e3+chOu/ZGHaj1Gj2tfKWj@896f4","off_symbol","e3+chOu/ZGHaj1Gj2tfKWj@1db17","parentheses_left","e3+chOu/ZGHaj1Gj2tfKWj@80bf1","parentheses_right","e3+chOu/ZGHaj1Gj2tfKWj@e7671","percent","e3+chOu/ZGHaj1Gj2tfKWj@37564","plus","e3+chOu/ZGHaj1Gj2tfKWj@dfe32","question","e3+chOu/ZGHaj1Gj2tfKWj@513e9","semicolon","e3+chOu/ZGHaj1Gj2tfKWj@74933","single_quotes","e3+chOu/ZGHaj1Gj2tfKWj@f0a95","slash","e3+chOu/ZGHaj1Gj2tfKWj@94e36","smiling","e3+chOu/ZGHaj1Gj2tfKWj@39774","square_bracket_left","e3+chOu/ZGHaj1Gj2tfKWj@effe5","square_bracket_right","e3+chOu/ZGHaj1Gj2tfKWj@64503","switch_chinese","e3+chOu/ZGHaj1Gj2tfKWj@a3c00","switch_english","e3+chOu/ZGHaj1Gj2tfKWj@b4fac","symbol","e3+chOu/ZGHaj1Gj2tfKWj@963e4","tab","e3+chOu/ZGHaj1Gj2tfKWj@ed8d8","tilde","e3+chOu/ZGHaj1Gj2tfKWj@82dd2","transverse_bottom","e3+chOu/ZGHaj1Gj2tfKWj@f1412","vertical_bar","e3+chOu/ZGHaj1Gj2tfKWj@27b01","voice","e3+chOu/ZGHaj1Gj2tfKWj@b2e08","yuan","e3+chOu/ZGHaj1Gj2tfKWj@4a9d3"]}],[30],0,[],[],[]],[[{"name":"capital_l","rect":{"x":180,"y":284,"width":22,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_x","rect":{"x":354,"y":236,"width":26,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_p","rect":{"x":270,"y":286,"width":22,"height":30},"offset":{"x":0,"y":-7},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"exclamation","rect":{"x":350,"y":288,"width":6,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_h","rect":{"x":270,"y":232,"width":26,"height":30},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"brace_left","rect":{"x":104,"y":124,"width":14,"height":40},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"hash_key","rect":{"x":148,"y":284,"width":22,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"off_symbol","rect":{"x":354,"y":2,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[8,8,8,8],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_z","rect":{"x":302,"y":250,"width":24,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_d","rect":{"x":180,"y":256,"width":26,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_y","rect":{"x":186,"y":226,"width":28,"height":30},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_k","rect":{"x":148,"y":228,"width":28,"height":30},"offset":{"x":1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"vertical_bar","rect":{"x":444,"y":108,"width":4,"height":42},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_a","rect":{"x":412,"y":302,"width":20,"height":24},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_l","rect":{"x":504,"y":310,"width":6,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_7","rect":{"x":422,"y":182,"width":20,"height":30},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"percent","rect":{"x":148,"y":194,"width":36,"height":32},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"smiling","rect":{"x":444,"y":78,"width":46,"height":28},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"dollar","rect":{"x":308,"y":104,"width":22,"height":38},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_i","rect":{"x":502,"y":30,"width":8,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"keyboard","rect":{"x":104,"y":82,"width":42,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":140,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_n","rect":{"x":422,"y":338,"width":20,"height":22},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_u","rect":{"x":444,"y":264,"width":26,"height":30},"offset":{"x":-1,"y":0},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_r","rect":{"x":476,"y":282,"width":26,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"equal","rect":{"x":334,"y":262,"width":22,"height":14},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"double_quotes","rect":{"x":334,"y":286,"width":14,"height":12},"offset":{"x":-3,"y":10},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_1","rect":{"x":340,"y":230,"width":12,"height":30},"offset":{"x":-2,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"yuan","rect":{"x":418,"y":246,"width":24,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"angle_bracket_left","rect":{"x":326,"y":300,"width":22,"height":22},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"question","rect":{"x":70,"y":228,"width":20,"height":30},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_z","rect":{"x":350,"y":318,"width":20,"height":22},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_b","rect":{"x":270,"y":260,"width":24,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"asterisk","rect":{"x":218,"y":226,"width":20,"height":18},"offset":{"x":-1,"y":6},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"caps_lock","rect":{"x":2,"y":2,"width":146,"height":32},"offset":{"x":1,"y":-3},"originalSize":{"width":184,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_t","rect":{"x":238,"y":260,"width":24,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_p","rect":{"x":212,"y":266,"width":24,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_y","rect":{"x":302,"y":276,"width":22,"height":30},"offset":{"x":0,"y":-7},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_c","rect":{"x":308,"y":196,"width":28,"height":32},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_4","rect":{"x":148,"y":258,"width":24,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_j","rect":{"x":472,"y":310,"width":20,"height":30},"offset":{"x":-2,"y":0},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_h","rect":{"x":440,"y":292,"width":20,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"square_bracket_right","rect":{"x":104,"y":140,"width":12,"height":40},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"mathematical_notation_right","rect":{"x":444,"y":58,"width":56,"height":18},"offset":{"x":-1,"y":-3},"originalSize":{"width":140,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"dot","rect":{"x":402,"y":312,"width":8,"height":8},"offset":{"x":0,"y":-11},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"expression","rect":{"x":104,"y":36,"width":44,"height":44},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_q","rect":{"x":238,"y":286,"width":22,"height":30},"offset":{"x":-1,"y":-7},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"semicolon","rect":{"x":502,"y":62,"width":8,"height":28},"offset":{"x":1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_8","rect":{"x":444,"y":216,"width":22,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_r","rect":{"x":132,"y":210,"width":14,"height":22},"offset":{"x":1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"at","rect":{"x":92,"y":212,"width":32,"height":32},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_5","rect":{"x":124,"y":266,"width":22,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_n","rect":{"x":238,"y":232,"width":26,"height":30},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_w","rect":{"x":92,"y":180,"width":38,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"parentheses_left","rect":{"x":104,"y":168,"width":10,"height":40},"offset":{"x":2,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"tilde","rect":{"x":342,"y":196,"width":32,"height":10},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"off_latin","rect":{"x":354,"y":92,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[8,8,8,8],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_g","rect":{"x":238,"y":208,"width":22,"height":32},"offset":{"x":-1,"y":-7},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"input_bg","rect":{"x":2,"y":36,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_v","rect":{"x":374,"y":318,"width":20,"height":22},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"angle_bracket_right","rect":{"x":302,"y":300,"width":22,"height":22},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"slash","rect":{"x":492,"y":92,"width":18,"height":38},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_c","rect":{"x":376,"y":296,"width":20,"height":24},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"symbol","rect":{"x":2,"y":228,"width":30,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_f","rect":{"x":350,"y":264,"width":22,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"abc","rect":{"x":444,"y":2,"width":66,"height":26},"offset":{"x":-1,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_9","rect":{"x":388,"y":212,"width":22,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"switch_chinese","rect":{"x":238,"y":138,"width":68,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":184,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_q","rect":{"x":276,"y":172,"width":30,"height":34},"offset":{"x":0,"y":-1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_x","rect":{"x":470,"y":332,"width":22,"height":22},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_f","rect":{"x":220,"y":194,"width":16,"height":30},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_v","rect":{"x":386,"y":236,"width":26,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"voice","rect":{"x":444,"y":144,"width":28,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"and","rect":{"x":388,"y":182,"width":28,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"ellipsis","rect":{"x":346,"y":160,"width":34,"height":6},"offset":{"x":0,"y":-11},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"switch_english","rect":{"x":238,"y":104,"width":68,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":184,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_i","rect":{"x":382,"y":288,"width":6,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"comma","rect":{"x":402,"y":296,"width":8,"height":14},"offset":{"x":0,"y":-15},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"all_bg","rect":{"x":252,"y":2,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_d","rect":{"x":272,"y":208,"width":22,"height":32},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_s","rect":{"x":444,"y":190,"width":24,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_w","rect":{"x":478,"y":210,"width":32,"height":22},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"factorial","rect":{"x":218,"y":248,"width":18,"height":16},"offset":{"x":-1,"y":8},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"colon","rect":{"x":462,"y":314,"width":6,"height":22},"offset":{"x":1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_a","rect":{"x":92,"y":246,"width":28,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_e","rect":{"x":414,"y":278,"width":22,"height":24},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"backslash","rect":{"x":308,"y":128,"width":18,"height":38},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_u","rect":{"x":398,"y":324,"width":20,"height":22},"offset":{"x":-1,"y":-4},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_e","rect":{"x":382,"y":264,"width":22,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_2","rect":{"x":422,"y":214,"width":20,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"caps_left","rect":{"x":238,"y":172,"width":36,"height":34},"offset":{"x":0,"y":1},"originalSize":{"width":228,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"minus","rect":{"x":494,"y":332,"width":22,"height":6},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_m","rect":{"x":354,"y":212,"width":32,"height":22},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"del","rect":{"x":444,"y":114,"width":40,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":132,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"activate","rect":{"x":2,"y":138,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[8,8,8,8],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_k","rect":{"x":126,"y":234,"width":20,"height":30},"offset":{"x":1,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_3","rect":{"x":444,"y":240,"width":22,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"plus","rect":{"x":438,"y":314,"width":22,"height":22},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_g","rect":{"x":354,"y":182,"width":28,"height":32},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"hover","rect":{"x":148,"y":104,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[8,8,8,8],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_6","rect":{"x":478,"y":234,"width":22,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"enter","rect":{"x":486,"y":132,"width":76,"height":24},"offset":{"x":1,"y":-1},"originalSize":{"width":184,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"caps_right","rect":{"x":308,"y":160,"width":36,"height":34},"offset":{"x":0,"y":1},"originalSize":{"width":140,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"parentheses_right","rect":{"x":92,"y":138,"width":10,"height":40},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"mathematical_notation_left","rect":{"x":444,"y":58,"width":56,"height":18},"offset":{"x":-1,"y":-3},"originalSize":{"width":228,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_s","rect":{"x":350,"y":296,"width":20,"height":24},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_b","rect":{"x":306,"y":226,"width":22,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"input_line","rect":{"x":150,"y":2,"width":100,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"num_0","rect":{"x":478,"y":258,"width":22,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_o","rect":{"x":36,"y":228,"width":30,"height":32},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"tab","rect":{"x":444,"y":30,"width":56,"height":26},"offset":{"x":-1,"y":0},"originalSize":{"width":132,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"square_bracket_left","rect":{"x":104,"y":154,"width":12,"height":40},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_o","rect":{"x":212,"y":298,"width":22,"height":24},"offset":{"x":0,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"single_quotes","rect":{"x":492,"y":78,"width":6,"height":12},"offset":{"x":-3,"y":10},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"transverse_bottom","rect":{"x":348,"y":104,"width":20,"height":4},"offset":{"x":0,"y":-18},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"capital_m","rect":{"x":186,"y":194,"width":32,"height":30},"offset":{"x":0,"y":1},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"brace_right","rect":{"x":444,"y":174,"width":14,"height":40},"offset":{"x":-1,"y":1},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_j","rect":{"x":308,"y":148,"width":10,"height":38},"offset":{"x":-1,"y":-3},"originalSize":{"width":88,"height":88},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"lower_t","rect":{"x":132,"y":180,"width":14,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[2]],[[{"name":"default_radio_button_off","rect":{"x":3,"y":3,"width":26,"height":26},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[13,13,13,13],"vertices":{"rawPosition":[-13,-13,0,13,-13,0,-13,13,0,13,13,0],"indexes":[0,1,2,2,1,3],"uv":[3,29,29,29,3,3,29,3],"nuv":[0.09375,0.09375,0.90625,0.09375,0.09375,0.90625,0.90625,0.90625],"minPos":{"x":-13,"y":-13,"z":0},"maxPos":{"x":13,"y":13,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[3],[189]],[[[89,"xr-3dui-sprite-material",[{}],[{"rasterizerState":{},"depthStencilState":{"depthTest":true},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[17],[190]]]]
