[1,["d6W6uRGdpGHbkW4XjJKGmk@f9941","4eKj9LZ/9Goa2oiCj3YnjO@f9941","8eJhOcIWVF4qDd6itjEqdA@f9941","baIUdvKGZPgZxNbjWTFuRI","20g1ukYUVPvKWKBRznAKo+@f9941","d5G6t/CztP5aQkD4QoxJo/@f9941","74ZCzprRlJ26TKjpZirbBZ@f9941","d3x4IMKphEKYvHuEU7yaxB","faI1Qj4vVJG4ly7A6YIl9b","5a8gG1WVFOLKgfrEqtkTLL@b47c0","136fcPQhFOj6gbkjKjTQ5m","12Y9dMgWdJKJGmTiZyQR9H@fc873","31lnu2cpBKdZ1ow0AO38Te@f9941","5dfpq0co9JSb36PMY/CzTO@f9941","655tA7C5xKOrbPDg5wENLS@f9941","4fqLuXNARLV6nBNz++z7ai@f9941","6b0rQnfHVNGqXiGsP0Kq5x@f9941","24pwTaKGdEbY0aXpIMdeCd@f9941","f1KiPEuSRDIqJgPZgkKPHo@f9941","056NLtx9BB/5G+uwEYDFL/@6c48a","30PWo60JxIX6dRBaTGG21z","3czGFkQQ5PBKpf1aic0QB5","24pwTaKGdEbY0aXpIMdeCd@6c48a","250TAbhEpNSJbo/sirYiTO@6c48a","31lnu2cpBKdZ1ow0AO38Te@6c48a","1fC+T44LpBTZiuNZlxSoH1","4e11YahjpB7JY7A2SdqSr6","b0TtmesfFCGLJ4Ebjh3S1c","ccw6dVfT1DBKo7ykeS152f","cfxTxOeVZIK668P7Hc027v","5eTUjEDjRFr6JoiUhRl+i8","12Y9dMgWdJKJGmTiZyQR9H@17020","12Y9dMgWdJKJGmTiZyQR9H@2e76e","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","a2NHKvtEZDlKDK6ac4PnF7","4eKj9LZ/9Goa2oiCj3YnjO@6c48a","4fqLuXNARLV6nBNz++z7ai@6c48a","52G6odAGROJYfL72TEzvys@6c48a","5dfpq0co9JSb36PMY/CzTO@6c48a","655tA7C5xKOrbPDg5wENLS@6c48a","6b0rQnfHVNGqXiGsP0Kq5x@6c48a","74ZCzprRlJ26TKjpZirbBZ@6c48a","8eJhOcIWVF4qDd6itjEqdA@6c48a","056NLtx9BB/5G+uwEYDFL/@f9941","c9tsYVy5FMnaPoQHWH4ASA@f9941","4bFVzknJJDsbgG3m4fYNMJ","52G6odAGROJYfL72TEzvys@f9941","eaFwLR8R5MvosXSWeK/ckY@f9941","250TAbhEpNSJbo/sirYiTO@f9941","fbTkGvhfVJNImx0edRr6/D@f9941","c9tsYVy5FMnaPoQHWH4ASA@6c48a","d5G6t/CztP5aQkD4QoxJo/@6c48a","d6W6uRGdpGHbkW4XjJKGmk@6c48a","eaFwLR8R5MvosXSWeK/ckY@6c48a","fbTkGvhfVJNImx0edRr6/D@6c48a"],["node","_spriteFrame","_textureSource","target","source","_target","_normalSprite","root","asset","targetInfo","_parent","_hoverSprite","_pressedSprite","_disabledSprite","_material","_mesh","_checkMark","_inputDevice","_checker","_customMaterial","data","mainTexture","_effectAsset","_offsetObject","_teleporter","_teleportAnchorNode","scene","_envmapHDR","_envmapLDR","_cameraComponent","_handle","_barSprite"],[["cc.Node",["_name","_layer","_id","_active","_objFlags","__editorExtras__","_components","_parent","_prefab","_lpos","_children","_lscale","_lrot","_euler"],-3,9,1,4,5,2,5,5,5],"cc.SpriteFrame",["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","node","__prefab","_spriteFrame","_color","_customMaterial"],0,1,4,6,5,6],["cc.Widget",["_alignFlags","_left","_top","_right","_originalWidth","_originalHeight","_horizontalCenter","_bottom","node","__prefab","_target"],-5,1,4,1],["cc.Node",["_name","_layer","_id","_active","_components","_parent","_prefab","_children","_lpos","_lrot","_euler"],-1,12,1,4,2,5,5,5],["cc.Camera",["_visibility","_near","_clearFlags","_cameraType","_name","_priority","_far","_trackingType","_fov","_projection","_orthoHeight","node","_color","__prefab"],-8,1,5,4],["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Button",["_transition","node","_normalColor","_target","_normalSprite","clickEvents","_hoverSprite","_pressedSprite","_disabledSprite","__prefab"],2,1,5,1,6,9,6,6,6,4],["cc.Node",["_name","_id","_parent","_components","_prefab","_lpos"],1,1,2,4,5],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["42802Gifv1E5aGtEbsdZBRs",["_trackingSource","node"],2,1],["8909cpyL+hIQrKUBvDwkdo8",["_targetEye","node"],2,1],["cc.MeshRenderer",["_name","node","_materials","bakeSettings","_mesh","__prefab"],2,1,3,4,6,4],["cc.Label",["_string","_actualFontSize","_fontSize","_overflow","_enableWrapText","_lineHeight","node","_color","_customMaterial","__prefab"],-3,1,5,6,4],["1e92bOQQApPabAbOLV6ZwkG",["_inputDevice","node"],2,1],["cc.Toggle",["_isChecked","node","__prefab","clickEvents","_normalColor","_target","_checkMark","_normalSprite"],2,1,4,9,5,1,1,6],"cc.RenderTexture",["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.SceneAsset",["_name"],2],["cc.PrefabInfo",["fileId","nestedPrefabInstanceRoots","root","instance","targetOverrides","asset"],1,1,4,9,6],["cc.PrefabInfo",["root","asset","fileId","instance","targetOverrides","nestedPrefabInstanceRoots"],-2,2],["cc.PrefabInfo",["fileId","targetOverrides","nestedPrefabInstanceRoots","root","instance","asset"],0,1,4,6],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.PrefabInfo",["fileId","instance","root","asset","targetOverrides","nestedPrefabInstanceRoots"],1,1,1,9,2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],2,1,9],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["cc.TargetInfo",["localID"],2],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","lightProbeInfo"],3,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR"],2,5,5],["cc.ShadowsInfo",["_enabled","_type","_distance","_shadowColor","_size"],0,5,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",["_fogColor"],3,5],["cc.OctreeInfo",[],3],["cc.LightProbeInfo",[],3],["aaeefWAZ5BFQrbuxj/FZCHP",["node"],3,1],["cc.BoxCollider",["node","_size","_material"],3,1,5,6],["cc.RenderRoot2D",["node"],3,1],["cc.AudioSource",["node"],3,1],["4b5ca+hvnRKvqbmOcVO9MjU",["node"],3,1],["2bae89OKg1Ht5AEap6sVgok",["node","_offsetObject"],3,1,1],["42e56uX4t5HspepxO/kP3MN",["_turnAngle","_enableTurnAround","_activationTimeout","_turnSpeed","_moveSpeed","node","_checker","_inputDevice"],-2,1,1,1],["b0a1fF4UZtCRpPJNmMeRz8M",["node","_checker","_inputDevice"],3,1,1,1],["cc.SphereCollider",["node","_material"],3,1,6],["fb088tgUYlNQZWyJub1GwiW",["node"],3,1],["94f4b3Y9BtBuYwZ00W4c5re",["node","audioEvents","hapticEvents","interactorEvents"],3,1,4,4,4],["cc.AudioEvents",[],3],["cc.HapticEvents",[],3],["cc.SubInteractorEvents",[],3],["78601ayuslIQr9sP4c1t054",["_startingSelectedInteractable","_lineType","node"],1,1],["cc.Line",["node","_positions","_width","_color","_material"],3,1,12,4,4,6],["cc.CurveRange",["constant"],2],["cc.GradientRange",["color"],3,5],["cc.ModelBakeSettings",[],3],["a79bdCgK/pB3b5BznAEWwas",["_attachTransform","_attachEaseInTime","_grabTrigger","_hideController","_throwOnDetach","_throwSimulationMode","_throwSmoothingDuration","_throwSmoothingCurve","_throwVelocityScale","_throwAngularVelocityScale","_noPosition","_noRotation","_teleportableType","node","_teleportAnchorNode","_teleporter"],-10,1,1,1],["78ea74Y7fxHarp29Xrvq8DV",["_xrAgent"],3,1],["ba57cejGr1Lm4SWg4cM+CoW",["node"],3,1],["cc.DirectionalLight",["_illuminanceHDR","_illuminanceLDR","_shadowEnabled","_shadowPcf","_shadowBias","_shadowSaturation","_shadowDistance","_csmLevel","_shadowFar","_shadowOrthoSize","node","_staticSettings"],-7,1,4],["cc.StaticLightSettings",[],3],["e7e92lZGvtDz47cctobtX/d",["node","_checker"],3,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["fe760GdnFNGOpMrzWpDQpwy",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["2dad3FAQq1EI7EXODhj9eIx",["_xrDeivceIpAddress","node","__prefab"],2,1,4],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["cc.Mask",["_type","_segments","_alphaThreshold","node","__prefab"],0,1,4],["cc.Slider",["_progress","node","__prefab","_handle"],2,1,4,1],["cc.ProgressBar",["_totalLength","_progress","node","__prefab","_barSprite"],1,1,4,1]],[[70,0,2],[32,0,2],[23,0,1,2,3,4,5,5],[6,0,2,1,1],[60,1],[30,0,1,2,2],[31,0,1,2,3],[33,0,1,2,3,4,2],[0,0,1,7,10,6,8,9,3],[29,0,1,2,2],[0,4,5,7,8,3],[0,0,1,7,6,8,3],[22,0,1,2,3,4,5,4],[25,0,1,2,3],[27,0,1,2,2],[2,0,3,4,5,2],[9,0,1,3,3],[0,0,1,7,6,8,9,11,3],[28,0,1,2,3],[2,1,0,3,4,5,3],[13,0,1,2,5,6,9,5],[2,0,2,3,4,5,3],[2,0,2,3,4,3],[7,0,1,9,5,2,3,4,6,7,8,2],[17,0,1,2,3],[0,0,3,1,7,6,8,4],[0,0,1,7,6,8,9,3],[4,0,3,1,5,4,6,4],[6,0,2,1,3,1],[9,0,1,2,3,4],[3,0,2,8,9,3],[3,0,8,9,2],[3,0,2,6,8,9,4],[3,0,1,2,8,9,4],[15,0,1,2,3,4,5,6,7,2],[0,0,3,7,6,3],[0,0,3,1,7,6,8,9,11,4],[4,0,7,4,2],[4,0,1,5,4,6,8,3],[6,0,1,1],[2,0,3,4,6,5,2],[43,0,1,2,1],[5,4,1,0,3,11,12,5],[10,0,1,2],[11,0,1,2],[52,0,1,2,3,1],[53,1],[54,1],[55,1],[12,0,1,2,3,4,2],[12,0,1,5,2,3,4,2],[68,0,2],[3,0,7,8,9,3],[18,0,1,2,3,4],[19,0,2],[0,4,5,8,3],[0,0,1,2,7,10,6,9,11,4],[0,0,10,6,2],[0,0,7,10,9,2],[0,0,2,7,10,6,9,3],[0,0,7,6,9,11,2],[0,0,4,1,7,6,4],[0,0,2,7,6,3],[0,0,2,7,6,9,12,13,3],[0,0,1,10,6,8,3],[0,0,10,6,8,2],[0,0,3,1,7,10,6,8,9,4],[0,0,1,10,6,8,9,3],[0,0,1,7,10,6,8,3],[4,0,2,5,7,4,8,9,10,3],[4,0,1,5,4,6,3],[8,0,1,2,3,3],[8,0,2,3,4,5,2],[20,0,1,2,3,4,5,3],[21,0,1,2,3,4,5,6],[24,0,1,2,3,4,5,3],[26,0,1,2,2],[34,0,1,2,3,2],[35,0,1,2,3,4,5,1],[36,0,1,2,2],[37,0,1,2,3,4,4],[38,0,1,2,2],[39,0,1],[40,1],[41,1],[2,1,0,3,7,5,3],[2,1,0,3,4,3],[2,1,0,2,3,4,5,4],[2,1,0,3,4,6,3],[2,0,3,4,2],[7,0,1,5,2,3,4,6,7,8,2],[7,1,9,2,3,4,1],[42,0,1],[44,0,1],[5,1,2,0,3,7,11,6],[5,4,5,8,1,6,0,11,13,12,7],[5,9,5,10,6,2,0,11,13,12,7],[45,0,1],[46,0,1],[10,1,1],[11,1,1],[47,0,1,1],[48,0,1,2,3,4,5,6,7,6],[49,0,1,2,1],[50,0,1,1],[51,0,1],[56,0,1,2,3],[57,0,1,2,3,4,1],[58,0,2],[59,0,1],[61,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14],[62,0,1],[13,0,1,2,3,4,6,7,8,6],[63,0,1],[64,0,1,2,3,4,5,6,7,8,9,10,11,11],[65,1],[14,1,1],[14,0,1,2],[66,0,1,1],[67,0,1,2,4],[69,0,1,1],[71,0,1,2,2],[72,0,1,2,1],[3,0,1,3,4,5,8,9,6],[3,0,1,8,9,10,3],[73,0,1,2,3,4,4],[15,1,2,3,4,5,6,7,1],[74,0,1,2,3,2],[75,0,1,2,3,4,3]],[[[{"name":"xr_preview_bottom_guide_content","rect":{"x":9,"y":5,"width":1843,"height":150},"offset":{"x":-0.5,"y":0},"originalSize":{"width":1862,"height":160},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-921.5,-75,0,921.5,-75,0,-921.5,75,0,921.5,75,0],"indexes":[0,1,2,2,1,3],"uv":[9,155,1852,155,9,5,1852,5],"nuv":[0.004833512352309345,0.03125,0.9946294307196563,0.03125,0.004833512352309345,0.96875,0.9946294307196563,0.96875],"minPos":{"x":-921.5,"y":-75,"z":0},"maxPos":{"x":921.5,"y":75,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[19]],[[[24,".bin",815868016,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":14280,"count":7140,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[24,".bin",2489017538,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[24,".bin",3476720256,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[53,"xr-distortion-correction",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"SAMPLE_FROM_RT":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[21,22],[20,21]],[[{"name":"default_progressbar","rect":{"x":0,"y":0,"width":30,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-15,-7.5,0,15,-7.5,0,-15,7.5,0,15,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,30,15,0,0,30,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15,"y":-7.5,"z":0},"maxPos":{"x":15,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[22]],[[{"name":"xr_icon_rctrl_focused","rect":{"x":0,"y":0,"width":120,"height":120},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-60,0,60,-60,0,-60,60,0,60,60,0],"indexes":[0,1,2,2,1,3],"uv":[0,120,120,120,0,0,120,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60,"y":-60,"z":0},"maxPos":{"x":60,"y":60,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[23]],[[{"base":"2,2,0,0,0,0","w":2048,"h":1024,"n":"rt-distortion-correction"}],[16],0,[],[],[]],[[{"name":"xr_icon_guide_focused","rect":{"x":0,"y":0,"width":272,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-136,-32,0,136,-32,0,-136,32,0,136,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,272,64,0,0,272,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-136,"y":-32,"z":0},"maxPos":{"x":136,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[24]],[[[54,"main-xr-locomotion"],[55,0,{},[73,"f2EIj8Vm9Avrc32qcx7awa",null,-19,[13,"12bQpCP45FR4TwTvR7Xoa5",null,[[14,["_contentSize"],[1,["a7Ykim8nNAcpSqvVPinXgz"]],[5,960,640]],[14,["_lpos"],[1,["26zTf0+jJGuozhWpobDW4x"]],[1,480,320,0]],[18,"XR Simulator",["_name"],-15],[9,["_lpos"],-16,[1,0,0,0]],[9,["_lrot"],-17,[3,0,0,0,1]],[9,["_euler"],-18,[1,0,0,0]]]],[[7,["_target"],-2,[1,["7eACBq9ZxNwb/royRJlers"]],-1,[1,["d57o/36SxN9YtElmAvjO1V"]]],[7,["_target"],-4,[1,["2dAJir4J5F3IVEGgha4oCG"]],-3,[1,["95y6nLs4hA5I1ZNmNnqAf7"]]],[7,["_checkMark"],-6,[1,["2dAJir4J5F3IVEGgha4oCG"]],-5,[1,["6a3igP/VNBZYvug9YSE5FN"]]],[7,["_target"],-8,[1,["a95mHuH6ROR7XaOgPuWyEd"]],-7,[1,["ad22BsYuRDY6TnQv35xUeK"]]],[7,["_checkMark"],-10,[1,["a95mHuH6ROR7XaOgPuWyEd"]],-9,[1,["49e5ph85xFxJDpNSXxjgC3"]]],[7,["_target"],-12,[1,["89UUVBLutMJ7dHzHXeWtHV"]],-11,[1,["347i8XM0JD35alYLTjWT4K"]]],[7,["_checkMark"],-14,[1,["89UUVBLutMJ7dHzHXeWtHV"]],-13,[1,["794bTa5U1Fpa+Pn8dk8bDV"]]]],20]],[77,"main-xr-locomotion",[-25,-26,-27,-28,-29,-30,-31,-32,-33,1],[74,null,null,"96b49bb4-a838-43f4-995c-e24025638df2",null,null,[-20,-21,-22,-23,-24,1]],[78,[79,0.78125,[2,0.2,0.5019607843137255,0.8,0.520833125],[2,0.2,0.5019607843137255,0.8,0.520833125]],[80,true,1,1,[4,1929379840],[0,512,512]],[81,true,21,22],[82,[4,4292993505]],[83],[84]]],[56,"ChangeToXRUI",8388608,"64rBMjFrdB34kQulf1ZrIL",2,[-42],[[39,-34,[5,100,40]],[85,1,0,-35,13,14],[90,2,-38,[[16,"ba57cejGr1Lm4SWg4cM+CoW","changeSceneToXRUI",-37]],[4,4292269782],-36,15,16,17,18],[92,-39],[41,-40,[1,100,40,0.01],19],[93,-41]],[1,-0.031,9.808,-5.39],[1,0.05,0.05,0.05]],[57,"XR HMD",[-48,-49],[[94,0.1,14,1820327937,2,1,-43],[97,-44],[98,-45],[43,2,-46],[100,-47]]],[69,"XR Agent","037wZ7P7JD/ZK8F4B1swLb",2,[-59],[[[101,-51,-50],-52,[102,null,null,null,null,2,-55,-54,-53],[103,-58,-57,-56]],4,1,4,4],[1,0.4563737338172984,4.020698998822525,7.83104356477376],[3,-0.07236081996736557,0.03501809641207027,0.002542173940871126,0.9967603433167773],[1,-8.304321541008003,4.024165472580301,9.93923337957349e-17]],[37,"Controller Left",[-65],[[[99,-60],-61,[104,-62,1],[105,-63],[45,-64,[46],[47],[48]]],4,1,4,4,4]],[37,"Controller Right",[-71],[[[43,4,-66],-67,[106,null,1,-68],[107,-69,[[[1,0,0,0],[1,-6.938893903907228e-18,-0.0311476039613523,-1.2869451227821476],[1,5.551115123125783e-17,-0.12459041584541097,-2.5829829322499194],[1,8.326672684688674e-17,-0.2803284356521727,-3.888113428403316],[1,1.6653345369377348e-16,-0.49836166338164145,-5.202336611242336],[1,1.3877787807814457e-16,-0.7786900990338143,-6.525652480766978],[1,2.220446049250313e-16,-1.121313742608693,-7.858061036977246],[1,4.440892098500626e-16,-1.526232594106276,-9.19956227987314],[1,2.220446049250313e-16,-1.9934466535265647,-10.550156209454654],[1,1.6653345369377348e-16,-2.522955920869559,-11.90984282572179],[1,4.996003610813204e-16,-3.1147603961352575,-13.278622128674556],[1,4.440892098500626e-16,-3.7688600793236624,-14.656494118312947],[1,5.551115123125783e-16,-4.485254970434772,-16.043458794636955],[1,3.3306690738754696e-16,-5.263945069468587,-17.439516157646594],[1,7.771561172376096e-16,-6.104930376425106,-18.844666207341852],[1,7.771561172376096e-16,-7.00821089130433,-20.258908943722737],[1,6.661338147750939e-16,-7.97378661410626,-21.68224436678924],[1,5.551115123125783e-16,-9.001657544830898,-23.114672476541372],[1,4.440892098500626e-16,-10.091823683478234,-24.556193272979126],[1,8.881784197001252e-16,-11.244285030048282,-26.006806756102513]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[108,0.004],[109,[4,4278190335]],3],[45,-70,[46],[47],[48]]],4,1,4,4,4]],[58,"TrackingSpace",5,[4,6,7],[1,0,1.36144,0]],[59,"Plane","ddxqvn7G1HorzjfvmJ7G6a",2,[-77],[[49,"Plane<ModelComponent>",-72,[9],[4],10],[110,null,null,null,null,null,null,null,null,null,null,null,null,1,-75,-74,-73],[41,-76,[1,10,0.001,10],11]],[1,13.686,1.44,0]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[1,["c46/YsCPVOJYA4mWEpNYRx"]],[111,5],[1,["f2EIj8Vm9Avrc32qcx7awa"]],[35,"LeftEye",false,4,[[42,"Camera<CameraComponent>",0.1,1822425087,0,-78,[4,4286073907]],[44,1,-79]]],[35,"RightEye",false,4,[[42,"Camera<CameraComponent>",0.1,1822425087,1,-80,[4,4286073907]],[44,2,-81]]],[10,0,{},6,[12,"c46/YsCPVOJYA4mWEpNYRx",null,null,-82,[13,"77pE1KzkdB1YkyggGPDHFM",null,[[18,"Controller Left",["_name"],10],[9,["_lpos"],10,[1,0,0,0]],[9,["_lrot"],10,[3,0,0,0,1]],[9,["_euler"],10,[1,0,0,0]]]],0]],[10,0,{},7,[12,"c46/YsCPVOJYA4mWEpNYRx",null,null,-83,[13,"9fH5YsnTBIRoRxaiCE5s3E",null,[[18,"Controller Right",["_name"],11],[9,["_lpos"],11,[1,0,0,0]],[9,["_lrot"],11,[3,0,0,0,1]],[9,["_euler"],11,[1,0,0,0]]]],2]],[10,0,null,2,[12,"26LvC5hbxAuJZ9Jl2SB/IV",null,null,-84,[13,"cdNOYl3LRPhapW8a8hi/Iy",null,[[5,["lightmapSettings"],[1,["ddvMFij+ZIL5lu+/NQX8Nf"]],[4]],[5,["lightmapSettings"],[1,["e3XMjUJKFLH41z39JaWzyB"]],[4]],[14,["position"],[1,["fd517lz3tOuqVWGd5300X6"]],[1,-1.341,0.805,-2.555]],[5,["lightmapSettings"],[1,["a5Viy6l3VLDpf6gY5yZF+v"]],[4]],[6,1,["_shadowCastingMode"],[1,["a5Viy6l3VLDpf6gY5yZF+v"]]],[5,["lightmapSettings"],[1,["e4If/bQrJCsb9D9JopZa2h"]],[4]],[5,["lightmapSettings"],[1,["d7Vkz0NV5Mn4RUce28JVTp"]],[4]],[5,["lightmapSettings"],[1,["3eVATgLQJKDbqOvE33W2uc"]],[4]],[5,["lightmapSettings"],[1,["2akU/MgO5Ovo6QcS0c/I7e"]],[4]],[5,["lightmapSettings"],[1,["54xaKIQbtPLK5r21VY0qmM"]],[4]],[5,["lightmapSettings"],[1,["23UFBqszxJ/6Otof04QwYT"]],[4]],[5,["lightmapSettings"],[1,["c7PE6gNTdDw45ytwlOEWR3"]],[4]]]],4]],[10,0,null,2,[12,"6dMvPN2t1B66O9Zc3HG8dr",null,null,-85,[13,"93xtJEZ71OF5Gk8u497J9k",null,[[5,["lightmapSettings"],[1,["78XZsd31xPjIsSP2888FcN"]],[4]],[5,["lightmapSettings"],[1,["ffoVYmt2NOmIBz5DHpacF8"]],[4]],[5,["lightmapSettings"],[1,["9aCVBuMeZPv6so1VxT6c40"]],[4]],[5,["lightmapSettings"],[1,["ca1srfPsJJgKKJww9GO/JE"]],[4]]]],5]],[10,0,null,2,[12,"e5Peksu5tL9peMeABb8/JC",null,null,-86,[13,"7e4SH9jydKyaQjXZtS5AiQ",null,[[5,["lightmapSettings"],[1,["a6J1jU/r1BPKNIcVMEREit"]],[4]],[6,1,["_shadowReceivingMode"],[1,["a6J1jU/r1BPKNIcVMEREit"]]],[5,["lightmapSettings"],[1,["28WH2cvhNDFbN3it+8Q+XK"]],[4]],[6,1,["_shadowReceivingMode"],[1,["28WH2cvhNDFbN3it+8Q+XK"]]],[5,["lightmapSettings"],[1,["87exLhmM1P35jx6GLN7j5f"]],[4]],[6,1,["_shadowReceivingMode"],[1,["87exLhmM1P35jx6GLN7j5f"]]],[5,["lightmapSettings"],[1,["dduLonFhNK+q908BUlLM7f"]],[4]],[6,1,["_shadowCastingMode"],[1,["dduLonFhNK+q908BUlLM7f"]]],[6,1,["_shadowReceivingMode"],[1,["dduLonFhNK+q908BUlLM7f"]]],[5,["lightmapSettings"],[1,["af0f1GeGlKf5MvKMEuH8MJ"]],[4]],[6,1,["_shadowReceivingMode"],[1,["af0f1GeGlKf5MvKMEuH8MJ"]]],[5,["lightmapSettings"],[1,["e9BPt5G81CloUmA5IJNHIQ"]],[4]],[6,1,["_shadowReceivingMode"],[1,["e9BPt5G81CloUmA5IJNHIQ"]]],[5,["lightmapSettings"],[1,["7dt8ZZ5EBNDIxOgpt1XbGu"]],[4]],[6,1,["_shadowReceivingMode"],[1,["7dt8ZZ5EBNDIxOgpt1XbGu"]]],[5,["lightmapSettings"],[1,["c4Nekl9YtKUKupS0ASX7It"]],[4]],[6,1,["_shadowReceivingMode"],[1,["c4Nekl9YtKUKupS0ASX7It"]]],[5,["lightmapSettings"],[1,["b9cuhcVRxPvZTPHcAyE7eS"]],[4]],[6,1,["_shadowReceivingMode"],[1,["b9cuhcVRxPvZTPHcAyE7eS"]]],[5,["lightmapSettings"],[1,["f3T3OFBBJBYrGbPSQ+k7GJ"]],[4]],[6,1,["_shadowReceivingMode"],[1,["f3T3OFBBJBYrGbPSQ+k7GJ"]]],[5,["lightmapSettings"],[1,["d0A5LfhGhAfrDnBGJ3JzOe"]],[4]],[6,1,["_shadowReceivingMode"],[1,["d0A5LfhGhAfrDnBGJ3JzOe"]]],[5,["lightmapSettings"],[1,["161SEdWiFO/abXxUI8RkYk"]],[4]],[6,1,["_shadowReceivingMode"],[1,["161SEdWiFO/abXxUI8RkYk"]]]]],6]],[60,"Sphere",9,[[49,"Sphere<ModelComponent>",-87,[7],[4],8]],[1,2.86,0.514,3.452],[1,0.3,0.3,0.3]],[61,"Label",512,8388608,3,[[39,-88,[5,100,40]],[112,"ChangeToXRUI",12,12,1,false,-89,[4,4278190080],12]]],[62,"change_scene","bbEWZj5uFHg6vxddoToCv1",2,[[113,-90]]],[63,"Main Light","c0y6F5f+pAvI805TdmxIjx",2,[[114,125000,3.2552083333333335,true,2,0.01,0.45098039215686275,10,1,50,10,-91,[115]]],[1,-2.955,3.412,5.118],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[116,6],[117,1,7],[118,5,12],[71,"Locomotion Checker","a3vTyI8dlPrp8GTKGoU+pD",2,[12]]],0,[0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,9,13,0,9,13,0,9,13,0,9,13,0,7,1,0,-1,16,0,-2,17,0,-3,18,0,-4,19,0,-5,20,0,-1,24,0,-2,5,0,-3,18,0,-4,19,0,-5,20,0,-6,28,0,-7,9,0,-8,3,0,-9,23,0,0,3,0,0,3,0,5,3,0,3,23,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,22,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,14,0,-2,15,0,23,8,0,0,5,0,-2,27,0,17,26,0,18,12,0,0,5,0,17,25,0,18,12,0,0,5,0,-1,8,0,0,6,0,-2,25,0,0,6,0,0,6,0,0,6,0,-1,16,0,0,7,0,-2,26,0,0,7,0,0,7,0,0,7,0,-1,17,0,0,9,0,24,27,0,25,21,0,0,9,0,0,9,0,-1,21,0,0,14,0,0,14,0,0,15,0,0,15,0,7,16,0,7,17,0,7,18,0,7,19,0,7,20,0,0,21,0,0,22,0,0,22,0,0,23,0,0,24,0,26,2,1,10,2,4,10,8,6,10,8,7,10,8,12,0,28,91],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,14,8,14,8,8,8,-1,15,-1,15,14,19,19,1,6,11,12,13,14,8,27,28],[25,3,26,27,28,29,30,7,31,7,32,3,8,8,4,4,4,33,34,3,35,9,9]],[[[119,"../xr/res/default_effects/xr-distortion-correction",[{"hash":709706482,"name":"../xr/res/default_effects/xr-distortion-correction|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"ARGS","stageFlags":16,"binding":1,"members":[{"name":"eye","type":13,"count":1}],"defines":[]},{"name":"Constant","stageFlags":16,"binding":2,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":16,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"ARGS","stageFlags":16,"binding":1,"members":[{"name":"eye","type":13,"count":1}],"defines":[]},{"name":"Constant","stageFlags":16,"binding":2,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nlayout(std140) uniform ARGS  {\n  float eye;\n};\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec2 uvtemp = v_uv;\n    if(eye == 0.0) {\n      uvtemp.x = uvtemp.x * 0.5;\n    } else if (eye == 1.0) {\n      uvtemp.x = uvtemp.x * 0.5 + 0.5;\n    }\n    vec4 texColor = texture(mainTexture, uvtemp);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n    if(v_uv.x >= 1.0 || v_uv.y >= 1.0 || v_uv.x <= 0.0 || v_uv.y <= 0.0) {\n      return vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC && CC_SURFACES_ENABLE_DEBUG_VIEW\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 packRGBE (vec3 rgb) {\n  highp float maxComp = max(max(rgb.r, rgb.g), rgb.b);\n  highp float e = 128.0;\n  if (maxComp > 0.0001) {\n    e = log(maxComp) / log(1.1);\n    e = ceil(e);\n    e = clamp(e + 128.0, 0.0, 255.0);\n  }\n  highp float sc = 1.0 / pow(1.1, e - 128.0);\n  vec3 encode = clamp(rgb * sc, vec3(0.0), vec3(1.0)) * 255.0;\n  vec3 encode_rounded = floor(encode) + step(encode - floor(encode), vec3(0.5));\n  return vec4(encode_rounded, e) / 255.0;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_RGBE_OUTPUT\n    color = packRGBE(color.rgb);\n  #elif !CC_USE_FLOAT_OUTPUT\n    #if CC_USE_HDR && CC_TONE_MAPPING_TYPE == HDR_TONE_MAPPING_ACES\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = LinearToSRGB(color.rgb);\n  #endif\n  return color;\n}\nuniform mediump vec4 cc_debug_view_mode;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n   uniform float eye;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec2 uvtemp = v_uv;\n    if(eye == 0.0) {\n      uvtemp.x = uvtemp.x * 0.5;\n    } else if (eye == 1.0) {\n      uvtemp.x = uvtemp.x * 0.5 + 0.5;\n    }\n    vec4 texColor = texture2D(mainTexture, uvtemp);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n    if(v_uv.x >= 1.0 || v_uv.y >= 1.0 || v_uv.x <= 0.0 || v_uv.y <= 0.0) {\n      return vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SURFACES_ENABLE_DEBUG_VIEW","type":"boolean"},{"name":"CC_USE_RGBE_OUTPUT","type":"boolean"},{"name":"CC_USE_FLOAT_OUTPUT","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_TONE_MAPPING_TYPE","type":"number","range":[0,3]},{"name":"HDR_TONE_MAPPING_ACES","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"../xr/res/default_effects/xr-distortion-correction|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"eye":{"type":13,"value":[0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"program":"../xr/res/default_effects/xr-distortion-correction|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"eye":{"type":13,"value":[0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]}]]],0,0,[],[],[]],[[[51,"XR Distortion Correction"],[64,"XR Distortion Correction",268435456,[-3,-4,-5],[[120,-2,[0,"5eatoQnmVEb4u/8+//0BLe"]]],[2,"6dxr+jB1FCBa4mRTowNvKS",null,null,null,-1,0]],[25,"DistortionCamera",false,268435456,1,[[95,"Camera<CameraComponent>",1,90,0.01,0.5,268435457,-6,[0,"a7RW/YYlJMvpRgL4qnnY2X"],[4,4293350971]]],[2,"5fFx6AbAhGjIkhBtRpScKx",null,null,null,1,0]],[36,"LeftEyeMesh",false,268435456,1,[[50,"Plane<ModelComponent>",-7,[0,"58uzqRqL1Jm45Xor1AohU9"],[0],[4],1]],[2,"09OwvpAWJH0pmLAWuR5wXL",null,null,null,1,0],[1,-0.48,0,-0.48],[1,0.48,0.48,1]],[36,"RightEyeMesh",false,268435456,1,[[50,"Plane<ModelComponent>",-8,[0,"6faopbPHVCYbilS19EqBil"],[2],[4],3]],[2,"fcPU9fgZdP7rg0Cm1t7Uaz",null,null,null,1,0],[1,0.48,0,-0.48],[1,0.48,0.48,1]]],0,[0,7,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,3,0,0,4,0,20,1,8],[0,0,0,0],[-1,15,-1,15],[10,11,10,11]],[[{"name":"xr_icon_distortionmode_pressed","rect":{"x":0,"y":0,"width":128,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-30,0,64,-30,0,-64,30,0,64,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,128,60,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-30,"z":0},"maxPos":{"x":64,"y":30,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[36]],[[{"name":"xr_icon_rctrl_normal","rect":{"x":30,"y":24,"width":59,"height":71},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-29.5,-35.5,0,29.5,-35.5,0,-29.5,35.5,0,29.5,35.5,0],"indexes":[0,1,2,2,1,3],"uv":[30,96,89,96,30,25,89,25],"nuv":[0.25,0.20833333333333334,0.7416666666666667,0.20833333333333334,0.25,0.8,0.7416666666666667,0.8],"minPos":{"x":-29.5,"y":-35.5,"z":0},"maxPos":{"x":29.5,"y":35.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[37]],[[{"name":"xr_icon_hmd_focused","rect":{"x":0,"y":0,"width":120,"height":120},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-60,0,60,-60,0,-60,60,0,60,60,0],"indexes":[0,1,2,2,1,3],"uv":[0,120,120,120,0,0,120,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60,"y":-60,"z":0},"maxPos":{"x":60,"y":60,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[38]],[[{"name":"xr_icon_hmd_normal","rect":{"x":9,"y":34,"width":102,"height":52},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-51,-26,0,51,-26,0,-51,26,0,51,26,0],"indexes":[0,1,2,2,1,3],"uv":[9,86,111,86,9,34,111,34],"nuv":[0.075,0.2833333333333333,0.925,0.2833333333333333,0.075,0.7166666666666667,0.925,0.7166666666666667],"minPos":{"x":-51,"y":-26,"z":0},"maxPos":{"x":51,"y":26,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[39]],[[{"name":"xr_icon_lctrl_normal","rect":{"x":30,"y":24,"width":59,"height":71},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-29.5,-35.5,0,29.5,-35.5,0,-29.5,35.5,0,29.5,35.5,0],"indexes":[0,1,2,2,1,3],"uv":[30,96,89,96,30,25,89,25],"nuv":[0.25,0.20833333333333334,0.7416666666666667,0.20833333333333334,0.25,0.8,0.7416666666666667,0.8],"minPos":{"x":-29.5,"y":-35.5,"z":0},"maxPos":{"x":29.5,"y":35.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[40]],[[{"name":"xr_icon_setting_normal","rect":{"x":31,"y":31,"width":82,"height":82},"offset":{"x":0,"y":0},"originalSize":{"width":144,"height":144},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-41,-41,0,41,-41,0,-41,41,0,41,41,0],"indexes":[0,1,2,2,1,3],"uv":[31,113,113,113,31,31,113,31],"nuv":[0.2152777777777778,0.2152777777777778,0.7847222222222222,0.2152777777777778,0.2152777777777778,0.7847222222222222,0.7847222222222222,0.7847222222222222],"minPos":{"x":-41,"y":-41,"z":0},"maxPos":{"x":41,"y":41,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[41]],[[{"name":"xr_icon_distortionmode_hover","rect":{"x":0,"y":0,"width":128,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-30,0,64,-30,0,-64,30,0,64,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,128,60,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-30,"z":0},"maxPos":{"x":64,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[42]],[[{"name":"xr_icon_top_background","rect":{"x":0,"y":0,"width":436,"height":144},"offset":{"x":0,"y":0},"originalSize":{"width":436,"height":144},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-218,-72,0,218,-72,0,-218,72,0,218,72,0],"indexes":[0,1,2,2,1,3],"uv":[0,144,436,144,0,0,436,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-218,"y":-72,"z":0},"maxPos":{"x":218,"y":72,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[43]],[[[51,"XR Simulator"],[65,"XR Simulator",[-18,-19],[[121,"192.168.50.116",-17,[0,"2bKVw7sjJBJpXswm/mwNvW"]]],[75,"f2EIj8Vm9Avrc32qcx7awa",null,-16,0,[[7,["_target"],-3,[1,["7eACBq9ZxNwb/royRJlers"]],-2,[1,["d57o/36SxN9YtElmAvjO1V"]]],[7,["_target"],-5,[1,["2dAJir4J5F3IVEGgha4oCG"]],-4,[1,["95y6nLs4hA5I1ZNmNnqAf7"]]],[7,["_checkMark"],-7,[1,["2dAJir4J5F3IVEGgha4oCG"]],-6,[1,["6a3igP/VNBZYvug9YSE5FN"]]],[7,["_target"],-9,[1,["a95mHuH6ROR7XaOgPuWyEd"]],-8,[1,["ad22BsYuRDY6TnQv35xUeK"]]],[7,["_checkMark"],-11,[1,["a95mHuH6ROR7XaOgPuWyEd"]],-10,[1,["49e5ph85xFxJDpNSXxjgC3"]]],[7,["_target"],-13,[1,["89UUVBLutMJ7dHzHXeWtHV"]],-12,[1,["347i8XM0JD35alYLTjWT4K"]]],[7,["_checkMark"],-15,[1,["89UUVBLutMJ7dHzHXeWtHV"]],-14,[1,["794bTa5U1Fpa+Pn8dk8bDV"]]]],[-1]]],[66,"Canvas",false,33554432,1,[-24,-25,-26,-27,-28,-29,-30,-31,-32],[[3,-20,[0,"a7Ykim8nNAcpSqvVPinXgz"],[5,960,640]],[122,-22,[0,"0dTFuCQsJLFbUZ2GJCc8Tn"],-21],[123,45,5.684341886080802e-14,5.684341886080802e-14,960,640,-23,[0,"5dJnb3v/NHhaVhqrYKYTNP"]]],[2,"26zTf0+jJGuozhWpobDW4x",null,null,null,1,0],[1,480.00000000000006,320,0]],[8,"SettingPanel",33554432,2,[-36,-37,-38,-39,-40,-41],[[3,-33,[0,"c6kiixmFNEeYO1gVx/Dli8"],[5,260,150]],[30,1,40.69900000000001,-34,[0,"d25d+e3N5DaLpHubk1cWQf"]],[15,0,-35,[0,"70FtEw/ZNKI7wpqfII83wk"],38]],[2,"fcTEJ9T6pDfZ9mBOFRCbNB",null,null,null,1,0],[1,184.678,204.301,0]],[67,"Mask",33554432,[-46],[[28,-42,[0,"46LIZ5UZdHk73QUYkLnfLv"],[5,640,100],[0,0,0.5]],[125,3,4,0,-43,[0,"a9YhhUW+1AD6R6ajK+pj1F"]],[31,18,-44,[0,"dcE5rk4wlN16MLQdyS8krS"]],[15,0,-45,[0,"9aR0F8dzpBkrVqNDLpgAb/"],3]],[2,"79Evm4vPhIrJgJ/tlNhcm2",null,null,null,1,0],[1,-320,0,0]],[8,"ToggleHmd",33554432,2,[-53],[[3,-47,[0,"d8o4j8LiBL6YkjNAOJOaFu"],[5,32,32]],[21,0,false,-48,[0,"47Qiw/A7NPcZ3ZjUU7K3W8"],10],[126,-51,[0,"2dAJir4J5F3IVEGgha4oCG"],[[16,"2dad3FAQq1EI7EXODhj9eIx","onToggleChanged",1]],[4,4292269782],-50,-49,11],[32,17,8.75,-38,-52,[0,"16qQJMM49K7ohPffFmRXWS"]]],[2,"95y6nLs4hA5I1ZNmNnqAf7",null,null,null,1,0],[1,-38,295.25,0]],[8,"ToggleLeftCtrl",33554432,2,[-60],[[3,-54,[0,"e1yHE7X+9Jh4iMglm6HnVE"],[5,32,32]],[21,0,false,-55,[0,"2aAznPA65Fy4kbwQzXmOHr"],12],[34,false,-58,[0,"a95mHuH6ROR7XaOgPuWyEd"],[[16,"2dad3FAQq1EI7EXODhj9eIx","onToggleChanged",1]],[4,4292269782],-57,-56,13],[30,17,8.75,-59,[0,"42JFlOZfJG+6r+JC3g6ev3"]]],[2,"ad22BsYuRDY6TnQv35xUeK",null,null,null,1,0],[1,0,295.25,0]],[8,"ToggleRightCtrl",33554432,2,[-67],[[3,-61,[0,"387eoVKdhGjLL3UtCyxXgJ"],[5,32,32]],[21,0,false,-62,[0,"b0kyUjETlD7qOfD8JU0ZNa"],14],[34,false,-65,[0,"89UUVBLutMJ7dHzHXeWtHV"],[[16,"2dad3FAQq1EI7EXODhj9eIx","onToggleChanged",1]],[4,4292269782],-64,-63,15],[32,17,8.75,38,-66,[0,"28yOmvkhlEMasyHDDkFg/T"]]],[2,"347i8XM0JD35alYLTjWT4K",null,null,null,1,0],[1,38,295.25,0]],[8,"ToggleSetting",33554432,2,[-74],[[3,-68,[0,"68oXKL3CZMpLzso8reqD3N"],[5,32,32]],[21,0,false,-69,[0,"7a2pjIav9LI6fgkP4jkSKI"],16],[34,false,-72,[0,"2169q9WYpO2pUDbHxI+FDI"],[[16,"2dad3FAQq1EI7EXODhj9eIx","onToggleChanged",1]],[4,4292269782],-71,-70,17],[32,17,8.75,86.938,-73,[0,"ecPh7+P4pN1ZQ8k8M1fcCO"]]],[2,"2e/HYttCVHvIyZepAjokSA",null,null,null,1,0],[1,86.938,295.25,0]],[8,"DistortionK0",33554432,3,[-80,-81],[[3,-75,[0,"6c5L3+calC1qyRZhFZ1W4m"],[5,200,5]],[86,1,0,-76,[0,"80qhyrlcJCUIM5U+f/gSzl"]],[127,0,-78,[0,"0ct+FTfNhG8rrx5qQahzRG"],-77],[33,9,32.672000000000004,109.601,-79,[0,"791pHiDL1M4Jshcm/RUjuc"]]],[2,"22IPrgQMZH+LauSQu2ip9o",null,null,null,1,0],[1,2.671999999999997,-37.101,0]],[8,"GuideContent",33554432,2,[-84,-85,4],[[3,-82,[0,"dfIEh/TJhAapuo1Yi2uK76"],[5,640,180]],[52,20,30.24199999999999,-83,[0,"91pTaWbbFGgoHaAtLVw1cC"]]],[2,"1epyZ/hetCU4EVUvxFdiUt",null,null,null,1,0],[1,0,-199.75800000000004,0]],[26,"GuideButton",33554432,2,[[3,-86,[0,"74D2N+QO5IYoRjTatE89k6"],[5,148,36]],[19,1,0,-87,[0,"90O77R4K5Jk59Uv+SLhAo1"],4],[23,2,-89,[0,"7eACBq9ZxNwb/royRJlers"],[[29,"2dad3FAQq1EI7EXODhj9eIx","showGuideUI","0",1]],[4,4292269782],-88,5,6,7,8],[52,20,6.673000000000002,-90,[0,"8a8GqsfXNGjZF8H6IzzTf5"]]],[2,"d57o/36SxN9YtElmAvjO1V",null,null,null,1,0],[1,0,-295.327,0]],[68,"ProgressBar",33554432,9,[-95],[[3,-91,[0,"1aOSo5iNpE25t54bhTCY/2"],[5,200,5]],[19,1,0,-92,[0,"b8m4j9NFdJx75ydg5HU6MW"],18],[128,200,0,-94,[0,"89v4wX/p1COboiRnRa6QnX"],-93]],[2,"39BEoBZB1OEZyCNt6HhaDR",null,null,null,1,0]],[38,"Handle",33554432,9,[[[3,-96,[0,"beI/t91JFI7q6BlO4ZwnMM"],[5,15,15]],-97,[91,-99,[0,"77a+fAfpJKbZbZJXYEEYxe"],[4,4292269782],-98,19]],4,1,4],[2,"e6d6Ne1UNMzb2Ct7C7OIOe",null,null,null,1,0],[1,-100,0,0]],[8,"DistortionModeNone",33554432,3,[-101,-102,-103],[[3,-100,[0,"afBjmt4rpODIFX/WjKcow4"],[5,60,28]]],[2,"18Vg1xNyRMnLZfZLWmRFRu",null,null,null,1,0],[1,-74,16.377,0]],[11,"NormalHover",33554432,14,[[3,-104,[0,"ff8sZpkzNI+auVFCpiSgSs"],[5,60,28]],[19,1,0,-105,[0,"49czNwufJKfoo8AkJ98Q3T"],20],[23,2,-107,[0,"93ZK9IYp5FJZ29YyU2O/ir"],[[16,"2dad3FAQq1EI7EXODhj9eIx","onDistortionModeButtonClick",1]],[4,4292269782],-106,21,22,23,24]],[2,"07JNNGbrVGd61wW5wMEq3K",null,null,null,1,0]],[8,"DistortionModeBarrel",33554432,3,[-109,-110,-111],[[3,-108,[0,"61J6Q0vyRPlJcKgDMLg0KP"],[5,60,28]]],[2,"95Vhjx1LZJfLYFpP+ENCsn",null,null,null,1,0],[1,-4,16.377,0]],[11,"NormalHover",33554432,16,[[3,-112,[0,"e17YpAUzRGWZux4JFv3xqG"],[5,60,28]],[19,1,0,-113,[0,"6f0cVdLldHWapTN97ZlMOv"],26],[23,2,-115,[0,"e4g44Mnn9HE7kDahAwWOWv"],[[29,"2dad3FAQq1EI7EXODhj9eIx","onDistortionModeButtonClick","BARREL",1]],[4,4292269782],-114,27,28,29,30]],[2,"55ro7SFbJG+5yfEVpCiGjp",null,null,null,1,0]],[8,"DistortionModeCircular",33554432,3,[-117,-118,-119],[[3,-116,[0,"8b6XaRkRNOWqCuZu8jFvCc"],[5,60,28]]],[2,"88eH59+oVHj766MyU/JBnI",null,null,null,1,0],[1,66,16.377,0]],[11,"NormalHover",33554432,18,[[3,-120,[0,"10BVnopp1LP7dPMbKoFhM6"],[5,60,28]],[19,1,0,-121,[0,"fb4eYxr6pCLLHTqz8MAb54"],32],[23,2,-123,[0,"884E/AzS5Na48B3xS1ka4y"],[[29,"2dad3FAQq1EI7EXODhj9eIx","onDistortionModeButtonClick","CIRCULAR",1]],[4,4292269782],-122,33,34,35,36]],[2,"6arX8lw+ZGRq9VkeJivPmF",null,null,null,1,0]],[11,"Sprite",33554432,10,[[3,-124,[0,"6dVBjXjR5OhqPiqybFauSL"],[5,2048,2048]],[40,0,-125,[0,"5cpDX2vx5O3bRAZBDMondm"],[4,2097151999],0],[31,18,-126,[0,"26frqvttlLworHcOOUii25"]]],[2,"8e/nGkbrNGgaVar3zxTzkd",null,null,null,1,0]],[11,"Bg",33554432,10,[[3,-127,[0,"1c7SfrFmRGVY+nOBJ4mL1g"],[5,660,120]],[87,1,0,false,-128,[0,"0aAS1mNI9OXJlm0QSgK6Ig"],1],[31,18,-129,[0,"cbtU8gfbpDVZJIJcNOPjEK"]]],[2,"28I2FeatJA+YVNBHfObFry",null,null,null,1,0]],[26,"Content",33554432,4,[[28,-130,[0,"bda36/bOJHzqvbk+oNDagH"],[5,1047,90],[0,0,0.5]],[15,0,-131,[0,"71l51g1cNBeokQJ8BFeTfT"],2],[124,10,15,-132,[0,"8eDFV4/WpBP6lEBjoG/+T7"],4]],[2,"d5xB+D1jhJro4Dr7pLVEOF",null,null,null,1,0],[1,15,0,0]],[26,"StatusBackground",33554432,2,[[3,-133,[0,"51Z0IXJCRCep6nVonhAdZF"],[5,128,40]],[40,0,-134,[0,"d7MwGf2ZJATpKLW7cd67Bx"],[4,2063597567],9],[30,17,5,-135,[0,"08yuuDFVNETr6HnG8fyYHr"]]],[2,"e78Wr2w61E9rkFnNHw4zZh",null,null,null,1,0],[1,0,295,0]],[17,"DistortionParamsTitle",33554432,3,[[3,-136,[0,"e6u8QBynhPmIRCddjloH0U"],[5,150,45.36]],[20,"畸变参数：",30,30,36,-137,[0,"15a+ibooxMkIrOGRP+1I3v"]],[33,9,25.5,77.827,-138,[0,"a95/Xw39tG4JmA1rBL9KTI"]]],[2,"acDZDVhCZDKqH8M9hh4sr7",null,null,null,1,0],[1,-67,-14.166999999999998,0],[1,0.5,0.5,0.5]],[17,"DistortionModeTitle",33554432,3,[[3,-139,[0,"67GiO4fMhBb6U5qdpDZwk/"],[5,150,45.36]],[20,"畸变效果：",30,30,36,-140,[0,"590s50fx1Bm47E75bNRU48"]],[33,9,25.5,19.403000000000006,-141,[0,"fd3IdWY6xN4oQq8EOTlSHj"]]],[2,"b5iiRaDptPWaCZzcQerEPX",null,null,null,1,0],[1,-67,44.25699999999999,0],[1,0.5,0.5,0.5]],[70,"Checkmark",33554432,5,[[[3,-142,[0,"cdZxqRUFVH364Hxs+r1pTA"],[5,32,32]],-143],4,1],[2,"80/H6yloRN9IEaXUNR9acr",null,null,null,1,0]],[27,"Checkmark",false,33554432,6,[[[3,-144,[0,"d4miOtCrJLiJ21iZF/Vri3"],[5,32,32]],-145],4,1],[2,"24VWa4yx5I2raIJstexrGs",null,null,null,1,0]],[27,"Checkmark",false,33554432,7,[[[3,-146,[0,"88qhKXHNVEAYBFY59cLrUQ"],[5,32,32]],-147],4,1],[2,"3dGpIq8kpMZIn99eAO0OcP",null,null,null,1,0]],[27,"Checkmark",false,33554432,8,[[[3,-148,[0,"b054HaCF1LBJ7TaWFvlWCq"],[5,32,32]],-149],4,1],[2,"0aTvXp7Q5PaY81LcNPQe18",null,null,null,1,0]],[38,"Bar",33554432,12,[[[28,-150,[0,"41wuEGKoNL9bURD+jYVkxv"],[5,0,5],[0,0,0.5]],-151],4,1],[2,"59gEeSIqpELJ23MWQvfwEX",null,null,null,1,0],[1,-100,0,0]],[11,"Selected",33554432,14,[[3,-152,[0,"7aeyiPGFxOkIEBwIVMjobh"],[5,60,28]],[15,0,-153,[0,"7bXxaryHhOqpG52fsZsvfL"],25]],[2,"e5CJ35HlhJna6TEEB4Euli",null,null,null,1,0]],[17,"Name",33554432,14,[[3,-154,[0,"75H+witFNCBq/0gaJJ8978"],[5,24,32.76]],[20,"无",24,24,26,-155,[0,"d4RCSch5ZLwbm6IwV5eUs8"]]],[2,"2aePihmv1LoJNXgTag1DdX",null,null,null,1,0],[1,10,0,0],[1,0.5,0.5,0.5]],[25,"Selected",false,33554432,16,[[3,-156,[0,"56sYrAX7FHnr+ZEubHtqJH"],[5,60,28]],[15,0,-157,[0,"c0XVlTf+NNy5ubrkFVCTVS"],31]],[2,"49MDh1+ZJFQI1fufLWjyJz",null,null,null,1,0]],[17,"Name",33554432,16,[[3,-158,[0,"acrJ4zOahO/JiQ8PmD4xBi"],[5,48,32.76]],[20,"桶形",24,24,26,-159,[0,"48e6HiEsJJsa8mko4oA53P"]]],[2,"6cdLb15tlJp6IC0IxkoRmh",null,null,null,1,0],[1,10,0,0],[1,0.5,0.5,0.5]],[25,"Selected",false,33554432,18,[[3,-160,[0,"6dFFwO35RKO6n2xmwiMBBA"],[5,60,28]],[15,0,-161,[0,"6bojir6TJBv4gCaKo7zdn+"],37]],[2,"ca0562egNO8JKS/5/wvPoI",null,null,null,1,0]],[17,"Name",33554432,18,[[3,-162,[0,"6cdr+Us9NIV7pVyoUHEJf7"],[5,48,32.76]],[20,"圆形",24,24,26,-163,[0,"ceBC9NJ4JAgrtcfMdDAVXY"]]],[2,"a3VascbaJC0a0EQaj9S5pp",null,null,null,1,0],[1,10,0,0],[1,0.5,0.5,0.5]],[10,0,{},1,[12,"6dxr+jB1FCBa4mRTowNvKS",null,null,-166,[76,"94cWNqbiZJIrzIH52rxHh5",1,[[6,"XR Distortion Correction",["_name"],[1,["6dxr+jB1FCBa4mRTowNvKS"]]],[14,["_lpos"],[1,["6dxr+jB1FCBa4mRTowNvKS"]],[1,0,0,0]],[14,["_lrot"],[1,["6dxr+jB1FCBa4mRTowNvKS"]],[3,0,0,0,1]],[14,["_euler"],[1,["6dxr+jB1FCBa4mRTowNvKS"]],[1,0,0,0]],[6,268435456,["_layer"],[1,["6dxr+jB1FCBa4mRTowNvKS"]]],[18,0,["_layer"],-164],[6,268435456,["_layer"],[1,["09OwvpAWJH0pmLAWuR5wXL"]]],[6,268435456,["_layer"],[1,["fcPU9fgZdP7rg0Cm1t7Uaz"]]],[6,268435456,["_visibility"],[1,["a7RW/YYlJMvpRgL4qnnY2X"]]],[18,false,["_active"],-165]]],39]],[72,"Camera",2,[-167],[2,"0dtZK6LPdKBrNXEOefIrI0",null,null,null,1,0],[1,0,0,1000]],[96,0,1073741824,320,2000,6,33554432,38,[0,"512jUVf9NEFJK7Fd6Lrsr4"],[4,4278190080]],[22,0,false,26,[0,"6a3igP/VNBZYvug9YSE5FN"]],[22,0,false,27,[0,"49e5ph85xFxJDpNSXxjgC3"]],[22,0,false,28,[0,"794bTa5U1Fpa+Pn8dk8bDV"]],[22,0,false,29,[0,"cagnyt38tNBJRDZq/EixBb"]],[88,1,0,30,[0,"fbcfoqUs1Ew4HQ+XcuI/9L"],[4,4294404641]],[89,0,13,[0,"14mD8M4hdNvLIjn5jHxXwr"]],[1,["5fFx6AbAhGjIkhBtRpScKx"]]],0,[0,-1,37,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,3,1,0,4,1,0,7,1,0,0,1,0,-1,2,0,-2,37,0,0,2,0,29,39,0,0,2,0,0,2,0,-1,38,0,-2,10,0,-3,11,0,-4,23,0,-5,5,0,-6,6,0,-7,7,0,-8,8,0,-9,3,0,0,3,0,0,3,0,0,3,0,-1,9,0,-2,24,0,-3,25,0,-4,14,0,-5,16,0,-6,18,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,22,0,0,5,0,0,5,0,16,40,0,5,5,0,0,5,0,0,5,0,-1,26,0,0,6,0,0,6,0,16,41,0,5,6,0,0,6,0,0,6,0,-1,27,0,0,7,0,0,7,0,16,42,0,5,7,0,0,7,0,0,7,0,-1,28,0,0,8,0,0,8,0,16,43,0,5,8,0,0,8,0,0,8,0,-1,29,0,0,9,0,0,9,0,30,45,0,0,9,0,0,9,0,-1,12,0,-2,13,0,0,10,0,0,10,0,-1,20,0,-2,21,0,0,11,0,0,11,0,5,11,0,0,11,0,0,11,0,0,12,0,0,12,0,31,44,0,0,12,0,-1,30,0,0,13,0,-2,45,0,5,13,0,0,13,0,0,14,0,-1,15,0,-2,31,0,-3,32,0,0,15,0,0,15,0,5,15,0,0,15,0,0,16,0,-1,17,0,-2,33,0,-3,34,0,0,17,0,0,17,0,5,17,0,0,17,0,0,18,0,-1,19,0,-2,35,0,-3,36,0,0,19,0,0,19,0,5,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,-2,40,0,0,27,0,-2,41,0,0,28,0,-2,42,0,0,29,0,-2,43,0,0,30,0,-2,44,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,0,36,0,9,46,0,9,46,0,7,37,0,-1,39,0,20,1,4,10,10,167],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,42,43,44,45],[1,1,1,1,1,6,11,12,13,1,1,6,1,6,1,6,1,6,1,6,1,6,11,12,13,1,1,6,11,12,13,1,1,6,11,12,13,1,1,8,1,1,1,1,1,1],[2,2,44,2,5,5,12,12,5,2,13,13,14,14,15,15,16,16,17,18,0,0,6,1,0,1,0,0,6,1,0,1,0,0,6,1,0,1,45,46,47,48,49,50,17,18]],[[{"name":"xr_icon_setting_background","rect":{"x":0,"y":0,"width":568,"height":380},"offset":{"x":0,"y":0},"originalSize":{"width":568,"height":380},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-284,-190,0,284,-190,0,-284,190,0,284,190,0],"indexes":[0,1,2,2,1,3],"uv":[0,380,568,380,0,0,568,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-284,"y":-190,"z":0},"maxPos":{"x":284,"y":190,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[51]],[[{"name":"xr_icon_guide_normal","rect":{"x":0,"y":0,"width":272,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":272,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-136,-32,0,136,-32,0,-136,32,0,136,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,272,64,0,0,272,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-136,"y":-32,"z":0},"maxPos":{"x":136,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[52]],[[{"name":"xr_icon_distortionmode_normal","rect":{"x":0,"y":0,"width":128,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":60},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-64,-30,0,64,-30,0,-64,30,0,64,30,0],"indexes":[0,1,2,2,1,3],"uv":[0,60,128,60,0,0,128,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-64,"y":-30,"z":0},"maxPos":{"x":64,"y":30,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[53]],[[{"name":"xr_icon_lctrl_focused","rect":{"x":0,"y":0,"width":120,"height":120},"offset":{"x":0,"y":0},"originalSize":{"width":120,"height":120},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-60,-60,0,60,-60,0,-60,60,0,60,60,0],"indexes":[0,1,2,2,1,3],"uv":[0,120,120,120,0,0,120,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-60,"y":-60,"z":0},"maxPos":{"x":60,"y":60,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[54]],[[{"name":"xr_icon_setting_focused","rect":{"x":0,"y":0,"width":144,"height":144},"offset":{"x":0,"y":0},"originalSize":{"width":144,"height":144},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-72,-72,0,72,-72,0,-72,72,0,72,72,0],"indexes":[0,1,2,2,1,3],"uv":[0,144,144,144,0,0,144,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-72,"y":-72,"z":0},"maxPos":{"x":72,"y":72,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[2],[55]]]]
